
girande_64.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000124c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00802000  0000124c  000012e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000126  00802014  00802014  000012f4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000270  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005c14  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000110f  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000047b3  00000000  00000000  000082e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000778  00000000  00000000  0000ca98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000263cf  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000246c  00000000  00000000  000335df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  00035a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009f10  00000000  00000000  00035c5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	0f c1       	rjmp	.+542    	; 0x224 <__bad_interrupt>
       6:	00 00       	nop
       8:	29 c6       	rjmp	.+3154   	; 0xc5c <__vector_2>
       a:	00 00       	nop
       c:	0b c1       	rjmp	.+534    	; 0x224 <__bad_interrupt>
       e:	00 00       	nop
      10:	09 c1       	rjmp	.+530    	; 0x224 <__bad_interrupt>
      12:	00 00       	nop
      14:	07 c1       	rjmp	.+526    	; 0x224 <__bad_interrupt>
      16:	00 00       	nop
      18:	05 c1       	rjmp	.+522    	; 0x224 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	03 c1       	rjmp	.+518    	; 0x224 <__bad_interrupt>
      1e:	00 00       	nop
      20:	01 c1       	rjmp	.+514    	; 0x224 <__bad_interrupt>
      22:	00 00       	nop
      24:	ff c0       	rjmp	.+510    	; 0x224 <__bad_interrupt>
      26:	00 00       	nop
      28:	fd c0       	rjmp	.+506    	; 0x224 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fb c0       	rjmp	.+502    	; 0x224 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f9 c0       	rjmp	.+498    	; 0x224 <__bad_interrupt>
      32:	00 00       	nop
      34:	f7 c0       	rjmp	.+494    	; 0x224 <__bad_interrupt>
      36:	00 00       	nop
      38:	f5 c0       	rjmp	.+490    	; 0x224 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f3 c0       	rjmp	.+486    	; 0x224 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f1 c0       	rjmp	.+482    	; 0x224 <__bad_interrupt>
      42:	00 00       	nop
      44:	ef c0       	rjmp	.+478    	; 0x224 <__bad_interrupt>
      46:	00 00       	nop
      48:	ed c0       	rjmp	.+474    	; 0x224 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	eb c0       	rjmp	.+470    	; 0x224 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e9 c0       	rjmp	.+466    	; 0x224 <__bad_interrupt>
      52:	00 00       	nop
      54:	e7 c0       	rjmp	.+462    	; 0x224 <__bad_interrupt>
      56:	00 00       	nop
      58:	e5 c0       	rjmp	.+458    	; 0x224 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e3 c0       	rjmp	.+454    	; 0x224 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e1 c0       	rjmp	.+450    	; 0x224 <__bad_interrupt>
      62:	00 00       	nop
      64:	05 c6       	rjmp	.+3082   	; 0xc70 <__vector_25>
      66:	00 00       	nop
      68:	0d c6       	rjmp	.+3098   	; 0xc84 <__vector_26>
      6a:	00 00       	nop
      6c:	db c0       	rjmp	.+438    	; 0x224 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d9 c0       	rjmp	.+434    	; 0x224 <__bad_interrupt>
      72:	00 00       	nop
      74:	d7 c0       	rjmp	.+430    	; 0x224 <__bad_interrupt>
      76:	00 00       	nop
      78:	d5 c0       	rjmp	.+426    	; 0x224 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d3 c0       	rjmp	.+422    	; 0x224 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d1 c0       	rjmp	.+418    	; 0x224 <__bad_interrupt>
      82:	00 00       	nop
      84:	cf c0       	rjmp	.+414    	; 0x224 <__bad_interrupt>
      86:	00 00       	nop
      88:	cd c0       	rjmp	.+410    	; 0x224 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cb c0       	rjmp	.+406    	; 0x224 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c9 c0       	rjmp	.+402    	; 0x224 <__bad_interrupt>
      92:	00 00       	nop
      94:	c7 c0       	rjmp	.+398    	; 0x224 <__bad_interrupt>
      96:	00 00       	nop
      98:	c5 c0       	rjmp	.+394    	; 0x224 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c3 c0       	rjmp	.+390    	; 0x224 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c1 c0       	rjmp	.+386    	; 0x224 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bf c0       	rjmp	.+382    	; 0x224 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bd c0       	rjmp	.+378    	; 0x224 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	a9 c5       	rjmp	.+2898   	; 0xc00 <__vector_43>
      ae:	00 00       	nop
      b0:	b9 c0       	rjmp	.+370    	; 0x224 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b7 c0       	rjmp	.+366    	; 0x224 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b5 c0       	rjmp	.+362    	; 0x224 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b3 c0       	rjmp	.+358    	; 0x224 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b1 c0       	rjmp	.+354    	; 0x224 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	af c0       	rjmp	.+350    	; 0x224 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ad c0       	rjmp	.+346    	; 0x224 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ab c0       	rjmp	.+342    	; 0x224 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a9 c0       	rjmp	.+338    	; 0x224 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a7 c0       	rjmp	.+334    	; 0x224 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a5 c0       	rjmp	.+330    	; 0x224 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a3 c0       	rjmp	.+326    	; 0x224 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a1 c0       	rjmp	.+322    	; 0x224 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9f c0       	rjmp	.+318    	; 0x224 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9d c0       	rjmp	.+314    	; 0x224 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	9b c0       	rjmp	.+310    	; 0x224 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	99 c0       	rjmp	.+306    	; 0x224 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	97 c0       	rjmp	.+302    	; 0x224 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	95 c0       	rjmp	.+298    	; 0x224 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	93 c0       	rjmp	.+294    	; 0x224 <__bad_interrupt>
      fe:	00 00       	nop
     100:	91 c0       	rjmp	.+290    	; 0x224 <__bad_interrupt>
     102:	00 00       	nop
     104:	8f c0       	rjmp	.+286    	; 0x224 <__bad_interrupt>
     106:	00 00       	nop
     108:	8d c0       	rjmp	.+282    	; 0x224 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	8b c0       	rjmp	.+278    	; 0x224 <__bad_interrupt>
     10e:	00 00       	nop
     110:	89 c0       	rjmp	.+274    	; 0x224 <__bad_interrupt>
     112:	00 00       	nop
     114:	87 c0       	rjmp	.+270    	; 0x224 <__bad_interrupt>
     116:	00 00       	nop
     118:	85 c0       	rjmp	.+266    	; 0x224 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	83 c0       	rjmp	.+262    	; 0x224 <__bad_interrupt>
     11e:	00 00       	nop
     120:	81 c0       	rjmp	.+258    	; 0x224 <__bad_interrupt>
     122:	00 00       	nop
     124:	7f c0       	rjmp	.+254    	; 0x224 <__bad_interrupt>
     126:	00 00       	nop
     128:	7d c0       	rjmp	.+250    	; 0x224 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	7b c0       	rjmp	.+246    	; 0x224 <__bad_interrupt>
     12e:	00 00       	nop
     130:	79 c0       	rjmp	.+242    	; 0x224 <__bad_interrupt>
     132:	00 00       	nop
     134:	5b c5       	rjmp	.+2742   	; 0xbec <__vector_77>
     136:	00 00       	nop
     138:	75 c0       	rjmp	.+234    	; 0x224 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	73 c0       	rjmp	.+230    	; 0x224 <__bad_interrupt>
     13e:	00 00       	nop
     140:	71 c0       	rjmp	.+226    	; 0x224 <__bad_interrupt>
     142:	00 00       	nop
     144:	6f c0       	rjmp	.+222    	; 0x224 <__bad_interrupt>
     146:	00 00       	nop
     148:	6d c0       	rjmp	.+218    	; 0x224 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	6b c0       	rjmp	.+214    	; 0x224 <__bad_interrupt>
     14e:	00 00       	nop
     150:	69 c0       	rjmp	.+210    	; 0x224 <__bad_interrupt>
     152:	00 00       	nop
     154:	67 c0       	rjmp	.+206    	; 0x224 <__bad_interrupt>
     156:	00 00       	nop
     158:	65 c0       	rjmp	.+202    	; 0x224 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	63 c0       	rjmp	.+198    	; 0x224 <__bad_interrupt>
     15e:	00 00       	nop
     160:	61 c0       	rjmp	.+194    	; 0x224 <__bad_interrupt>
     162:	00 00       	nop
     164:	5f c0       	rjmp	.+190    	; 0x224 <__bad_interrupt>
     166:	00 00       	nop
     168:	5d c0       	rjmp	.+186    	; 0x224 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	5b c0       	rjmp	.+182    	; 0x224 <__bad_interrupt>
     16e:	00 00       	nop
     170:	59 c0       	rjmp	.+178    	; 0x224 <__bad_interrupt>
     172:	00 00       	nop
     174:	57 c0       	rjmp	.+174    	; 0x224 <__bad_interrupt>
     176:	00 00       	nop
     178:	55 c0       	rjmp	.+170    	; 0x224 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	53 c0       	rjmp	.+166    	; 0x224 <__bad_interrupt>
     17e:	00 00       	nop
     180:	51 c0       	rjmp	.+162    	; 0x224 <__bad_interrupt>
     182:	00 00       	nop
     184:	4f c0       	rjmp	.+158    	; 0x224 <__bad_interrupt>
     186:	00 00       	nop
     188:	4d c0       	rjmp	.+154    	; 0x224 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	4b c0       	rjmp	.+150    	; 0x224 <__bad_interrupt>
     18e:	00 00       	nop
     190:	49 c0       	rjmp	.+146    	; 0x224 <__bad_interrupt>
     192:	00 00       	nop
     194:	47 c0       	rjmp	.+142    	; 0x224 <__bad_interrupt>
     196:	00 00       	nop
     198:	45 c0       	rjmp	.+138    	; 0x224 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	43 c0       	rjmp	.+134    	; 0x224 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	41 c0       	rjmp	.+130    	; 0x224 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	3f c0       	rjmp	.+126    	; 0x224 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	3d c0       	rjmp	.+122    	; 0x224 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	3b c0       	rjmp	.+118    	; 0x224 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	39 c0       	rjmp	.+114    	; 0x224 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	37 c0       	rjmp	.+110    	; 0x224 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	35 c0       	rjmp	.+106    	; 0x224 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	33 c0       	rjmp	.+102    	; 0x224 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	31 c0       	rjmp	.+98     	; 0x224 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	2f c0       	rjmp	.+94     	; 0x224 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	2d c0       	rjmp	.+90     	; 0x224 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	2b c0       	rjmp	.+86     	; 0x224 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	29 c0       	rjmp	.+82     	; 0x224 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	27 c0       	rjmp	.+78     	; 0x224 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	25 c0       	rjmp	.+74     	; 0x224 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	23 c0       	rjmp	.+70     	; 0x224 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	21 c0       	rjmp	.+66     	; 0x224 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	1f c0       	rjmp	.+62     	; 0x224 <__bad_interrupt>
	...

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	cd bf       	out	0x3d, r28	; 61
     1f0:	df e2       	ldi	r29, 0x2F	; 47
     1f2:	de bf       	out	0x3e, r29	; 62

000001f4 <__do_copy_data>:
     1f4:	10 e2       	ldi	r17, 0x20	; 32
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b0 e2       	ldi	r27, 0x20	; 32
     1fa:	ec e4       	ldi	r30, 0x4C	; 76
     1fc:	f2 e1       	ldi	r31, 0x12	; 18
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	0b bf       	out	0x3b, r16	; 59
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x14>
     204:	07 90       	elpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a4 31       	cpi	r26, 0x14	; 20
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0x10>

0000020e <__do_clear_bss>:
     20e:	21 e2       	ldi	r18, 0x21	; 33
     210:	a4 e1       	ldi	r26, 0x14	; 20
     212:	b0 e2       	ldi	r27, 0x20	; 32
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	aa 33       	cpi	r26, 0x3A	; 58
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	aa d4       	rcall	.+2388   	; 0xb74 <main>
     220:	0c 94 24 09 	jmp	0x1248	; 0x1248 <_exit>

00000224 <__bad_interrupt>:
     224:	ed ce       	rjmp	.-550    	; 0x0 <__vectors>

00000226 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     226:	fc 01       	movw	r30, r24
     228:	81 81       	ldd	r24, Z+1	; 0x01
     22a:	85 ff       	sbrs	r24, 5
     22c:	fd cf       	rjmp	.-6      	; 0x228 <usart_putchar+0x2>
     22e:	60 83       	st	Z, r22
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	08 95       	ret

00000236 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     236:	4f 92       	push	r4
     238:	5f 92       	push	r5
     23a:	6f 92       	push	r6
     23c:	7f 92       	push	r7
     23e:	8f 92       	push	r8
     240:	9f 92       	push	r9
     242:	af 92       	push	r10
     244:	bf 92       	push	r11
     246:	cf 92       	push	r12
     248:	df 92       	push	r13
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	ec 01       	movw	r28, r24
     258:	4a 01       	movw	r8, r20
     25a:	5b 01       	movw	r10, r22
     25c:	28 01       	movw	r4, r16
     25e:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     260:	d9 01       	movw	r26, r18
     262:	c8 01       	movw	r24, r16
     264:	68 94       	set
     266:	12 f8       	bld	r1, 2
     268:	b6 95       	lsr	r27
     26a:	a7 95       	ror	r26
     26c:	97 95       	ror	r25
     26e:	87 95       	ror	r24
     270:	16 94       	lsr	r1
     272:	d1 f7       	brne	.-12     	; 0x268 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     274:	b9 01       	movw	r22, r18
     276:	a8 01       	movw	r20, r16
     278:	03 2e       	mov	r0, r19
     27a:	36 e1       	ldi	r19, 0x16	; 22
     27c:	76 95       	lsr	r23
     27e:	67 95       	ror	r22
     280:	57 95       	ror	r21
     282:	47 95       	ror	r20
     284:	3a 95       	dec	r19
     286:	d1 f7       	brne	.-12     	; 0x27c <usart_set_baudrate+0x46>
     288:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     28a:	2c 81       	ldd	r18, Y+4	; 0x04
     28c:	22 fd       	sbrc	r18, 2
     28e:	08 c0       	rjmp	.+16     	; 0x2a0 <usart_set_baudrate+0x6a>
		max_rate /= 2;
     290:	b6 95       	lsr	r27
     292:	a7 95       	ror	r26
     294:	97 95       	ror	r25
     296:	87 95       	ror	r24
		min_rate /= 2;
     298:	76 95       	lsr	r23
     29a:	67 95       	ror	r22
     29c:	57 95       	ror	r21
     29e:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     2a0:	88 15       	cp	r24, r8
     2a2:	99 05       	cpc	r25, r9
     2a4:	aa 05       	cpc	r26, r10
     2a6:	bb 05       	cpc	r27, r11
     2a8:	08 f4       	brcc	.+2      	; 0x2ac <usart_set_baudrate+0x76>
     2aa:	a2 c0       	rjmp	.+324    	; 0x3f0 <usart_set_baudrate+0x1ba>
     2ac:	84 16       	cp	r8, r20
     2ae:	95 06       	cpc	r9, r21
     2b0:	a6 06       	cpc	r10, r22
     2b2:	b7 06       	cpc	r11, r23
     2b4:	08 f4       	brcc	.+2      	; 0x2b8 <usart_set_baudrate+0x82>
     2b6:	9e c0       	rjmp	.+316    	; 0x3f4 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     2b8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ba:	82 fd       	sbrc	r24, 2
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <usart_set_baudrate+0x90>
		baud *= 2;
     2be:	88 0c       	add	r8, r8
     2c0:	99 1c       	adc	r9, r9
     2c2:	aa 1c       	adc	r10, r10
     2c4:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     2c6:	c3 01       	movw	r24, r6
     2c8:	b2 01       	movw	r22, r4
     2ca:	a5 01       	movw	r20, r10
     2cc:	94 01       	movw	r18, r8
     2ce:	e4 d4       	rcall	.+2504   	; 0xc98 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     2d0:	2f 3f       	cpi	r18, 0xFF	; 255
     2d2:	31 05       	cpc	r19, r1
     2d4:	41 05       	cpc	r20, r1
     2d6:	51 05       	cpc	r21, r1
     2d8:	08 f4       	brcc	.+2      	; 0x2dc <usart_set_baudrate+0xa6>
     2da:	8e c0       	rjmp	.+284    	; 0x3f8 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     2dc:	c1 2c       	mov	r12, r1
     2de:	d1 2c       	mov	r13, r1
     2e0:	76 01       	movw	r14, r12
     2e2:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     2e4:	19 ef       	ldi	r17, 0xF9	; 249
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
     2e8:	2c 15       	cp	r18, r12
     2ea:	3d 05       	cpc	r19, r13
     2ec:	4e 05       	cpc	r20, r14
     2ee:	5f 05       	cpc	r21, r15
     2f0:	68 f0       	brcs	.+26     	; 0x30c <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
     2f2:	cc 0c       	add	r12, r12
     2f4:	dd 1c       	adc	r13, r13
     2f6:	ee 1c       	adc	r14, r14
     2f8:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     2fa:	1d 3f       	cpi	r17, 0xFD	; 253
     2fc:	14 f4       	brge	.+4      	; 0x302 <usart_set_baudrate+0xcc>
			limit |= 1;
     2fe:	68 94       	set
     300:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     302:	1f 5f       	subi	r17, 0xFF	; 255
     304:	17 30       	cpi	r17, 0x07	; 7
     306:	81 f7       	brne	.-32     	; 0x2e8 <usart_set_baudrate+0xb2>
     308:	21 2f       	mov	r18, r17
     30a:	4e c0       	rjmp	.+156    	; 0x3a8 <usart_set_baudrate+0x172>
     30c:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     30e:	11 23       	and	r17, r17
     310:	0c f0       	brlt	.+2      	; 0x314 <usart_set_baudrate+0xde>
     312:	4a c0       	rjmp	.+148    	; 0x3a8 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     314:	d5 01       	movw	r26, r10
     316:	c4 01       	movw	r24, r8
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	aa 1f       	adc	r26, r26
     31e:	bb 1f       	adc	r27, r27
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	aa 1f       	adc	r26, r26
     326:	bb 1f       	adc	r27, r27
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	aa 1f       	adc	r26, r26
     32e:	bb 1f       	adc	r27, r27
     330:	48 1a       	sub	r4, r24
     332:	59 0a       	sbc	r5, r25
     334:	6a 0a       	sbc	r6, r26
     336:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     338:	1e 3f       	cpi	r17, 0xFE	; 254
     33a:	ec f4       	brge	.+58     	; 0x376 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     33c:	6d ef       	ldi	r22, 0xFD	; 253
     33e:	7f ef       	ldi	r23, 0xFF	; 255
     340:	61 1b       	sub	r22, r17
     342:	71 09       	sbc	r23, r1
     344:	17 fd       	sbrc	r17, 7
     346:	73 95       	inc	r23
     348:	04 c0       	rjmp	.+8      	; 0x352 <usart_set_baudrate+0x11c>
     34a:	44 0c       	add	r4, r4
     34c:	55 1c       	adc	r5, r5
     34e:	66 1c       	adc	r6, r6
     350:	77 1c       	adc	r7, r7
     352:	6a 95       	dec	r22
     354:	d2 f7       	brpl	.-12     	; 0x34a <usart_set_baudrate+0x114>
     356:	d5 01       	movw	r26, r10
     358:	c4 01       	movw	r24, r8
     35a:	b6 95       	lsr	r27
     35c:	a7 95       	ror	r26
     35e:	97 95       	ror	r25
     360:	87 95       	ror	r24
     362:	bc 01       	movw	r22, r24
     364:	cd 01       	movw	r24, r26
     366:	64 0d       	add	r22, r4
     368:	75 1d       	adc	r23, r5
     36a:	86 1d       	adc	r24, r6
     36c:	97 1d       	adc	r25, r7
     36e:	a5 01       	movw	r20, r10
     370:	94 01       	movw	r18, r8
     372:	92 d4       	rcall	.+2340   	; 0xc98 <__udivmodsi4>
     374:	34 c0       	rjmp	.+104    	; 0x3de <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
     376:	23 e0       	ldi	r18, 0x03	; 3
     378:	21 0f       	add	r18, r17
     37a:	d5 01       	movw	r26, r10
     37c:	c4 01       	movw	r24, r8
     37e:	04 c0       	rjmp	.+8      	; 0x388 <usart_set_baudrate+0x152>
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	aa 1f       	adc	r26, r26
     386:	bb 1f       	adc	r27, r27
     388:	2a 95       	dec	r18
     38a:	d2 f7       	brpl	.-12     	; 0x380 <usart_set_baudrate+0x14a>
     38c:	9c 01       	movw	r18, r24
     38e:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     390:	b6 95       	lsr	r27
     392:	a7 95       	ror	r26
     394:	97 95       	ror	r25
     396:	87 95       	ror	r24
     398:	bc 01       	movw	r22, r24
     39a:	cd 01       	movw	r24, r26
     39c:	64 0d       	add	r22, r4
     39e:	75 1d       	adc	r23, r5
     3a0:	86 1d       	adc	r24, r6
     3a2:	97 1d       	adc	r25, r7
     3a4:	79 d4       	rcall	.+2290   	; 0xc98 <__udivmodsi4>
     3a6:	1b c0       	rjmp	.+54     	; 0x3de <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     3a8:	2d 5f       	subi	r18, 0xFD	; 253
     3aa:	d5 01       	movw	r26, r10
     3ac:	c4 01       	movw	r24, r8
     3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <usart_set_baudrate+0x182>
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
     3b4:	aa 1f       	adc	r26, r26
     3b6:	bb 1f       	adc	r27, r27
     3b8:	2a 95       	dec	r18
     3ba:	d2 f7       	brpl	.-12     	; 0x3b0 <usart_set_baudrate+0x17a>
     3bc:	9c 01       	movw	r18, r24
     3be:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     3c0:	b6 95       	lsr	r27
     3c2:	a7 95       	ror	r26
     3c4:	97 95       	ror	r25
     3c6:	87 95       	ror	r24
     3c8:	bc 01       	movw	r22, r24
     3ca:	cd 01       	movw	r24, r26
     3cc:	64 0d       	add	r22, r4
     3ce:	75 1d       	adc	r23, r5
     3d0:	86 1d       	adc	r24, r6
     3d2:	97 1d       	adc	r25, r7
     3d4:	61 d4       	rcall	.+2242   	; 0xc98 <__udivmodsi4>
     3d6:	21 50       	subi	r18, 0x01	; 1
     3d8:	31 09       	sbc	r19, r1
     3da:	41 09       	sbc	r20, r1
     3dc:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     3de:	83 2f       	mov	r24, r19
     3e0:	8f 70       	andi	r24, 0x0F	; 15
     3e2:	12 95       	swap	r17
     3e4:	10 7f       	andi	r17, 0xF0	; 240
     3e6:	18 2b       	or	r17, r24
     3e8:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     3ea:	2e 83       	std	Y+6, r18	; 0x06

	return true;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	18 c0       	rjmp	.+48     	; 0x420 <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	16 c0       	rjmp	.+44     	; 0x420 <usart_set_baudrate+0x1ea>
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	14 c0       	rjmp	.+40     	; 0x420 <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     3f8:	d5 01       	movw	r26, r10
     3fa:	c4 01       	movw	r24, r8
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	aa 1f       	adc	r26, r26
     402:	bb 1f       	adc	r27, r27
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	aa 1f       	adc	r26, r26
     40a:	bb 1f       	adc	r27, r27
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	aa 1f       	adc	r26, r26
     412:	bb 1f       	adc	r27, r27
     414:	48 1a       	sub	r4, r24
     416:	59 0a       	sbc	r5, r25
     418:	6a 0a       	sbc	r6, r26
     41a:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     41c:	19 ef       	ldi	r17, 0xF9	; 249
     41e:	8e cf       	rjmp	.-228    	; 0x33c <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	bf 90       	pop	r11
     432:	af 90       	pop	r10
     434:	9f 90       	pop	r9
     436:	8f 90       	pop	r8
     438:	7f 90       	pop	r7
     43a:	6f 90       	pop	r6
     43c:	5f 90       	pop	r5
     43e:	4f 90       	pop	r4
     440:	08 95       	ret

00000442 <En_RC32M>:


void En_RC32M(void)
{
    // Start RC32M OSC
    OSC_CTRL |= OSC_RC32MEN_bm;
     442:	e0 e5       	ldi	r30, 0x50	; 80
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	82 60       	ori	r24, 0x02	; 2
     44a:	80 83       	st	Z, r24
    while(!(OSC_STATUS & OSC_RC32MRDY_bm));
     44c:	e1 e5       	ldi	r30, 0x51	; 81
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	81 ff       	sbrs	r24, 1
     454:	fd cf       	rjmp	.-6      	; 0x450 <En_RC32M+0xe>

    // Select the system clock source: 32 MHz Internal RC Osc.
    CCP = CCP_IOREG_gc;
     456:	88 ed       	ldi	r24, 0xD8	; 216
     458:	84 bf       	out	0x34, r24	; 52
    CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	80 93 40 00 	sts	0x0040, r24

    // Disable the unused oscillators: 2 MHz, internal 32 kHz, external clock/crystal oscillator, PLL
    OSC_CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
     460:	e0 e5       	ldi	r30, 0x50	; 80
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	82 7e       	andi	r24, 0xE2	; 226
     468:	80 83       	st	Z, r24
     46a:	08 95       	ret

0000046c <PORT_init>:
};

void PORT_init(void)
{
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
	PORTA_DIR = LED_White_PIN_bm;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	80 93 00 06 	sts	0x0600, r24
	PORTB_DIR = 0XFF;//Segment_R 
     476:	2f ef       	ldi	r18, 0xFF	; 255
     478:	20 93 20 06 	sts	0x0620, r18
	PORTC_DIR = NRF24L01_R_CE_LINE | NRF24L01_R_CS_LINE | NRF24L01_R_MOSI_LINE | NRF24L01_R_SCK_LINE | Wireless_TX_R_PIN_bm;
     47c:	c0 e4       	ldi	r28, 0x40	; 64
     47e:	d6 e0       	ldi	r29, 0x06	; 6
     480:	8a eb       	ldi	r24, 0xBA	; 186
     482:	88 83       	st	Y, r24
			PORTC_PIN0CTRL |= PORT_ISC_LEVEL_gc;
     484:	e0 e5       	ldi	r30, 0x50	; 80
     486:	f6 e0       	ldi	r31, 0x06	; 6
     488:	90 81       	ld	r25, Z
     48a:	93 60       	ori	r25, 0x03	; 3
     48c:	90 83       	st	Z, r25
			PORTC_INTCTRL  |= PORT_INT0LVL_LO_gc;
     48e:	e9 e4       	ldi	r30, 0x49	; 73
     490:	f6 e0       	ldi	r31, 0x06	; 6
     492:	90 81       	ld	r25, Z
     494:	91 60       	ori	r25, 0x01	; 1
     496:	90 83       	st	Z, r25
			PORTC_INT0MASK |= PIN0_bm;
     498:	ea e4       	ldi	r30, 0x4A	; 74
     49a:	f6 e0       	ldi	r31, 0x06	; 6
     49c:	90 81       	ld	r25, Z
     49e:	91 60       	ori	r25, 0x01	; 1
     4a0:	90 83       	st	Z, r25
	PORTD_DIR = LED_Green_L_PIN_bm | LED_White_L_PIN_bm | LED_Green_R_PIN_bm | LED_White_R_PIN_bm | Buzzer_PIN_bm | LED_Red_PIN_bm | USART_M_TX_PIN_bm ;
     4a2:	40 e6       	ldi	r20, 0x60	; 96
     4a4:	56 e0       	ldi	r21, 0x06	; 6
     4a6:	9b ef       	ldi	r25, 0xFB	; 251
     4a8:	fa 01       	movw	r30, r20
     4aa:	90 83       	st	Z, r25
	PORTE_DIR = NRF24L01_L_CE_LINE | NRF24L01_L_CS_LINE | NRF24L01_L_MOSI_LINE | NRF24L01_L_SCK_LINE | Wireless_TX_L_PIN_bm;
     4ac:	a0 e8       	ldi	r26, 0x80	; 128
     4ae:	b6 e0       	ldi	r27, 0x06	; 6
     4b0:	8c 93       	st	X, r24
			PORTE_PIN0CTRL |= PORT_ISC_LEVEL_gc;
     4b2:	80 e9       	ldi	r24, 0x90	; 144
     4b4:	96 e0       	ldi	r25, 0x06	; 6
     4b6:	fc 01       	movw	r30, r24
     4b8:	30 81       	ld	r19, Z
     4ba:	33 60       	ori	r19, 0x03	; 3
     4bc:	30 83       	st	Z, r19
			PORTE_INTCTRL  |= PORT_INT0LVL_LO_gc;
     4be:	89 e8       	ldi	r24, 0x89	; 137
     4c0:	96 e0       	ldi	r25, 0x06	; 6
     4c2:	fc 01       	movw	r30, r24
     4c4:	30 81       	ld	r19, Z
     4c6:	31 60       	ori	r19, 0x01	; 1
     4c8:	30 83       	st	Z, r19
			PORTE_INT0MASK |= PIN0_bm;
     4ca:	8a e8       	ldi	r24, 0x8A	; 138
     4cc:	96 e0       	ldi	r25, 0x06	; 6
     4ce:	fc 01       	movw	r30, r24
     4d0:	30 81       	ld	r19, Z
     4d2:	31 60       	ori	r19, 0x01	; 1
     4d4:	30 83       	st	Z, r19
	PORTF_DIR = 0xFF;//Segment_L
     4d6:	20 93 a0 06 	sts	0x06A0, r18
	Wireless_R_PORT.OUTSET=Wireless_TX_R_PIN_bm;//CHERA BARAYE L NIST?
     4da:	88 e0       	ldi	r24, 0x08	; 8
     4dc:	8d 83       	std	Y+5, r24	; 0x05
	Wireless_L_PORT.OUTSET=Wireless_TX_L_PIN_bm;
     4de:	15 96       	adiw	r26, 0x05	; 5
     4e0:	8c 93       	st	X, r24
	PORTD.OUTSET = USART_M_TX_PIN_bm;
     4e2:	fa 01       	movw	r30, r20
     4e4:	85 83       	std	Z+5, r24	; 0x05
	
	PORTR_DIR = LED_Orange_PIN_bm;
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	80 93 e0 07 	sts	0x07E0, r24
};
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <USART_R_init>:
//     tc_enable(&TCE1);
// };


void USART_R_init(void)
{
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     4fa:	c0 ea       	ldi	r28, 0xA0	; 160
     4fc:	d8 e0       	ldi	r29, 0x08	; 8
     4fe:	8d 81       	ldd	r24, Y+5	; 0x05
     500:	8f 73       	andi	r24, 0x3F	; 63
     502:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     504:	83 e0       	ldi	r24, 0x03	; 3
     506:	8d 83       	std	Y+5, r24	; 0x05
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
     508:	8b 81       	ldd	r24, Y+3	; 0x03
     50a:	8f 7c       	andi	r24, 0xCF	; 207
     50c:	80 62       	ori	r24, 0x20	; 32
     50e:	8b 83       	std	Y+3, r24	; 0x03
	usart_set_mode(&Wireless_R_USART,USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(&Wireless_R_USART,USART_CHSIZE_8BIT_gc,USART_PMODE_DISABLED_gc,false);
	usart_set_rx_interrupt_level(&Wireless_R_USART,USART_INT_LVL_MED);
	//usart_set_tx_interrupt_level(&Wireless_R_USART,USART_INT_LVL_MED);
	usart_set_baudrate(&Wireless_R_USART,USART_BUADRATE,F_CPU);
     510:	00 e0       	ldi	r16, 0x00	; 0
     512:	18 e4       	ldi	r17, 0x48	; 72
     514:	28 ee       	ldi	r18, 0xE8	; 232
     516:	31 e0       	ldi	r19, 0x01	; 1
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	52 ec       	ldi	r21, 0xC2	; 194
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 ea       	ldi	r24, 0xA0	; 160
     522:	98 e0       	ldi	r25, 0x08	; 8
     524:	88 de       	rcall	.-752    	; 0x236 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     526:	8c 81       	ldd	r24, Y+4	; 0x04
     528:	88 60       	ori	r24, 0x08	; 8
     52a:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     52c:	8c 81       	ldd	r24, Y+4	; 0x04
     52e:	80 61       	ori	r24, 0x10	; 16
     530:	8c 83       	std	Y+4, r24	; 0x04
	usart_tx_enable(&Wireless_R_USART);
	usart_rx_enable(&Wireless_R_USART);
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	08 95       	ret

0000053c <UART_SEND>:
  #define printf2pc(T,...)   UART_SEND(sprintf(buffer,T,__VA_ARGS__));
  void UART_SEND(int l);
  char buffer[100];
  
  void UART_SEND(int l)
  {
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
	  int i;
	  for(i=0;i<l;i++)
     544:	18 16       	cp	r1, r24
     546:	19 06       	cpc	r1, r25
     548:	64 f4       	brge	.+24     	; 0x562 <UART_SEND+0x26>
     54a:	c9 e1       	ldi	r28, 0x19	; 25
     54c:	d0 e2       	ldi	r29, 0x20	; 32
     54e:	8c 01       	movw	r16, r24
     550:	07 5e       	subi	r16, 0xE7	; 231
     552:	1f 4d       	sbci	r17, 0xDF	; 223
	  usart_putchar(&USARTC0,buffer[i]);
     554:	69 91       	ld	r22, Y+
     556:	80 ea       	ldi	r24, 0xA0	; 160
     558:	98 e0       	ldi	r25, 0x08	; 8
     55a:	65 de       	rcall	.-822    	; 0x226 <usart_putchar>
  char buffer[100];
  
  void UART_SEND(int l)
  {
	  int i;
	  for(i=0;i<l;i++)
     55c:	c0 17       	cp	r28, r16
     55e:	d1 07       	cpc	r29, r17
     560:	c9 f7       	brne	.-14     	; 0x554 <UART_SEND+0x18>
	  usart_putchar(&USARTC0,buffer[i]);
	  
  }
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	08 95       	ret

0000056c <Mpc_decode>:
  

void Mpc_decode(_MPC* Mpc,uint8_t data)
{
     56c:	bf 92       	push	r11
     56e:	cf 92       	push	r12
     570:	df 92       	push	r13
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
	switch(Mpc->pack_started)
     580:	fc 01       	movw	r30, r24
     582:	e0 5c       	subi	r30, 0xC0	; 192
     584:	ff 4f       	sbci	r31, 0xFF	; 255
     586:	80 81       	ld	r24, Z
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	09 f1       	breq	.+66     	; 0x5ce <Mpc_decode+0x62>
     58c:	2c f4       	brge	.+10     	; 0x598 <Mpc_decode+0x2c>
     58e:	88 23       	and	r24, r24
     590:	59 f0       	breq	.+22     	; 0x5a8 <Mpc_decode+0x3c>
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	89 f0       	breq	.+34     	; 0x5b8 <Mpc_decode+0x4c>
     596:	f8 c0       	rjmp	.+496    	; 0x788 <Mpc_decode+0x21c>
     598:	84 30       	cpi	r24, 0x04	; 4
     59a:	09 f4       	brne	.+2      	; 0x59e <Mpc_decode+0x32>
     59c:	3d c0       	rjmp	.+122    	; 0x618 <Mpc_decode+0xac>
     59e:	0c f1       	brlt	.+66     	; 0x5e2 <Mpc_decode+0x76>
     5a0:	85 30       	cpi	r24, 0x05	; 5
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <Mpc_decode+0x3a>
     5a4:	c5 c0       	rjmp	.+394    	; 0x730 <Mpc_decode+0x1c4>
     5a6:	f0 c0       	rjmp	.+480    	; 0x788 <Mpc_decode+0x21c>
				{
					
					case 0:
						if(data == 0xff)
     5a8:	6f 3f       	cpi	r22, 0xFF	; 255
     5aa:	09 f0       	breq	.+2      	; 0x5ae <Mpc_decode+0x42>
     5ac:	ed c0       	rjmp	.+474    	; 0x788 <Mpc_decode+0x21c>
							Mpc->pack_started = 1;
     5ae:	c0 5c       	subi	r28, 0xC0	; 192
     5b0:	df 4f       	sbci	r29, 0xFF	; 255
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	88 83       	st	Y, r24
     5b6:	e8 c0       	rjmp	.+464    	; 0x788 <Mpc_decode+0x21c>
						else
							Mpc->pack_started = 0;
						break;
						
					case 1:
						if(data == 0xff)
     5b8:	6f 3f       	cpi	r22, 0xFF	; 255
     5ba:	29 f4       	brne	.+10     	; 0x5c6 <Mpc_decode+0x5a>
							Mpc->pack_started = 2;
     5bc:	c0 5c       	subi	r28, 0xC0	; 192
     5be:	df 4f       	sbci	r29, 0xFF	; 255
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	88 83       	st	Y, r24
     5c4:	e1 c0       	rjmp	.+450    	; 0x788 <Mpc_decode+0x21c>
						else
							Mpc->pack_started = 0;
     5c6:	c0 5c       	subi	r28, 0xC0	; 192
     5c8:	df 4f       	sbci	r29, 0xFF	; 255
     5ca:	18 82       	st	Y, r1
     5cc:	dd c0       	rjmp	.+442    	; 0x788 <Mpc_decode+0x21c>
						break;
						
					case 2:
						Mpc->Len =data - 3;
     5ce:	fe 01       	movw	r30, r28
     5d0:	ee 5b       	subi	r30, 0xBE	; 190
     5d2:	ff 4f       	sbci	r31, 0xFF	; 255
     5d4:	63 50       	subi	r22, 0x03	; 3
     5d6:	60 83       	st	Z, r22
						//printf2pc("len:%c")
						Mpc->pack_started = 3;
     5d8:	c0 5c       	subi	r28, 0xC0	; 192
     5da:	df 4f       	sbci	r29, 0xFF	; 255
     5dc:	83 e0       	ldi	r24, 0x03	; 3
     5de:	88 83       	st	Y, r24
						break;
     5e0:	d3 c0       	rjmp	.+422    	; 0x788 <Mpc_decode+0x21c>
						
					case 3:
				//if(data == 0)  man inja num (shomarepack) ro migiram. aghaye didari 0 migiran
						Mpc->Num=(uint8_t)data;
     5e2:	fe 01       	movw	r30, r28
     5e4:	e5 59       	subi	r30, 0x95	; 149
     5e6:	ff 4f       	sbci	r31, 0xFF	; 255
     5e8:	60 83       	st	Z, r22
						printf2pc("num: %d\r",Mpc->Num);
     5ea:	1f 92       	push	r1
     5ec:	6f 93       	push	r22
     5ee:	86 e0       	ldi	r24, 0x06	; 6
     5f0:	90 e2       	ldi	r25, 0x20	; 32
     5f2:	9f 93       	push	r25
     5f4:	8f 93       	push	r24
     5f6:	89 e1       	ldi	r24, 0x19	; 25
     5f8:	90 e2       	ldi	r25, 0x20	; 32
     5fa:	9f 93       	push	r25
     5fc:	8f 93       	push	r24
     5fe:	6e d3       	rcall	.+1756   	; 0xcdc <sprintf>
     600:	9d df       	rcall	.-198    	; 0x53c <UART_SEND>
						Mpc->pack_started = 4;
     602:	c0 5c       	subi	r28, 0xC0	; 192
     604:	df 4f       	sbci	r29, 0xFF	; 255
     606:	84 e0       	ldi	r24, 0x04	; 4
     608:	88 83       	st	Y, r24
			//	else
			//		Mpc->pack_started = 0;
						break;
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	b8 c0       	rjmp	.+368    	; 0x788 <Mpc_decode+0x21c>
					case 4:
						
						if(Mpc->Len == 0)
     618:	fe 01       	movw	r30, r28
     61a:	ee 5b       	subi	r30, 0xBE	; 190
     61c:	ff 4f       	sbci	r31, 0xFF	; 255
     61e:	80 81       	ld	r24, Z
     620:	81 11       	cpse	r24, r1
     622:	6f c0       	rjmp	.+222    	; 0x702 <Mpc_decode+0x196>
						{
							
							Mpc->sum = Mpc->sum + (uint8_t)data;
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	80 81       	ld	r24, Z
     628:	68 0f       	add	r22, r24
     62a:	60 83       	st	Z, r22
							
							if(Mpc->sum == 0)
     62c:	61 11       	cpse	r22, r1
     62e:	5e c0       	rjmp	.+188    	; 0x6ec <Mpc_decode+0x180>
							{
								for (uint8_t k=0; k<(Mpc->j);k++)  //-2 baraye neshun nadadne bytehaye feshar
     630:	35 96       	adiw	r30, 0x05	; 5
     632:	80 81       	ld	r24, Z
     634:	91 81       	ldd	r25, Z+1	; 0x01
     636:	18 16       	cp	r1, r24
     638:	19 06       	cpc	r1, r25
     63a:	54 f5       	brge	.+84     	; 0x690 <Mpc_decode+0x124>
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	b1 2c       	mov	r11, r1
								printf2pc("%d\r",Mpc->data[k]); //vaghti az dorostie dadeha motmaen shodi ba checksum
     642:	0f 2e       	mov	r0, r31
     644:	fb e0       	ldi	r31, 0x0B	; 11
     646:	ef 2e       	mov	r14, r31
     648:	f0 e2       	ldi	r31, 0x20	; 32
     64a:	ff 2e       	mov	r15, r31
     64c:	f0 2d       	mov	r31, r0
     64e:	09 e1       	ldi	r16, 0x19	; 25
     650:	10 e2       	ldi	r17, 0x20	; 32
							
							Mpc->sum = Mpc->sum + (uint8_t)data;
							
							if(Mpc->sum == 0)
							{
								for (uint8_t k=0; k<(Mpc->j);k++)  //-2 baraye neshun nadadne bytehaye feshar
     652:	6f 01       	movw	r12, r30
								printf2pc("%d\r",Mpc->data[k]); //vaghti az dorostie dadeha motmaen shodi ba checksum
     654:	fc 01       	movw	r30, r24
     656:	ee 0f       	add	r30, r30
     658:	ff 1f       	adc	r31, r31
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	81 81       	ldd	r24, Z+1	; 0x01
     660:	8f 93       	push	r24
     662:	80 81       	ld	r24, Z
     664:	8f 93       	push	r24
     666:	ff 92       	push	r15
     668:	ef 92       	push	r14
     66a:	1f 93       	push	r17
     66c:	0f 93       	push	r16
     66e:	36 d3       	rcall	.+1644   	; 0xcdc <sprintf>
     670:	65 df       	rcall	.-310    	; 0x53c <UART_SEND>
							
							Mpc->sum = Mpc->sum + (uint8_t)data;
							
							if(Mpc->sum == 0)
							{
								for (uint8_t k=0; k<(Mpc->j);k++)  //-2 baraye neshun nadadne bytehaye feshar
     672:	b3 94       	inc	r11
     674:	8b 2d       	mov	r24, r11
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	f6 01       	movw	r30, r12
     686:	20 81       	ld	r18, Z
     688:	31 81       	ldd	r19, Z+1	; 0x01
     68a:	82 17       	cp	r24, r18
     68c:	93 07       	cpc	r25, r19
     68e:	14 f3       	brlt	.-60     	; 0x654 <Mpc_decode+0xe8>
								printf2pc("%d\r",Mpc->data[k]); //vaghti az dorostie dadeha motmaen shodi ba checksum
								printf2pc("%ld\r",finalpres.lngint); //chape feshar
     690:	80 91 18 20 	lds	r24, 0x2018
     694:	8f 93       	push	r24
     696:	80 91 17 20 	lds	r24, 0x2017
     69a:	8f 93       	push	r24
     69c:	80 91 16 20 	lds	r24, 0x2016
     6a0:	8f 93       	push	r24
     6a2:	80 91 15 20 	lds	r24, 0x2015
     6a6:	8f 93       	push	r24
     6a8:	8f e0       	ldi	r24, 0x0F	; 15
     6aa:	90 e2       	ldi	r25, 0x20	; 32
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	89 e1       	ldi	r24, 0x19	; 25
     6b2:	90 e2       	ldi	r25, 0x20	; 32
     6b4:	9f 93       	push	r25
     6b6:	8f 93       	push	r24
     6b8:	11 d3       	rcall	.+1570   	; 0xcdc <sprintf>
     6ba:	40 df       	rcall	.-384    	; 0x53c <UART_SEND>
								Mpc->sum=0;
     6bc:	fe 01       	movw	r30, r28
     6be:	ef 5b       	subi	r30, 0xBF	; 191
     6c0:	ff 4f       	sbci	r31, 0xFF	; 255
     6c2:	10 82       	st	Z, r1
								Mpc->pack_started =0;
     6c4:	31 97       	sbiw	r30, 0x01	; 1
     6c6:	10 82       	st	Z, r1
								Mpc->ready =1;		
     6c8:	33 96       	adiw	r30, 0x03	; 3
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	80 83       	st	Z, r24
								Mpc->data_num = Mpc->j;
     6ce:	35 96       	adiw	r30, 0x05	; 5
     6d0:	ca 5b       	subi	r28, 0xBA	; 186
     6d2:	df 4f       	sbci	r29, 0xFF	; 255
     6d4:	88 81       	ld	r24, Y
     6d6:	99 81       	ldd	r25, Y+1	; 0x01
     6d8:	80 83       	st	Z, r24
     6da:	91 83       	std	Z+1, r25	; 0x01
								Mpc->j=0;
     6dc:	18 82       	st	Y, r1
     6de:	19 82       	std	Y+1, r1	; 0x01
     6e0:	8d b7       	in	r24, 0x3d	; 61
     6e2:	9e b7       	in	r25, 0x3e	; 62
     6e4:	08 96       	adiw	r24, 0x08	; 8
     6e6:	8d bf       	out	0x3d, r24	; 61
     6e8:	9e bf       	out	0x3e, r25	; 62
     6ea:	4e c0       	rjmp	.+156    	; 0x788 <Mpc_decode+0x21c>
							}
							else
							{
								Mpc->j=0;
     6ec:	fe 01       	movw	r30, r28
     6ee:	ea 5b       	subi	r30, 0xBA	; 186
     6f0:	ff 4f       	sbci	r31, 0xFF	; 255
     6f2:	10 82       	st	Z, r1
     6f4:	11 82       	std	Z+1, r1	; 0x01
								Mpc->sum=0;
     6f6:	35 97       	sbiw	r30, 0x05	; 5
     6f8:	10 82       	st	Z, r1
								Mpc->pack_started =0;
     6fa:	c0 5c       	subi	r28, 0xC0	; 192
     6fc:	df 4f       	sbci	r29, 0xFF	; 255
     6fe:	18 82       	st	Y, r1
     700:	43 c0       	rjmp	.+134    	; 0x788 <Mpc_decode+0x21c>
							}
							
						}
						else
						{
							Mpc->sum = Mpc->sum + (uint8_t)data;
     702:	fe 01       	movw	r30, r28
     704:	ef 5b       	subi	r30, 0xBF	; 191
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	90 81       	ld	r25, Z
     70a:	96 0f       	add	r25, r22
     70c:	90 83       	st	Z, r25
							Mpc->pack_started =5;
     70e:	95 e0       	ldi	r25, 0x05	; 5
     710:	31 97       	sbiw	r30, 0x01	; 1
     712:	90 83       	st	Z, r25
							
 							if(Mpc->Len == 4)
     714:	84 30       	cpi	r24, 0x04	; 4
     716:	19 f4       	brne	.+6      	; 0x71e <Mpc_decode+0x1b2>
 							{
	 							// 								finalpres.integer[0]=Mpc->conv.real;
	 							// 								printf2pc("pres: %ld\r",finalpres.lngint);
	 							//printf2pc("1 :%d\r",data);
								finalpres.charr[0]=data;
     718:	60 93 15 20 	sts	0x2015, r22
     71c:	35 c0       	rjmp	.+106    	; 0x788 <Mpc_decode+0x21c>
 							}
							 
							else if(Mpc->Len == 2)
     71e:	82 30       	cpi	r24, 0x02	; 2
     720:	19 f4       	brne	.+6      	; 0x728 <Mpc_decode+0x1bc>
 							{
// 								finalpres.integer[0]=Mpc->conv.real;
// 								printf2pc("pres: %ld\r",finalpres.lngint);
								//printf2pc("2 :%d\r",data);
								finalpres.charr[2]=data;
     722:	60 93 17 20 	sts	0x2017, r22
     726:	30 c0       	rjmp	.+96     	; 0x788 <Mpc_decode+0x21c>
 							}
							
							
							else
							{
								Mpc->conv.byte[0] = data;
     728:	cc 5b       	subi	r28, 0xBC	; 188
     72a:	df 4f       	sbci	r29, 0xFF	; 255
     72c:	68 83       	st	Y, r22
     72e:	2c c0       	rjmp	.+88     	; 0x788 <Mpc_decode+0x21c>
							
						}
						break;
					case 5:
							
							Mpc->sum = Mpc->sum + (uint8_t)data;
     730:	fe 01       	movw	r30, r28
     732:	ef 5b       	subi	r30, 0xBF	; 191
     734:	ff 4f       	sbci	r31, 0xFF	; 255
     736:	80 81       	ld	r24, Z
     738:	86 0f       	add	r24, r22
     73a:	80 83       	st	Z, r24
							//Mpc->conv.byte[1] = data;
							Mpc->pack_started =4;
     73c:	84 e0       	ldi	r24, 0x04	; 4
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	80 83       	st	Z, r24
							//Mpc->data[Mpc->j] = Mpc->conv.real;	
							
							Mpc->Len = Mpc->Len - 2;
     742:	32 96       	adiw	r30, 0x02	; 2
     744:	80 81       	ld	r24, Z
     746:	82 50       	subi	r24, 0x02	; 2
     748:	80 83       	st	Z, r24
							//Mpc->j++;
							
							if(Mpc->Len == 2)
     74a:	82 30       	cpi	r24, 0x02	; 2
     74c:	19 f4       	brne	.+6      	; 0x754 <Mpc_decode+0x1e8>
							{
								// 								finalpres.integer[0]=Mpc->conv.real;
								// 								printf2pc("pres: %ld\r",finalpres.lngint);
								//printf2pc("3 :%d\r",data);
								finalpres.charr[1]=data;
     74e:	60 93 16 20 	sts	0x2016, r22
     752:	1a c0       	rjmp	.+52     	; 0x788 <Mpc_decode+0x21c>
							}	
							
							else if(Mpc->Len == 0)
     754:	81 11       	cpse	r24, r1
     756:	03 c0       	rjmp	.+6      	; 0x75e <Mpc_decode+0x1f2>
							{
								// 								finalpres.integer[0]=Mpc->conv.real;
								// 								printf2pc("pres: %ld\r",finalpres.lngint);
								//printf2pc("4 :%d\r",data);
								finalpres.charr[3]=data;								
     758:	60 93 18 20 	sts	0x2018, r22
     75c:	15 c0       	rjmp	.+42     	; 0x788 <Mpc_decode+0x21c>
							}	
							
							else
							{
								
								Mpc->conv.byte[1] = data;
     75e:	fe 01       	movw	r30, r28
     760:	eb 5b       	subi	r30, 0xBB	; 187
     762:	ff 4f       	sbci	r31, 0xFF	; 255
     764:	60 83       	st	Z, r22
								//Mpc->pack_started =4;
								Mpc->data[Mpc->j] = Mpc->conv.real;	
     766:	31 96       	adiw	r30, 0x01	; 1
     768:	80 81       	ld	r24, Z
     76a:	91 81       	ldd	r25, Z+1	; 0x01
     76c:	dc 01       	movw	r26, r24
     76e:	aa 0f       	add	r26, r26
     770:	bb 1f       	adc	r27, r27
     772:	ac 0f       	add	r26, r28
     774:	bd 1f       	adc	r27, r29
     776:	cc 5b       	subi	r28, 0xBC	; 188
     778:	df 4f       	sbci	r29, 0xFF	; 255
     77a:	28 81       	ld	r18, Y
     77c:	39 81       	ldd	r19, Y+1	; 0x01
     77e:	2d 93       	st	X+, r18
     780:	3c 93       	st	X, r19
								Mpc->j++;
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	80 83       	st	Z, r24
     786:	91 83       	std	Z+1, r25	; 0x01
							}		
						
						break;
						
				}
}
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	bf 90       	pop	r11
     79a:	08 95       	ret

0000079c <SPI_L>:
		NRF24L01_L_RF_TX();
	while ((NRF24L01_L_Get_Status() & _TX_DS) != _TX_DS)
	{
		
	}		
	NRF24L01_L_Clear_Interrupts();
     79c:	e0 ec       	ldi	r30, 0xC0	; 192
     79e:	fa e0       	ldi	r31, 0x0A	; 10
     7a0:	83 83       	std	Z+3, r24	; 0x03
     7a2:	82 81       	ldd	r24, Z+2	; 0x02
     7a4:	88 23       	and	r24, r24
     7a6:	ec f7       	brge	.-6      	; 0x7a2 <SPI_L+0x6>
     7a8:	e0 ec       	ldi	r30, 0xC0	; 192
     7aa:	fa e0       	ldi	r31, 0x0A	; 10
     7ac:	83 81       	ldd	r24, Z+3	; 0x03
     7ae:	08 95       	ret

000007b0 <NRF24L01_L_ReadReg>:
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	c0 e8       	ldi	r28, 0x80	; 128
     7b8:	d6 e0       	ldi	r29, 0x06	; 6
     7ba:	10 e1       	ldi	r17, 0x10	; 16
     7bc:	1e 83       	std	Y+6, r17	; 0x06
     7be:	ee df       	rcall	.-36     	; 0x79c <SPI_L>
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	ec df       	rcall	.-40     	; 0x79c <SPI_L>
     7c4:	1d 83       	std	Y+5, r17	; 0x05
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	08 95       	ret

000007ce <NRF24L01_L_WriteReg>:
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	f6 2e       	mov	r15, r22
     7da:	c0 e8       	ldi	r28, 0x80	; 128
     7dc:	d6 e0       	ldi	r29, 0x06	; 6
     7de:	10 e1       	ldi	r17, 0x10	; 16
     7e0:	1e 83       	std	Y+6, r17	; 0x06
     7e2:	dc df       	rcall	.-72     	; 0x79c <SPI_L>
     7e4:	08 2f       	mov	r16, r24
     7e6:	8f 2d       	mov	r24, r15
     7e8:	d9 df       	rcall	.-78     	; 0x79c <SPI_L>
     7ea:	1d 83       	std	Y+5, r17	; 0x05
     7ec:	80 2f       	mov	r24, r16
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	08 95       	ret

000007fa <NRF24L01_L_Set_CH>:
     7fa:	68 2f       	mov	r22, r24
     7fc:	6f 77       	andi	r22, 0x7F	; 127
     7fe:	85 e2       	ldi	r24, 0x25	; 37
     800:	e6 cf       	rjmp	.-52     	; 0x7ce <NRF24L01_L_WriteReg>
     802:	08 95       	ret

00000804 <NRF24L01_L_Set_ShockBurst>:
     804:	cf 93       	push	r28
     806:	c8 2f       	mov	r28, r24
     808:	68 2f       	mov	r22, r24
     80a:	84 e2       	ldi	r24, 0x24	; 36
     80c:	e0 df       	rcall	.-64     	; 0x7ce <NRF24L01_L_WriteReg>
     80e:	6c 2f       	mov	r22, r28
     810:	81 e2       	ldi	r24, 0x21	; 33
     812:	dd df       	rcall	.-70     	; 0x7ce <NRF24L01_L_WriteReg>
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <NRF24L01_L_Set_Address_Width>:
     818:	63 e0       	ldi	r22, 0x03	; 3
     81a:	83 e2       	ldi	r24, 0x23	; 35
     81c:	d8 cf       	rjmp	.-80     	; 0x7ce <NRF24L01_L_WriteReg>
     81e:	08 95       	ret

00000820 <NRF24L01_L_Clear_Interrupts>:
     820:	60 e7       	ldi	r22, 0x70	; 112
     822:	87 e2       	ldi	r24, 0x27	; 39
     824:	d4 cf       	rjmp	.-88     	; 0x7ce <NRF24L01_L_WriteReg>
     826:	08 95       	ret

00000828 <NRF24L01_L_ReadRegBuf>:
     828:	df 92       	push	r13
     82a:	ef 92       	push	r14
     82c:	ff 92       	push	r15
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	7b 01       	movw	r14, r22
     838:	8a 01       	movw	r16, r20
     83a:	90 e1       	ldi	r25, 0x10	; 16
     83c:	e0 e8       	ldi	r30, 0x80	; 128
     83e:	f6 e0       	ldi	r31, 0x06	; 6
     840:	96 83       	std	Z+6, r25	; 0x06
     842:	ac df       	rcall	.-168    	; 0x79c <SPI_L>
     844:	d8 2e       	mov	r13, r24
     846:	10 16       	cp	r1, r16
     848:	11 06       	cpc	r1, r17
     84a:	4c f4       	brge	.+18     	; 0x85e <NRF24L01_L_ReadRegBuf+0x36>
     84c:	e7 01       	movw	r28, r14
     84e:	0e 0d       	add	r16, r14
     850:	1f 1d       	adc	r17, r15
     852:	8f ef       	ldi	r24, 0xFF	; 255
     854:	a3 df       	rcall	.-186    	; 0x79c <SPI_L>
     856:	89 93       	st	Y+, r24
     858:	c0 17       	cp	r28, r16
     85a:	d1 07       	cpc	r29, r17
     85c:	d1 f7       	brne	.-12     	; 0x852 <NRF24L01_L_ReadRegBuf+0x2a>
     85e:	80 e1       	ldi	r24, 0x10	; 16
     860:	e0 e8       	ldi	r30, 0x80	; 128
     862:	f6 e0       	ldi	r31, 0x06	; 6
     864:	85 83       	std	Z+5, r24	; 0x05
     866:	8d 2d       	mov	r24, r13
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	08 95       	ret

00000878 <NRF24L01_L_Read_RX_Buf>:
     878:	ab 01       	movw	r20, r22
     87a:	bc 01       	movw	r22, r24
     87c:	81 e6       	ldi	r24, 0x61	; 97
     87e:	d4 cf       	rjmp	.-88     	; 0x828 <NRF24L01_L_ReadRegBuf>
     880:	08 95       	ret

00000882 <NRF24L01_L_WriteRegBuf>:
     882:	df 92       	push	r13
     884:	ef 92       	push	r14
     886:	ff 92       	push	r15
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	7b 01       	movw	r14, r22
     892:	8a 01       	movw	r16, r20
     894:	90 e1       	ldi	r25, 0x10	; 16
     896:	e0 e8       	ldi	r30, 0x80	; 128
     898:	f6 e0       	ldi	r31, 0x06	; 6
     89a:	96 83       	std	Z+6, r25	; 0x06
     89c:	7f df       	rcall	.-258    	; 0x79c <SPI_L>
     89e:	d8 2e       	mov	r13, r24
     8a0:	10 16       	cp	r1, r16
     8a2:	11 06       	cpc	r1, r17
     8a4:	44 f4       	brge	.+16     	; 0x8b6 <NRF24L01_L_WriteRegBuf+0x34>
     8a6:	e7 01       	movw	r28, r14
     8a8:	0e 0d       	add	r16, r14
     8aa:	1f 1d       	adc	r17, r15
     8ac:	89 91       	ld	r24, Y+
     8ae:	76 df       	rcall	.-276    	; 0x79c <SPI_L>
     8b0:	c0 17       	cp	r28, r16
     8b2:	d1 07       	cpc	r29, r17
     8b4:	d9 f7       	brne	.-10     	; 0x8ac <NRF24L01_L_WriteRegBuf+0x2a>
     8b6:	80 e1       	ldi	r24, 0x10	; 16
     8b8:	e0 e8       	ldi	r30, 0x80	; 128
     8ba:	f6 e0       	ldi	r31, 0x06	; 6
     8bc:	85 83       	std	Z+5, r24	; 0x05
     8be:	8d 2d       	mov	r24, r13
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	08 95       	ret

000008d0 <NRF24L01_L_Set_RX_Pipe>:
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	f8 2e       	mov	r15, r24
     8e0:	eb 01       	movw	r28, r22
     8e2:	8a 01       	movw	r16, r20
     8e4:	d2 2e       	mov	r13, r18
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	63 df       	rcall	.-314    	; 0x7b0 <NRF24L01_L_ReadReg>
     8ea:	e1 e0       	ldi	r30, 0x01	; 1
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	0f 2c       	mov	r0, r15
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <NRF24L01_L_Set_RX_Pipe+0x26>
     8f2:	ee 0f       	add	r30, r30
     8f4:	ff 1f       	adc	r31, r31
     8f6:	0a 94       	dec	r0
     8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <NRF24L01_L_Set_RX_Pipe+0x22>
     8fa:	68 2f       	mov	r22, r24
     8fc:	6e 2b       	or	r22, r30
     8fe:	82 e2       	ldi	r24, 0x22	; 34
     900:	66 df       	rcall	.-308    	; 0x7ce <NRF24L01_L_WriteReg>
     902:	81 e1       	ldi	r24, 0x11	; 17
     904:	8f 0d       	add	r24, r15
     906:	6d 2d       	mov	r22, r13
     908:	80 62       	ori	r24, 0x20	; 32
     90a:	61 df       	rcall	.-318    	; 0x7ce <NRF24L01_L_WriteReg>
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	8f 15       	cp	r24, r15
     910:	38 f0       	brcs	.+14     	; 0x920 <NRF24L01_L_Set_RX_Pipe+0x50>
     912:	8a e0       	ldi	r24, 0x0A	; 10
     914:	8f 0d       	add	r24, r15
     916:	a8 01       	movw	r20, r16
     918:	be 01       	movw	r22, r28
     91a:	80 62       	ori	r24, 0x20	; 32
     91c:	b2 df       	rcall	.-156    	; 0x882 <NRF24L01_L_WriteRegBuf>
     91e:	05 c0       	rjmp	.+10     	; 0x92a <NRF24L01_L_Set_RX_Pipe+0x5a>
     920:	8a e0       	ldi	r24, 0x0A	; 10
     922:	8f 0d       	add	r24, r15
     924:	68 81       	ld	r22, Y
     926:	80 62       	ori	r24, 0x20	; 32
     928:	52 df       	rcall	.-348    	; 0x7ce <NRF24L01_L_WriteReg>
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	ff 90       	pop	r15
     934:	ef 90       	pop	r14
     936:	df 90       	pop	r13
     938:	08 95       	ret

0000093a <NRF24L01_L_Set_TX_Address>:
     93a:	ab 01       	movw	r20, r22
     93c:	bc 01       	movw	r22, r24
     93e:	80 e3       	ldi	r24, 0x30	; 48
     940:	a0 cf       	rjmp	.-192    	; 0x882 <NRF24L01_L_WriteRegBuf>
     942:	08 95       	ret

00000944 <NRF24L01_L_Init>:
     944:	cf 92       	push	r12
     946:	df 92       	push	r13
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	f8 2e       	mov	r15, r24
     956:	d6 2e       	mov	r13, r22
     958:	14 2f       	mov	r17, r20
     95a:	e9 01       	movw	r28, r18
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	52 df       	rcall	.-348    	; 0x804 <NRF24L01_L_Set_ShockBurst>
     960:	11 60       	ori	r17, 0x01	; 1
     962:	61 2f       	mov	r22, r17
     964:	6c 29       	or	r22, r12
     966:	86 e2       	ldi	r24, 0x26	; 38
     968:	32 df       	rcall	.-412    	; 0x7ce <NRF24L01_L_WriteReg>
     96a:	80 2f       	mov	r24, r16
     96c:	55 df       	rcall	.-342    	; 0x818 <NRF24L01_L_Set_Address_Width>
     96e:	11 27       	eor	r17, r17
     970:	07 fd       	sbrc	r16, 7
     972:	10 95       	com	r17
     974:	2e 2d       	mov	r18, r14
     976:	a8 01       	movw	r20, r16
     978:	be 01       	movw	r22, r28
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	a9 df       	rcall	.-174    	; 0x8d0 <NRF24L01_L_Set_RX_Pipe>
     97e:	8d 2d       	mov	r24, r13
     980:	3c df       	rcall	.-392    	; 0x7fa <NRF24L01_L_Set_CH>
     982:	b8 01       	movw	r22, r16
     984:	ce 01       	movw	r24, r28
     986:	d9 df       	rcall	.-78     	; 0x93a <NRF24L01_L_Set_TX_Address>
     988:	6f 2d       	mov	r22, r15
     98a:	6a 60       	ori	r22, 0x0A	; 10
     98c:	80 e2       	ldi	r24, 0x20	; 32
     98e:	1f df       	rcall	.-450    	; 0x7ce <NRF24L01_L_WriteReg>
     990:	8f ed       	ldi	r24, 0xDF	; 223
     992:	9e e2       	ldi	r25, 0x2E	; 46
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	f1 f7       	brne	.-4      	; 0x994 <NRF24L01_L_Init+0x50>
     998:	00 c0       	rjmp	.+0      	; 0x99a <NRF24L01_L_Init+0x56>
     99a:	00 00       	nop
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	ef 90       	pop	r14
     9a8:	df 90       	pop	r13
     9aa:	cf 90       	pop	r12
     9ac:	08 95       	ret

000009ae <NRF24L01_L_Flush_TX>:

/**
 Empty the transmit buffer

*/
void NRF24L01_L_Flush_TX(void) {
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
	NRF24L01_L_CS_LOW;
     9b4:	c0 e8       	ldi	r28, 0x80	; 128
     9b6:	d6 e0       	ldi	r29, 0x06	; 6
     9b8:	10 e1       	ldi	r17, 0x10	; 16
     9ba:	1e 83       	std	Y+6, r17	; 0x06
	SPI_L(FLUSH_TX);
     9bc:	81 ee       	ldi	r24, 0xE1	; 225
     9be:	ee de       	rcall	.-548    	; 0x79c <SPI_L>
	NRF24L01_L_CS_HIGH;
     9c0:	1d 83       	std	Y+5, r17	; 0x05
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	08 95       	ret

000009ca <NRF24L01_L_Flush_RX>:

/**
 Empty the receive buffer
*/
void NRF24L01_L_Flush_RX(void) {
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
	NRF24L01_L_CS_LOW;
     9d0:	c0 e8       	ldi	r28, 0x80	; 128
     9d2:	d6 e0       	ldi	r29, 0x06	; 6
     9d4:	10 e1       	ldi	r17, 0x10	; 16
     9d6:	1e 83       	std	Y+6, r17	; 0x06
	SPI_L(FLUSH_RX);
     9d8:	82 ee       	ldi	r24, 0xE2	; 226
     9da:	e0 de       	rcall	.-576    	; 0x79c <SPI_L>
	NRF24L01_L_CS_HIGH;
     9dc:	1d 83       	std	Y+5, r17	; 0x05
}
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	08 95       	ret

000009e6 <NRF_init>:
//   	usart_putchar(&USARTC0,buffer[i]);
//  
//   }

void NRF_init (void)
{
     9e6:	cf 92       	push	r12
     9e8:	ef 92       	push	r14
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
	NRF24L01_L_CE_LOW;       //disable transceiver modes
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	e0 e8       	ldi	r30, 0x80	; 128
     9f6:	f6 e0       	ldi	r31, 0x06	; 6
     9f8:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9fa:	2a e6       	ldi	r18, 0x6A	; 106
     9fc:	2a 95       	dec	r18
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <NRF_init+0x16>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <NRF_init+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	93 ec       	ldi	r25, 0xC3	; 195
     a06:	29 e0       	ldi	r18, 0x09	; 9
     a08:	81 50       	subi	r24, 0x01	; 1
     a0a:	90 40       	sbci	r25, 0x00	; 0
     a0c:	20 40       	sbci	r18, 0x00	; 0
     a0e:	e1 f7       	brne	.-8      	; 0xa08 <NRF_init+0x22>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <NRF_init+0x2c>
     a12:	00 00       	nop
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	_delay_us(10);
	_delay_ms(100);      //power on reset delay needs 100ms
	NRF24L01_L_Clear_Interrupts();
     a14:	05 df       	rcall	.-502    	; 0x820 <NRF24L01_L_Clear_Interrupts>
	
	NRF24L01_L_Flush_TX();
     a16:	cb df       	rcall	.-106    	; 0x9ae <NRF24L01_L_Flush_TX>
	
	NRF24L01_L_Flush_RX();
     a18:	d8 df       	rcall	.-80     	; 0x9ca <NRF24L01_L_Flush_RX>
	

	NRF24L01_L_CE_LOW;
     a1a:	c0 e8       	ldi	r28, 0x80	; 128
     a1c:	d6 e0       	ldi	r29, 0x06	; 6
     a1e:	12 e0       	ldi	r17, 0x02	; 2
     a20:	1e 83       	std	Y+6, r17	; 0x06
	NRF24L01_L_Init(_RX_MODE, _CH_L,_250k, Address, _Address_Width, _Buffer_Size, RF_PWR_MAX);
     a22:	0f 2e       	mov	r0, r31
     a24:	f6 e0       	ldi	r31, 0x06	; 6
     a26:	cf 2e       	mov	r12, r31
     a28:	f0 2d       	mov	r31, r0
     a2a:	68 94       	set
     a2c:	ee 24       	eor	r14, r14
     a2e:	e5 f8       	bld	r14, 5
     a30:	05 e0       	ldi	r16, 0x05	; 5
     a32:	21 e0       	ldi	r18, 0x01	; 1
     a34:	30 e2       	ldi	r19, 0x20	; 32
     a36:	40 e2       	ldi	r20, 0x20	; 32
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	83 df       	rcall	.-250    	; 0x944 <NRF24L01_L_Init>

	NRF24L01_L_CE_HIGH;
     a3e:	1d 83       	std	Y+5, r17	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a40:	8f e0       	ldi	r24, 0x0F	; 15
     a42:	94 e0       	ldi	r25, 0x04	; 4
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	f1 f7       	brne	.-4      	; 0xa44 <NRF_init+0x5e>
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <NRF_init+0x64>
     a4a:	00 00       	nop

	

	_delay_us(130);
}
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ef 90       	pop	r14
     a56:	cf 90       	pop	r12
     a58:	08 95       	ret

00000a5a <NRF_receive>:



void NRF_receive (void)
{
     a5a:	cf 93       	push	r28
	uint8_t status_L = NRF24L01_L_WriteReg( W_REGISTER|STATUSe,_TX_DS|_MAX_RT);
     a5c:	60 e3       	ldi	r22, 0x30	; 48
     a5e:	87 e2       	ldi	r24, 0x27	; 39
     a60:	b6 de       	rcall	.-660    	; 0x7ce <NRF24L01_L_WriteReg>
	if((status_L & _RX_DR) == _RX_DR)
     a62:	86 ff       	sbrs	r24, 6
     a64:	15 c0       	rjmp	.+42     	; 0xa90 <NRF_receive+0x36>
	{
		LED_White_L_PORT.OUTTGL = LED_White_L_PIN_bm; //
     a66:	80 e4       	ldi	r24, 0x40	; 64
     a68:	e0 e6       	ldi	r30, 0x60	; 96
     a6a:	f6 e0       	ldi	r31, 0x06	; 6
     a6c:	87 83       	std	Z+7, r24	; 0x07
		
		do
		{
			NRF24L01_L_Read_RX_Buf(Buf_Rx_L , _Buffer_Size);
     a6e:	60 e2       	ldi	r22, 0x20	; 32
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	86 e0       	ldi	r24, 0x06	; 6
     a74:	91 e2       	ldi	r25, 0x21	; 33
     a76:	00 df       	rcall	.-512    	; 0x878 <NRF24L01_L_Read_RX_Buf>

			//buf_receive[0]=Buf_Rx_L[1];

			//2) clear RX_DR IRQ,
			status_L=NRF24L01_L_WriteReg(W_REGISTER | STATUSe, _RX_DR );
     a78:	60 e4       	ldi	r22, 0x40	; 64
     a7a:	87 e2       	ldi	r24, 0x27	; 39
     a7c:	a8 de       	rcall	.-688    	; 0x7ce <NRF24L01_L_WriteReg>
     a7e:	c8 2f       	mov	r28, r24
			//3) read FIFO_STATUS to check if there are more payloads available in RX FIFO,
			//4) if there are more data in RX FIFO, repeat from step 1).
		} while((NRF24L01_L_ReadReg(FIFO_STATUS)&RX_EMPTY) == 0x00);
     a80:	87 e1       	ldi	r24, 0x17	; 23
     a82:	96 de       	rcall	.-724    	; 0x7b0 <NRF24L01_L_ReadReg>
     a84:	80 ff       	sbrs	r24, 0
     a86:	f3 cf       	rjmp	.-26     	; 0xa6e <NRF_receive+0x14>
			NRF24L01_L_Read_RX_Buf(Buf_Rx_L , _Buffer_Size);

			//buf_receive[0]=Buf_Rx_L[1];

			//2) clear RX_DR IRQ,
			status_L=NRF24L01_L_WriteReg(W_REGISTER | STATUSe, _RX_DR );
     a88:	8c 2f       	mov	r24, r28
			//3) read FIFO_STATUS to check if there are more payloads available in RX FIFO,
			//4) if there are more data in RX FIFO, repeat from step 1).
		} while((NRF24L01_L_ReadReg(FIFO_STATUS)&RX_EMPTY) == 0x00);
		flag=1;
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	90 93 03 21 	sts	0x2103, r25
		
	}
	

	if((status_L&_TX_DS) == _TX_DS)
     a90:	85 ff       	sbrs	r24, 5
     a92:	04 c0       	rjmp	.+8      	; 0xa9c <NRF_receive+0x42>
	{
		LED_Green_L_PORT.OUTTGL = LED_Green_L_PIN_bm;
     a94:	90 e2       	ldi	r25, 0x20	; 32
     a96:	e0 e6       	ldi	r30, 0x60	; 96
     a98:	f6 e0       	ldi	r31, 0x06	; 6
     a9a:	97 83       	std	Z+7, r25	; 0x07
	}
	if ((status_L&_MAX_RT) == _MAX_RT)
     a9c:	84 fd       	sbrc	r24, 4
	{
		NRF24L01_L_Flush_TX();
     a9e:	87 df       	rcall	.-242    	; 0x9ae <NRF24L01_L_Flush_TX>
	}	
}
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <set_micro>:
#include "nrf24l01_R.h"
#include "variable.h"
#include "setting.h"

void set_micro (void)
{
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
	En_RC32M();
     aa8:	cc dc       	rcall	.-1640   	; 0x442 <En_RC32M>
	PORT_init();
     aaa:	e0 dc       	rcall	.-1600   	; 0x46c <PORT_init>

	PMIC_CTRL |=PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm;
     aac:	e2 ea       	ldi	r30, 0xA2	; 162
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	83 60       	ori	r24, 0x03	; 3
     ab4:	80 83       	st	Z, r24


	USART_R_init();
     ab6:	1d dd       	rcall	.-1478   	; 0x4f2 <USART_R_init>
	
	///////////////////////////////////////////////////////////////////////////////////////////spi se

	spi_xmega_set_baud_div(&NRF24L01_L_SPI,8000000UL,F_CPU);
     ab8:	00 e0       	ldi	r16, 0x00	; 0
     aba:	18 e4       	ldi	r17, 0x48	; 72
     abc:	28 ee       	ldi	r18, 0xE8	; 232
     abe:	31 e0       	ldi	r19, 0x01	; 1
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	52 e1       	ldi	r21, 0x12	; 18
     ac4:	6a e7       	ldi	r22, 0x7A	; 122
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	80 ec       	ldi	r24, 0xC0	; 192
     aca:	9a e0       	ldi	r25, 0x0A	; 10
     acc:	0c d0       	rcall	.+24     	; 0xae6 <spi_xmega_set_baud_div>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
     ace:	e0 ec       	ldi	r30, 0xC0	; 192
     ad0:	fa e0       	ldi	r31, 0x0A	; 10
     ad2:	80 81       	ld	r24, Z
     ad4:	80 61       	ori	r24, 0x10	; 16
     ad6:	80 83       	st	Z, r24
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
     ad8:	80 81       	ld	r24, Z
     ada:	80 64       	ori	r24, 0x40	; 64
     adc:	80 83       	st	Z, r24
	spi_enable_master_mode(&NRF24L01_L_SPI);
	spi_enable(&NRF24L01_L_SPI);

		
	sei();
     ade:	78 94       	sei
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	08 95       	ret

00000ae6 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	ec 01       	movw	r28, r24
     af8:	6a 01       	movw	r12, r20
     afa:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
     afc:	db 01       	movw	r26, r22
     afe:	ca 01       	movw	r24, r20
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	a1 09       	sbc	r26, r1
     b04:	b1 09       	sbc	r27, r1
     b06:	bc 01       	movw	r22, r24
     b08:	cd 01       	movw	r24, r26
     b0a:	60 0f       	add	r22, r16
     b0c:	71 1f       	adc	r23, r17
     b0e:	82 1f       	adc	r24, r18
     b10:	93 1f       	adc	r25, r19
     b12:	a7 01       	movw	r20, r14
     b14:	96 01       	movw	r18, r12
     b16:	c0 d0       	rcall	.+384    	; 0xc98 <__udivmodsi4>

	if (divisor > 128) {
     b18:	21 38       	cpi	r18, 0x81	; 129
     b1a:	31 05       	cpc	r19, r1
     b1c:	41 05       	cpc	r20, r1
     b1e:	51 05       	cpc	r21, r1
     b20:	f8 f4       	brcc	.+62     	; 0xb60 <spi_xmega_set_baud_div+0x7a>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
     b22:	21 34       	cpi	r18, 0x41	; 65
     b24:	60 f4       	brcc	.+24     	; 0xb3e <spi_xmega_set_baud_div+0x58>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
     b26:	21 32       	cpi	r18, 0x21	; 33
     b28:	60 f4       	brcc	.+24     	; 0xb42 <spi_xmega_set_baud_div+0x5c>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
     b2a:	21 31       	cpi	r18, 0x11	; 17
     b2c:	60 f4       	brcc	.+24     	; 0xb46 <spi_xmega_set_baud_div+0x60>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
     b2e:	29 30       	cpi	r18, 0x09	; 9
     b30:	60 f4       	brcc	.+24     	; 0xb4a <spi_xmega_set_baud_div+0x64>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
     b32:	25 30       	cpi	r18, 0x05	; 5
     b34:	60 f4       	brcc	.+24     	; 0xb4e <spi_xmega_set_baud_div+0x68>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
     b36:	23 30       	cpi	r18, 0x03	; 3
     b38:	60 f0       	brcs	.+24     	; 0xb52 <spi_xmega_set_baud_div+0x6c>
		ctrl = SPI_PRESCALER_DIV4_gc;
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0b c0       	rjmp	.+22     	; 0xb54 <spi_xmega_set_baud_div+0x6e>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
     b3e:	93 e0       	ldi	r25, 0x03	; 3
     b40:	09 c0       	rjmp	.+18     	; 0xb54 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	07 c0       	rjmp	.+14     	; 0xb54 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
     b46:	92 e8       	ldi	r25, 0x82	; 130
     b48:	05 c0       	rjmp	.+10     	; 0xb54 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
     b4e:	91 e8       	ldi	r25, 0x81	; 129
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
     b52:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
     b54:	88 81       	ld	r24, Y
     b56:	8c 77       	andi	r24, 0x7C	; 124
     b58:	89 2b       	or	r24, r25
     b5a:	88 83       	st	Y, r24

	return 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	01 c0       	rjmp	.+2      	; 0xb62 <spi_xmega_set_baud_div+0x7c>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
     b60:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	08 95       	ret

00000b74 <main>:
#include "MPC.h"


int main (void)
{
	set_micro();
     b74:	97 df       	rcall	.-210    	; 0xaa4 <set_micro>
	NRF_init();
     b76:	37 df       	rcall	.-402    	; 0x9e6 <NRF_init>
     b78:	0f 2e       	mov	r0, r31
     b7a:	f8 ef       	ldi	r31, 0xF8	; 248
     b7c:	cf 2e       	mov	r12, r31
     b7e:	f0 e2       	ldi	r31, 0x20	; 32
     b80:	df 2e       	mov	r13, r31
     b82:	f0 2d       	mov	r31, r0
     b84:	0f 2e       	mov	r0, r31
     b86:	f8 e1       	ldi	r31, 0x18	; 24
     b88:	ef 2e       	mov	r14, r31
     b8a:	f1 e2       	ldi	r31, 0x21	; 33
     b8c:	ff 2e       	mov	r15, r31
     b8e:	f0 2d       	mov	r31, r0
 				//NRF_decode();
 				for (uint8_t i=0;i<_Buffer_Size;i++)
						Mpc_decode(&MPC,buf_receive[i]);
				 
 				decode_flag=0;
 				copy_flag=1;
     b90:	99 24       	eor	r9, r9
     b92:	93 94       	inc	r9
     b94:	0f 2e       	mov	r0, r31
     b96:	f6 e0       	ldi	r31, 0x06	; 6
     b98:	af 2e       	mov	r10, r31
     b9a:	f1 e2       	ldi	r31, 0x21	; 33
     b9c:	bf 2e       	mov	r11, r31
     b9e:	f0 2d       	mov	r31, r0
     ba0:	06 e2       	ldi	r16, 0x26	; 38
     ba2:	11 e2       	ldi	r17, 0x21	; 33
	
	while (1)
	{

 
 			if (copy_flag==2)
     ba4:	80 91 00 20 	lds	r24, 0x2000
     ba8:	82 30       	cpi	r24, 0x02	; 2
     baa:	61 f4       	brne	.+24     	; 0xbc4 <main+0x50>
     bac:	f5 01       	movw	r30, r10
     bae:	d6 01       	movw	r26, r12
 			{
 				//do copy	
 				for (int j=0;j<_Buffer_Size;j++)
 					buf_receive[j]=Buf_Rx_L[j];
     bb0:	81 91       	ld	r24, Z+
     bb2:	8d 93       	st	X+, r24

 
 			if (copy_flag==2)
 			{
 				//do copy	
 				for (int j=0;j<_Buffer_Size;j++)
     bb4:	e0 17       	cp	r30, r16
     bb6:	f1 07       	cpc	r31, r17
     bb8:	d9 f7       	brne	.-10     	; 0xbb0 <main+0x3c>
 					buf_receive[j]=Buf_Rx_L[j];
 				
 				copy_flag=0; 		
     bba:	10 92 00 20 	sts	0x2000, r1
 				decode_flag=1;
     bbe:	90 92 14 20 	sts	0x2014, r9
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <main+0x58>
 			}
 			
 			if (decode_flag==1)
     bc4:	80 91 14 20 	lds	r24, 0x2014
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	61 f4       	brne	.+24     	; 0xbe4 <main+0x70>
     bcc:	e6 01       	movw	r28, r12
 			{
 				
 				//do decode
 				//NRF_decode();
 				for (uint8_t i=0;i<_Buffer_Size;i++)
						Mpc_decode(&MPC,buf_receive[i]);
     bce:	69 91       	ld	r22, Y+
     bd0:	8d e7       	ldi	r24, 0x7D	; 125
     bd2:	90 e2       	ldi	r25, 0x20	; 32
     bd4:	cb dc       	rcall	.-1642   	; 0x56c <Mpc_decode>
 			if (decode_flag==1)
 			{
 				
 				//do decode
 				//NRF_decode();
 				for (uint8_t i=0;i<_Buffer_Size;i++)
     bd6:	ce 15       	cp	r28, r14
     bd8:	df 05       	cpc	r29, r15
     bda:	c9 f7       	brne	.-14     	; 0xbce <main+0x5a>
						Mpc_decode(&MPC,buf_receive[i]);
				 
 				decode_flag=0;
     bdc:	10 92 14 20 	sts	0x2014, r1
 				copy_flag=1;
     be0:	90 92 00 20 	sts	0x2000, r9
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	8a 95       	dec	r24
     be8:	f1 f7       	brne	.-4      	; 0xbe6 <main+0x72>
     bea:	dc cf       	rjmp	.-72     	; 0xba4 <main+0x30>

00000bec <__vector_77>:
 	}
}


ISR(TCD0_OVF_vect)
{
     bec:	1f 92       	push	r1
     bee:	0f 92       	push	r0
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	0f 92       	push	r0
     bf4:	11 24       	eor	r1, r1
	
}
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	0f 90       	pop	r0
     bfc:	1f 90       	pop	r1
     bfe:	18 95       	reti

00000c00 <__vector_43>:

ISR(PRX_L)
{
     c00:	1f 92       	push	r1
     c02:	0f 92       	push	r0
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	0f 92       	push	r0
     c08:	11 24       	eor	r1, r1
     c0a:	0b b6       	in	r0, 0x3b	; 59
     c0c:	0f 92       	push	r0
     c0e:	2f 93       	push	r18
     c10:	3f 93       	push	r19
     c12:	4f 93       	push	r20
     c14:	5f 93       	push	r21
     c16:	6f 93       	push	r22
     c18:	7f 93       	push	r23
     c1a:	8f 93       	push	r24
     c1c:	9f 93       	push	r25
     c1e:	af 93       	push	r26
     c20:	bf 93       	push	r27
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
	//flag=1;
	if (copy_flag==1)
     c26:	80 91 00 20 	lds	r24, 0x2000
     c2a:	81 30       	cpi	r24, 0x01	; 1
     c2c:	19 f4       	brne	.+6      	; 0xc34 <__vector_43+0x34>
	copy_flag=2;
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	80 93 00 20 	sts	0x2000, r24
	
	NRF_receive();
     c34:	12 df       	rcall	.-476    	; 0xa5a <NRF_receive>
}
     c36:	ff 91       	pop	r31
     c38:	ef 91       	pop	r30
     c3a:	bf 91       	pop	r27
     c3c:	af 91       	pop	r26
     c3e:	9f 91       	pop	r25
     c40:	8f 91       	pop	r24
     c42:	7f 91       	pop	r23
     c44:	6f 91       	pop	r22
     c46:	5f 91       	pop	r21
     c48:	4f 91       	pop	r20
     c4a:	3f 91       	pop	r19
     c4c:	2f 91       	pop	r18
     c4e:	0f 90       	pop	r0
     c50:	0b be       	out	0x3b, r0	; 59
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	0f 90       	pop	r0
     c58:	1f 90       	pop	r1
     c5a:	18 95       	reti

00000c5c <__vector_2>:

ISR(PRX_R)
{
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
	
}
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <__vector_25>:

ISR(USART_R_RXC_vect)
{
     c70:	1f 92       	push	r1
     c72:	0f 92       	push	r0
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1

}
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <__vector_26>:

ISR(USART_R_DRE_vect) //Wireless_R_USART
{
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	11 24       	eor	r1, r1

}
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	0f 90       	pop	r0
     c94:	1f 90       	pop	r1
     c96:	18 95       	reti

00000c98 <__udivmodsi4>:
     c98:	a1 e2       	ldi	r26, 0x21	; 33
     c9a:	1a 2e       	mov	r1, r26
     c9c:	aa 1b       	sub	r26, r26
     c9e:	bb 1b       	sub	r27, r27
     ca0:	fd 01       	movw	r30, r26
     ca2:	0d c0       	rjmp	.+26     	; 0xcbe <__udivmodsi4_ep>

00000ca4 <__udivmodsi4_loop>:
     ca4:	aa 1f       	adc	r26, r26
     ca6:	bb 1f       	adc	r27, r27
     ca8:	ee 1f       	adc	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	a2 17       	cp	r26, r18
     cae:	b3 07       	cpc	r27, r19
     cb0:	e4 07       	cpc	r30, r20
     cb2:	f5 07       	cpc	r31, r21
     cb4:	20 f0       	brcs	.+8      	; 0xcbe <__udivmodsi4_ep>
     cb6:	a2 1b       	sub	r26, r18
     cb8:	b3 0b       	sbc	r27, r19
     cba:	e4 0b       	sbc	r30, r20
     cbc:	f5 0b       	sbc	r31, r21

00000cbe <__udivmodsi4_ep>:
     cbe:	66 1f       	adc	r22, r22
     cc0:	77 1f       	adc	r23, r23
     cc2:	88 1f       	adc	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	1a 94       	dec	r1
     cc8:	69 f7       	brne	.-38     	; 0xca4 <__udivmodsi4_loop>
     cca:	60 95       	com	r22
     ccc:	70 95       	com	r23
     cce:	80 95       	com	r24
     cd0:	90 95       	com	r25
     cd2:	9b 01       	movw	r18, r22
     cd4:	ac 01       	movw	r20, r24
     cd6:	bd 01       	movw	r22, r26
     cd8:	cf 01       	movw	r24, r30
     cda:	08 95       	ret

00000cdc <sprintf>:
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	2e 97       	sbiw	r28, 0x0e	; 14
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0d 89       	ldd	r16, Y+21	; 0x15
     cf0:	1e 89       	ldd	r17, Y+22	; 0x16
     cf2:	86 e0       	ldi	r24, 0x06	; 6
     cf4:	8c 83       	std	Y+4, r24	; 0x04
     cf6:	09 83       	std	Y+1, r16	; 0x01
     cf8:	1a 83       	std	Y+2, r17	; 0x02
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	9f e7       	ldi	r25, 0x7F	; 127
     cfe:	8d 83       	std	Y+5, r24	; 0x05
     d00:	9e 83       	std	Y+6, r25	; 0x06
     d02:	ae 01       	movw	r20, r28
     d04:	47 5e       	subi	r20, 0xE7	; 231
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	6f 89       	ldd	r22, Y+23	; 0x17
     d0a:	78 8d       	ldd	r23, Y+24	; 0x18
     d0c:	ce 01       	movw	r24, r28
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	0d d0       	rcall	.+26     	; 0xd2c <vfprintf>
     d12:	ef 81       	ldd	r30, Y+7	; 0x07
     d14:	f8 85       	ldd	r31, Y+8	; 0x08
     d16:	e0 0f       	add	r30, r16
     d18:	f1 1f       	adc	r31, r17
     d1a:	10 82       	st	Z, r1
     d1c:	2e 96       	adiw	r28, 0x0e	; 14
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	08 95       	ret

00000d2c <vfprintf>:
     d2c:	2f 92       	push	r2
     d2e:	3f 92       	push	r3
     d30:	4f 92       	push	r4
     d32:	5f 92       	push	r5
     d34:	6f 92       	push	r6
     d36:	7f 92       	push	r7
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	2c 97       	sbiw	r28, 0x0c	; 12
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	7c 01       	movw	r14, r24
     d5c:	6b 01       	movw	r12, r22
     d5e:	8a 01       	movw	r16, r20
     d60:	fc 01       	movw	r30, r24
     d62:	16 82       	std	Z+6, r1	; 0x06
     d64:	17 82       	std	Z+7, r1	; 0x07
     d66:	83 81       	ldd	r24, Z+3	; 0x03
     d68:	81 ff       	sbrs	r24, 1
     d6a:	b0 c1       	rjmp	.+864    	; 0x10cc <vfprintf+0x3a0>
     d6c:	ce 01       	movw	r24, r28
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	4c 01       	movw	r8, r24
     d72:	f7 01       	movw	r30, r14
     d74:	93 81       	ldd	r25, Z+3	; 0x03
     d76:	f6 01       	movw	r30, r12
     d78:	93 fd       	sbrc	r25, 3
     d7a:	85 91       	lpm	r24, Z+
     d7c:	93 ff       	sbrs	r25, 3
     d7e:	81 91       	ld	r24, Z+
     d80:	6f 01       	movw	r12, r30
     d82:	88 23       	and	r24, r24
     d84:	09 f4       	brne	.+2      	; 0xd88 <vfprintf+0x5c>
     d86:	9e c1       	rjmp	.+828    	; 0x10c4 <vfprintf+0x398>
     d88:	85 32       	cpi	r24, 0x25	; 37
     d8a:	39 f4       	brne	.+14     	; 0xd9a <vfprintf+0x6e>
     d8c:	93 fd       	sbrc	r25, 3
     d8e:	85 91       	lpm	r24, Z+
     d90:	93 ff       	sbrs	r25, 3
     d92:	81 91       	ld	r24, Z+
     d94:	6f 01       	movw	r12, r30
     d96:	85 32       	cpi	r24, 0x25	; 37
     d98:	21 f4       	brne	.+8      	; 0xda2 <vfprintf+0x76>
     d9a:	b7 01       	movw	r22, r14
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	c4 d1       	rcall	.+904    	; 0x1128 <fputc>
     da0:	e8 cf       	rjmp	.-48     	; 0xd72 <vfprintf+0x46>
     da2:	51 2c       	mov	r5, r1
     da4:	31 2c       	mov	r3, r1
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	20 32       	cpi	r18, 0x20	; 32
     daa:	a0 f4       	brcc	.+40     	; 0xdd4 <vfprintf+0xa8>
     dac:	8b 32       	cpi	r24, 0x2B	; 43
     dae:	69 f0       	breq	.+26     	; 0xdca <vfprintf+0x9e>
     db0:	30 f4       	brcc	.+12     	; 0xdbe <vfprintf+0x92>
     db2:	80 32       	cpi	r24, 0x20	; 32
     db4:	59 f0       	breq	.+22     	; 0xdcc <vfprintf+0xa0>
     db6:	83 32       	cpi	r24, 0x23	; 35
     db8:	69 f4       	brne	.+26     	; 0xdd4 <vfprintf+0xa8>
     dba:	20 61       	ori	r18, 0x10	; 16
     dbc:	2c c0       	rjmp	.+88     	; 0xe16 <vfprintf+0xea>
     dbe:	8d 32       	cpi	r24, 0x2D	; 45
     dc0:	39 f0       	breq	.+14     	; 0xdd0 <vfprintf+0xa4>
     dc2:	80 33       	cpi	r24, 0x30	; 48
     dc4:	39 f4       	brne	.+14     	; 0xdd4 <vfprintf+0xa8>
     dc6:	21 60       	ori	r18, 0x01	; 1
     dc8:	26 c0       	rjmp	.+76     	; 0xe16 <vfprintf+0xea>
     dca:	22 60       	ori	r18, 0x02	; 2
     dcc:	24 60       	ori	r18, 0x04	; 4
     dce:	23 c0       	rjmp	.+70     	; 0xe16 <vfprintf+0xea>
     dd0:	28 60       	ori	r18, 0x08	; 8
     dd2:	21 c0       	rjmp	.+66     	; 0xe16 <vfprintf+0xea>
     dd4:	27 fd       	sbrc	r18, 7
     dd6:	27 c0       	rjmp	.+78     	; 0xe26 <vfprintf+0xfa>
     dd8:	30 ed       	ldi	r19, 0xD0	; 208
     dda:	38 0f       	add	r19, r24
     ddc:	3a 30       	cpi	r19, 0x0A	; 10
     dde:	78 f4       	brcc	.+30     	; 0xdfe <vfprintf+0xd2>
     de0:	26 ff       	sbrs	r18, 6
     de2:	06 c0       	rjmp	.+12     	; 0xdf0 <vfprintf+0xc4>
     de4:	fa e0       	ldi	r31, 0x0A	; 10
     de6:	5f 9e       	mul	r5, r31
     de8:	30 0d       	add	r19, r0
     dea:	11 24       	eor	r1, r1
     dec:	53 2e       	mov	r5, r19
     dee:	13 c0       	rjmp	.+38     	; 0xe16 <vfprintf+0xea>
     df0:	8a e0       	ldi	r24, 0x0A	; 10
     df2:	38 9e       	mul	r3, r24
     df4:	30 0d       	add	r19, r0
     df6:	11 24       	eor	r1, r1
     df8:	33 2e       	mov	r3, r19
     dfa:	20 62       	ori	r18, 0x20	; 32
     dfc:	0c c0       	rjmp	.+24     	; 0xe16 <vfprintf+0xea>
     dfe:	8e 32       	cpi	r24, 0x2E	; 46
     e00:	21 f4       	brne	.+8      	; 0xe0a <vfprintf+0xde>
     e02:	26 fd       	sbrc	r18, 6
     e04:	5f c1       	rjmp	.+702    	; 0x10c4 <vfprintf+0x398>
     e06:	20 64       	ori	r18, 0x40	; 64
     e08:	06 c0       	rjmp	.+12     	; 0xe16 <vfprintf+0xea>
     e0a:	8c 36       	cpi	r24, 0x6C	; 108
     e0c:	11 f4       	brne	.+4      	; 0xe12 <vfprintf+0xe6>
     e0e:	20 68       	ori	r18, 0x80	; 128
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <vfprintf+0xea>
     e12:	88 36       	cpi	r24, 0x68	; 104
     e14:	41 f4       	brne	.+16     	; 0xe26 <vfprintf+0xfa>
     e16:	f6 01       	movw	r30, r12
     e18:	93 fd       	sbrc	r25, 3
     e1a:	85 91       	lpm	r24, Z+
     e1c:	93 ff       	sbrs	r25, 3
     e1e:	81 91       	ld	r24, Z+
     e20:	6f 01       	movw	r12, r30
     e22:	81 11       	cpse	r24, r1
     e24:	c1 cf       	rjmp	.-126    	; 0xda8 <vfprintf+0x7c>
     e26:	98 2f       	mov	r25, r24
     e28:	9f 7d       	andi	r25, 0xDF	; 223
     e2a:	95 54       	subi	r25, 0x45	; 69
     e2c:	93 30       	cpi	r25, 0x03	; 3
     e2e:	28 f4       	brcc	.+10     	; 0xe3a <vfprintf+0x10e>
     e30:	0c 5f       	subi	r16, 0xFC	; 252
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	ff e3       	ldi	r31, 0x3F	; 63
     e36:	f9 83       	std	Y+1, r31	; 0x01
     e38:	0d c0       	rjmp	.+26     	; 0xe54 <vfprintf+0x128>
     e3a:	83 36       	cpi	r24, 0x63	; 99
     e3c:	31 f0       	breq	.+12     	; 0xe4a <vfprintf+0x11e>
     e3e:	83 37       	cpi	r24, 0x73	; 115
     e40:	71 f0       	breq	.+28     	; 0xe5e <vfprintf+0x132>
     e42:	83 35       	cpi	r24, 0x53	; 83
     e44:	09 f0       	breq	.+2      	; 0xe48 <vfprintf+0x11c>
     e46:	57 c0       	rjmp	.+174    	; 0xef6 <vfprintf+0x1ca>
     e48:	21 c0       	rjmp	.+66     	; 0xe8c <vfprintf+0x160>
     e4a:	f8 01       	movw	r30, r16
     e4c:	80 81       	ld	r24, Z
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	0e 5f       	subi	r16, 0xFE	; 254
     e52:	1f 4f       	sbci	r17, 0xFF	; 255
     e54:	44 24       	eor	r4, r4
     e56:	43 94       	inc	r4
     e58:	51 2c       	mov	r5, r1
     e5a:	54 01       	movw	r10, r8
     e5c:	14 c0       	rjmp	.+40     	; 0xe86 <vfprintf+0x15a>
     e5e:	38 01       	movw	r6, r16
     e60:	f2 e0       	ldi	r31, 0x02	; 2
     e62:	6f 0e       	add	r6, r31
     e64:	71 1c       	adc	r7, r1
     e66:	f8 01       	movw	r30, r16
     e68:	a0 80       	ld	r10, Z
     e6a:	b1 80       	ldd	r11, Z+1	; 0x01
     e6c:	26 ff       	sbrs	r18, 6
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <vfprintf+0x14a>
     e70:	65 2d       	mov	r22, r5
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0x14e>
     e76:	6f ef       	ldi	r22, 0xFF	; 255
     e78:	7f ef       	ldi	r23, 0xFF	; 255
     e7a:	c5 01       	movw	r24, r10
     e7c:	2c 87       	std	Y+12, r18	; 0x0c
     e7e:	49 d1       	rcall	.+658    	; 0x1112 <strnlen>
     e80:	2c 01       	movw	r4, r24
     e82:	83 01       	movw	r16, r6
     e84:	2c 85       	ldd	r18, Y+12	; 0x0c
     e86:	2f 77       	andi	r18, 0x7F	; 127
     e88:	22 2e       	mov	r2, r18
     e8a:	16 c0       	rjmp	.+44     	; 0xeb8 <vfprintf+0x18c>
     e8c:	38 01       	movw	r6, r16
     e8e:	f2 e0       	ldi	r31, 0x02	; 2
     e90:	6f 0e       	add	r6, r31
     e92:	71 1c       	adc	r7, r1
     e94:	f8 01       	movw	r30, r16
     e96:	a0 80       	ld	r10, Z
     e98:	b1 80       	ldd	r11, Z+1	; 0x01
     e9a:	26 ff       	sbrs	r18, 6
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <vfprintf+0x178>
     e9e:	65 2d       	mov	r22, r5
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <vfprintf+0x17c>
     ea4:	6f ef       	ldi	r22, 0xFF	; 255
     ea6:	7f ef       	ldi	r23, 0xFF	; 255
     ea8:	c5 01       	movw	r24, r10
     eaa:	2c 87       	std	Y+12, r18	; 0x0c
     eac:	27 d1       	rcall	.+590    	; 0x10fc <strnlen_P>
     eae:	2c 01       	movw	r4, r24
     eb0:	2c 85       	ldd	r18, Y+12	; 0x0c
     eb2:	20 68       	ori	r18, 0x80	; 128
     eb4:	22 2e       	mov	r2, r18
     eb6:	83 01       	movw	r16, r6
     eb8:	23 fc       	sbrc	r2, 3
     eba:	19 c0       	rjmp	.+50     	; 0xeee <vfprintf+0x1c2>
     ebc:	83 2d       	mov	r24, r3
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	48 16       	cp	r4, r24
     ec2:	59 06       	cpc	r5, r25
     ec4:	a0 f4       	brcc	.+40     	; 0xeee <vfprintf+0x1c2>
     ec6:	b7 01       	movw	r22, r14
     ec8:	80 e2       	ldi	r24, 0x20	; 32
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	2d d1       	rcall	.+602    	; 0x1128 <fputc>
     ece:	3a 94       	dec	r3
     ed0:	f5 cf       	rjmp	.-22     	; 0xebc <vfprintf+0x190>
     ed2:	f5 01       	movw	r30, r10
     ed4:	27 fc       	sbrc	r2, 7
     ed6:	85 91       	lpm	r24, Z+
     ed8:	27 fe       	sbrs	r2, 7
     eda:	81 91       	ld	r24, Z+
     edc:	5f 01       	movw	r10, r30
     ede:	b7 01       	movw	r22, r14
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	22 d1       	rcall	.+580    	; 0x1128 <fputc>
     ee4:	31 10       	cpse	r3, r1
     ee6:	3a 94       	dec	r3
     ee8:	f1 e0       	ldi	r31, 0x01	; 1
     eea:	4f 1a       	sub	r4, r31
     eec:	51 08       	sbc	r5, r1
     eee:	41 14       	cp	r4, r1
     ef0:	51 04       	cpc	r5, r1
     ef2:	79 f7       	brne	.-34     	; 0xed2 <vfprintf+0x1a6>
     ef4:	de c0       	rjmp	.+444    	; 0x10b2 <vfprintf+0x386>
     ef6:	84 36       	cpi	r24, 0x64	; 100
     ef8:	11 f0       	breq	.+4      	; 0xefe <vfprintf+0x1d2>
     efa:	89 36       	cpi	r24, 0x69	; 105
     efc:	31 f5       	brne	.+76     	; 0xf4a <vfprintf+0x21e>
     efe:	f8 01       	movw	r30, r16
     f00:	27 ff       	sbrs	r18, 7
     f02:	07 c0       	rjmp	.+14     	; 0xf12 <vfprintf+0x1e6>
     f04:	60 81       	ld	r22, Z
     f06:	71 81       	ldd	r23, Z+1	; 0x01
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	93 81       	ldd	r25, Z+3	; 0x03
     f0c:	0c 5f       	subi	r16, 0xFC	; 252
     f0e:	1f 4f       	sbci	r17, 0xFF	; 255
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <vfprintf+0x1f6>
     f12:	60 81       	ld	r22, Z
     f14:	71 81       	ldd	r23, Z+1	; 0x01
     f16:	88 27       	eor	r24, r24
     f18:	77 fd       	sbrc	r23, 7
     f1a:	80 95       	com	r24
     f1c:	98 2f       	mov	r25, r24
     f1e:	0e 5f       	subi	r16, 0xFE	; 254
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
     f22:	2f 76       	andi	r18, 0x6F	; 111
     f24:	b2 2e       	mov	r11, r18
     f26:	97 ff       	sbrs	r25, 7
     f28:	09 c0       	rjmp	.+18     	; 0xf3c <vfprintf+0x210>
     f2a:	90 95       	com	r25
     f2c:	80 95       	com	r24
     f2e:	70 95       	com	r23
     f30:	61 95       	neg	r22
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	8f 4f       	sbci	r24, 0xFF	; 255
     f36:	9f 4f       	sbci	r25, 0xFF	; 255
     f38:	20 68       	ori	r18, 0x80	; 128
     f3a:	b2 2e       	mov	r11, r18
     f3c:	2a e0       	ldi	r18, 0x0A	; 10
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	a4 01       	movw	r20, r8
     f42:	24 d1       	rcall	.+584    	; 0x118c <__ultoa_invert>
     f44:	a8 2e       	mov	r10, r24
     f46:	a8 18       	sub	r10, r8
     f48:	43 c0       	rjmp	.+134    	; 0xfd0 <vfprintf+0x2a4>
     f4a:	85 37       	cpi	r24, 0x75	; 117
     f4c:	29 f4       	brne	.+10     	; 0xf58 <vfprintf+0x22c>
     f4e:	2f 7e       	andi	r18, 0xEF	; 239
     f50:	b2 2e       	mov	r11, r18
     f52:	2a e0       	ldi	r18, 0x0A	; 10
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	25 c0       	rjmp	.+74     	; 0xfa2 <vfprintf+0x276>
     f58:	f2 2f       	mov	r31, r18
     f5a:	f9 7f       	andi	r31, 0xF9	; 249
     f5c:	bf 2e       	mov	r11, r31
     f5e:	8f 36       	cpi	r24, 0x6F	; 111
     f60:	c1 f0       	breq	.+48     	; 0xf92 <vfprintf+0x266>
     f62:	18 f4       	brcc	.+6      	; 0xf6a <vfprintf+0x23e>
     f64:	88 35       	cpi	r24, 0x58	; 88
     f66:	79 f0       	breq	.+30     	; 0xf86 <vfprintf+0x25a>
     f68:	ad c0       	rjmp	.+346    	; 0x10c4 <vfprintf+0x398>
     f6a:	80 37       	cpi	r24, 0x70	; 112
     f6c:	19 f0       	breq	.+6      	; 0xf74 <vfprintf+0x248>
     f6e:	88 37       	cpi	r24, 0x78	; 120
     f70:	21 f0       	breq	.+8      	; 0xf7a <vfprintf+0x24e>
     f72:	a8 c0       	rjmp	.+336    	; 0x10c4 <vfprintf+0x398>
     f74:	2f 2f       	mov	r18, r31
     f76:	20 61       	ori	r18, 0x10	; 16
     f78:	b2 2e       	mov	r11, r18
     f7a:	b4 fe       	sbrs	r11, 4
     f7c:	0d c0       	rjmp	.+26     	; 0xf98 <vfprintf+0x26c>
     f7e:	8b 2d       	mov	r24, r11
     f80:	84 60       	ori	r24, 0x04	; 4
     f82:	b8 2e       	mov	r11, r24
     f84:	09 c0       	rjmp	.+18     	; 0xf98 <vfprintf+0x26c>
     f86:	24 ff       	sbrs	r18, 4
     f88:	0a c0       	rjmp	.+20     	; 0xf9e <vfprintf+0x272>
     f8a:	9f 2f       	mov	r25, r31
     f8c:	96 60       	ori	r25, 0x06	; 6
     f8e:	b9 2e       	mov	r11, r25
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <vfprintf+0x272>
     f92:	28 e0       	ldi	r18, 0x08	; 8
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <vfprintf+0x276>
     f98:	20 e1       	ldi	r18, 0x10	; 16
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <vfprintf+0x276>
     f9e:	20 e1       	ldi	r18, 0x10	; 16
     fa0:	32 e0       	ldi	r19, 0x02	; 2
     fa2:	f8 01       	movw	r30, r16
     fa4:	b7 fe       	sbrs	r11, 7
     fa6:	07 c0       	rjmp	.+14     	; 0xfb6 <vfprintf+0x28a>
     fa8:	60 81       	ld	r22, Z
     faa:	71 81       	ldd	r23, Z+1	; 0x01
     fac:	82 81       	ldd	r24, Z+2	; 0x02
     fae:	93 81       	ldd	r25, Z+3	; 0x03
     fb0:	0c 5f       	subi	r16, 0xFC	; 252
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	06 c0       	rjmp	.+12     	; 0xfc2 <vfprintf+0x296>
     fb6:	60 81       	ld	r22, Z
     fb8:	71 81       	ldd	r23, Z+1	; 0x01
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 5f       	subi	r16, 0xFE	; 254
     fc0:	1f 4f       	sbci	r17, 0xFF	; 255
     fc2:	a4 01       	movw	r20, r8
     fc4:	e3 d0       	rcall	.+454    	; 0x118c <__ultoa_invert>
     fc6:	a8 2e       	mov	r10, r24
     fc8:	a8 18       	sub	r10, r8
     fca:	fb 2d       	mov	r31, r11
     fcc:	ff 77       	andi	r31, 0x7F	; 127
     fce:	bf 2e       	mov	r11, r31
     fd0:	b6 fe       	sbrs	r11, 6
     fd2:	0b c0       	rjmp	.+22     	; 0xfea <vfprintf+0x2be>
     fd4:	2b 2d       	mov	r18, r11
     fd6:	2e 7f       	andi	r18, 0xFE	; 254
     fd8:	a5 14       	cp	r10, r5
     fda:	50 f4       	brcc	.+20     	; 0xff0 <vfprintf+0x2c4>
     fdc:	b4 fe       	sbrs	r11, 4
     fde:	0a c0       	rjmp	.+20     	; 0xff4 <vfprintf+0x2c8>
     fe0:	b2 fc       	sbrc	r11, 2
     fe2:	08 c0       	rjmp	.+16     	; 0xff4 <vfprintf+0x2c8>
     fe4:	2b 2d       	mov	r18, r11
     fe6:	2e 7e       	andi	r18, 0xEE	; 238
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <vfprintf+0x2c8>
     fea:	7a 2c       	mov	r7, r10
     fec:	2b 2d       	mov	r18, r11
     fee:	03 c0       	rjmp	.+6      	; 0xff6 <vfprintf+0x2ca>
     ff0:	7a 2c       	mov	r7, r10
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <vfprintf+0x2ca>
     ff4:	75 2c       	mov	r7, r5
     ff6:	24 ff       	sbrs	r18, 4
     ff8:	0d c0       	rjmp	.+26     	; 0x1014 <vfprintf+0x2e8>
     ffa:	fe 01       	movw	r30, r28
     ffc:	ea 0d       	add	r30, r10
     ffe:	f1 1d       	adc	r31, r1
    1000:	80 81       	ld	r24, Z
    1002:	80 33       	cpi	r24, 0x30	; 48
    1004:	11 f4       	brne	.+4      	; 0x100a <vfprintf+0x2de>
    1006:	29 7e       	andi	r18, 0xE9	; 233
    1008:	09 c0       	rjmp	.+18     	; 0x101c <vfprintf+0x2f0>
    100a:	22 ff       	sbrs	r18, 2
    100c:	06 c0       	rjmp	.+12     	; 0x101a <vfprintf+0x2ee>
    100e:	73 94       	inc	r7
    1010:	73 94       	inc	r7
    1012:	04 c0       	rjmp	.+8      	; 0x101c <vfprintf+0x2f0>
    1014:	82 2f       	mov	r24, r18
    1016:	86 78       	andi	r24, 0x86	; 134
    1018:	09 f0       	breq	.+2      	; 0x101c <vfprintf+0x2f0>
    101a:	73 94       	inc	r7
    101c:	23 fd       	sbrc	r18, 3
    101e:	12 c0       	rjmp	.+36     	; 0x1044 <vfprintf+0x318>
    1020:	20 ff       	sbrs	r18, 0
    1022:	06 c0       	rjmp	.+12     	; 0x1030 <vfprintf+0x304>
    1024:	5a 2c       	mov	r5, r10
    1026:	73 14       	cp	r7, r3
    1028:	18 f4       	brcc	.+6      	; 0x1030 <vfprintf+0x304>
    102a:	53 0c       	add	r5, r3
    102c:	57 18       	sub	r5, r7
    102e:	73 2c       	mov	r7, r3
    1030:	73 14       	cp	r7, r3
    1032:	60 f4       	brcc	.+24     	; 0x104c <vfprintf+0x320>
    1034:	b7 01       	movw	r22, r14
    1036:	80 e2       	ldi	r24, 0x20	; 32
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	2c 87       	std	Y+12, r18	; 0x0c
    103c:	75 d0       	rcall	.+234    	; 0x1128 <fputc>
    103e:	73 94       	inc	r7
    1040:	2c 85       	ldd	r18, Y+12	; 0x0c
    1042:	f6 cf       	rjmp	.-20     	; 0x1030 <vfprintf+0x304>
    1044:	73 14       	cp	r7, r3
    1046:	10 f4       	brcc	.+4      	; 0x104c <vfprintf+0x320>
    1048:	37 18       	sub	r3, r7
    104a:	01 c0       	rjmp	.+2      	; 0x104e <vfprintf+0x322>
    104c:	31 2c       	mov	r3, r1
    104e:	24 ff       	sbrs	r18, 4
    1050:	11 c0       	rjmp	.+34     	; 0x1074 <vfprintf+0x348>
    1052:	b7 01       	movw	r22, r14
    1054:	80 e3       	ldi	r24, 0x30	; 48
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	2c 87       	std	Y+12, r18	; 0x0c
    105a:	66 d0       	rcall	.+204    	; 0x1128 <fputc>
    105c:	2c 85       	ldd	r18, Y+12	; 0x0c
    105e:	22 ff       	sbrs	r18, 2
    1060:	16 c0       	rjmp	.+44     	; 0x108e <vfprintf+0x362>
    1062:	21 ff       	sbrs	r18, 1
    1064:	03 c0       	rjmp	.+6      	; 0x106c <vfprintf+0x340>
    1066:	88 e5       	ldi	r24, 0x58	; 88
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <vfprintf+0x344>
    106c:	88 e7       	ldi	r24, 0x78	; 120
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	b7 01       	movw	r22, r14
    1072:	0c c0       	rjmp	.+24     	; 0x108c <vfprintf+0x360>
    1074:	82 2f       	mov	r24, r18
    1076:	86 78       	andi	r24, 0x86	; 134
    1078:	51 f0       	breq	.+20     	; 0x108e <vfprintf+0x362>
    107a:	21 fd       	sbrc	r18, 1
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <vfprintf+0x356>
    107e:	80 e2       	ldi	r24, 0x20	; 32
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <vfprintf+0x358>
    1082:	8b e2       	ldi	r24, 0x2B	; 43
    1084:	27 fd       	sbrc	r18, 7
    1086:	8d e2       	ldi	r24, 0x2D	; 45
    1088:	b7 01       	movw	r22, r14
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	4d d0       	rcall	.+154    	; 0x1128 <fputc>
    108e:	a5 14       	cp	r10, r5
    1090:	30 f4       	brcc	.+12     	; 0x109e <vfprintf+0x372>
    1092:	b7 01       	movw	r22, r14
    1094:	80 e3       	ldi	r24, 0x30	; 48
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	47 d0       	rcall	.+142    	; 0x1128 <fputc>
    109a:	5a 94       	dec	r5
    109c:	f8 cf       	rjmp	.-16     	; 0x108e <vfprintf+0x362>
    109e:	aa 94       	dec	r10
    10a0:	f4 01       	movw	r30, r8
    10a2:	ea 0d       	add	r30, r10
    10a4:	f1 1d       	adc	r31, r1
    10a6:	80 81       	ld	r24, Z
    10a8:	b7 01       	movw	r22, r14
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	3d d0       	rcall	.+122    	; 0x1128 <fputc>
    10ae:	a1 10       	cpse	r10, r1
    10b0:	f6 cf       	rjmp	.-20     	; 0x109e <vfprintf+0x372>
    10b2:	33 20       	and	r3, r3
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <vfprintf+0x38c>
    10b6:	5d ce       	rjmp	.-838    	; 0xd72 <vfprintf+0x46>
    10b8:	b7 01       	movw	r22, r14
    10ba:	80 e2       	ldi	r24, 0x20	; 32
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	34 d0       	rcall	.+104    	; 0x1128 <fputc>
    10c0:	3a 94       	dec	r3
    10c2:	f7 cf       	rjmp	.-18     	; 0x10b2 <vfprintf+0x386>
    10c4:	f7 01       	movw	r30, r14
    10c6:	86 81       	ldd	r24, Z+6	; 0x06
    10c8:	97 81       	ldd	r25, Z+7	; 0x07
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <vfprintf+0x3a4>
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    10ce:	9f ef       	ldi	r25, 0xFF	; 255
    10d0:	2c 96       	adiw	r28, 0x0c	; 12
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	bf 90       	pop	r11
    10e8:	af 90       	pop	r10
    10ea:	9f 90       	pop	r9
    10ec:	8f 90       	pop	r8
    10ee:	7f 90       	pop	r7
    10f0:	6f 90       	pop	r6
    10f2:	5f 90       	pop	r5
    10f4:	4f 90       	pop	r4
    10f6:	3f 90       	pop	r3
    10f8:	2f 90       	pop	r2
    10fa:	08 95       	ret

000010fc <strnlen_P>:
    10fc:	fc 01       	movw	r30, r24
    10fe:	05 90       	lpm	r0, Z+
    1100:	61 50       	subi	r22, 0x01	; 1
    1102:	70 40       	sbci	r23, 0x00	; 0
    1104:	01 10       	cpse	r0, r1
    1106:	d8 f7       	brcc	.-10     	; 0x10fe <strnlen_P+0x2>
    1108:	80 95       	com	r24
    110a:	90 95       	com	r25
    110c:	8e 0f       	add	r24, r30
    110e:	9f 1f       	adc	r25, r31
    1110:	08 95       	ret

00001112 <strnlen>:
    1112:	fc 01       	movw	r30, r24
    1114:	61 50       	subi	r22, 0x01	; 1
    1116:	70 40       	sbci	r23, 0x00	; 0
    1118:	01 90       	ld	r0, Z+
    111a:	01 10       	cpse	r0, r1
    111c:	d8 f7       	brcc	.-10     	; 0x1114 <strnlen+0x2>
    111e:	80 95       	com	r24
    1120:	90 95       	com	r25
    1122:	8e 0f       	add	r24, r30
    1124:	9f 1f       	adc	r25, r31
    1126:	08 95       	ret

00001128 <fputc>:
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	18 2f       	mov	r17, r24
    1132:	09 2f       	mov	r16, r25
    1134:	eb 01       	movw	r28, r22
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	81 fd       	sbrc	r24, 1
    113a:	03 c0       	rjmp	.+6      	; 0x1142 <fputc+0x1a>
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	9f ef       	ldi	r25, 0xFF	; 255
    1140:	20 c0       	rjmp	.+64     	; 0x1182 <fputc+0x5a>
    1142:	82 ff       	sbrs	r24, 2
    1144:	10 c0       	rjmp	.+32     	; 0x1166 <fputc+0x3e>
    1146:	4e 81       	ldd	r20, Y+6	; 0x06
    1148:	5f 81       	ldd	r21, Y+7	; 0x07
    114a:	2c 81       	ldd	r18, Y+4	; 0x04
    114c:	3d 81       	ldd	r19, Y+5	; 0x05
    114e:	42 17       	cp	r20, r18
    1150:	53 07       	cpc	r21, r19
    1152:	7c f4       	brge	.+30     	; 0x1172 <fputc+0x4a>
    1154:	e8 81       	ld	r30, Y
    1156:	f9 81       	ldd	r31, Y+1	; 0x01
    1158:	9f 01       	movw	r18, r30
    115a:	2f 5f       	subi	r18, 0xFF	; 255
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	28 83       	st	Y, r18
    1160:	39 83       	std	Y+1, r19	; 0x01
    1162:	10 83       	st	Z, r17
    1164:	06 c0       	rjmp	.+12     	; 0x1172 <fputc+0x4a>
    1166:	e8 85       	ldd	r30, Y+8	; 0x08
    1168:	f9 85       	ldd	r31, Y+9	; 0x09
    116a:	81 2f       	mov	r24, r17
    116c:	09 95       	icall
    116e:	89 2b       	or	r24, r25
    1170:	29 f7       	brne	.-54     	; 0x113c <fputc+0x14>
    1172:	2e 81       	ldd	r18, Y+6	; 0x06
    1174:	3f 81       	ldd	r19, Y+7	; 0x07
    1176:	2f 5f       	subi	r18, 0xFF	; 255
    1178:	3f 4f       	sbci	r19, 0xFF	; 255
    117a:	2e 83       	std	Y+6, r18	; 0x06
    117c:	3f 83       	std	Y+7, r19	; 0x07
    117e:	81 2f       	mov	r24, r17
    1180:	90 2f       	mov	r25, r16
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	08 95       	ret

0000118c <__ultoa_invert>:
    118c:	fa 01       	movw	r30, r20
    118e:	aa 27       	eor	r26, r26
    1190:	28 30       	cpi	r18, 0x08	; 8
    1192:	51 f1       	breq	.+84     	; 0x11e8 <__ultoa_invert+0x5c>
    1194:	20 31       	cpi	r18, 0x10	; 16
    1196:	81 f1       	breq	.+96     	; 0x11f8 <__ultoa_invert+0x6c>
    1198:	e8 94       	clt
    119a:	6f 93       	push	r22
    119c:	6e 7f       	andi	r22, 0xFE	; 254
    119e:	6e 5f       	subi	r22, 0xFE	; 254
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	8f 4f       	sbci	r24, 0xFF	; 255
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	af 4f       	sbci	r26, 0xFF	; 255
    11a8:	b1 e0       	ldi	r27, 0x01	; 1
    11aa:	3e d0       	rcall	.+124    	; 0x1228 <__ultoa_invert+0x9c>
    11ac:	b4 e0       	ldi	r27, 0x04	; 4
    11ae:	3c d0       	rcall	.+120    	; 0x1228 <__ultoa_invert+0x9c>
    11b0:	67 0f       	add	r22, r23
    11b2:	78 1f       	adc	r23, r24
    11b4:	89 1f       	adc	r24, r25
    11b6:	9a 1f       	adc	r25, r26
    11b8:	a1 1d       	adc	r26, r1
    11ba:	68 0f       	add	r22, r24
    11bc:	79 1f       	adc	r23, r25
    11be:	8a 1f       	adc	r24, r26
    11c0:	91 1d       	adc	r25, r1
    11c2:	a1 1d       	adc	r26, r1
    11c4:	6a 0f       	add	r22, r26
    11c6:	71 1d       	adc	r23, r1
    11c8:	81 1d       	adc	r24, r1
    11ca:	91 1d       	adc	r25, r1
    11cc:	a1 1d       	adc	r26, r1
    11ce:	20 d0       	rcall	.+64     	; 0x1210 <__ultoa_invert+0x84>
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <__ultoa_invert+0x48>
    11d2:	68 94       	set
    11d4:	3f 91       	pop	r19
    11d6:	2a e0       	ldi	r18, 0x0A	; 10
    11d8:	26 9f       	mul	r18, r22
    11da:	11 24       	eor	r1, r1
    11dc:	30 19       	sub	r19, r0
    11de:	30 5d       	subi	r19, 0xD0	; 208
    11e0:	31 93       	st	Z+, r19
    11e2:	de f6       	brtc	.-74     	; 0x119a <__ultoa_invert+0xe>
    11e4:	cf 01       	movw	r24, r30
    11e6:	08 95       	ret
    11e8:	46 2f       	mov	r20, r22
    11ea:	47 70       	andi	r20, 0x07	; 7
    11ec:	40 5d       	subi	r20, 0xD0	; 208
    11ee:	41 93       	st	Z+, r20
    11f0:	b3 e0       	ldi	r27, 0x03	; 3
    11f2:	0f d0       	rcall	.+30     	; 0x1212 <__ultoa_invert+0x86>
    11f4:	c9 f7       	brne	.-14     	; 0x11e8 <__ultoa_invert+0x5c>
    11f6:	f6 cf       	rjmp	.-20     	; 0x11e4 <__ultoa_invert+0x58>
    11f8:	46 2f       	mov	r20, r22
    11fa:	4f 70       	andi	r20, 0x0F	; 15
    11fc:	40 5d       	subi	r20, 0xD0	; 208
    11fe:	4a 33       	cpi	r20, 0x3A	; 58
    1200:	18 f0       	brcs	.+6      	; 0x1208 <__ultoa_invert+0x7c>
    1202:	49 5d       	subi	r20, 0xD9	; 217
    1204:	31 fd       	sbrc	r19, 1
    1206:	40 52       	subi	r20, 0x20	; 32
    1208:	41 93       	st	Z+, r20
    120a:	02 d0       	rcall	.+4      	; 0x1210 <__ultoa_invert+0x84>
    120c:	a9 f7       	brne	.-22     	; 0x11f8 <__ultoa_invert+0x6c>
    120e:	ea cf       	rjmp	.-44     	; 0x11e4 <__ultoa_invert+0x58>
    1210:	b4 e0       	ldi	r27, 0x04	; 4
    1212:	a6 95       	lsr	r26
    1214:	97 95       	ror	r25
    1216:	87 95       	ror	r24
    1218:	77 95       	ror	r23
    121a:	67 95       	ror	r22
    121c:	ba 95       	dec	r27
    121e:	c9 f7       	brne	.-14     	; 0x1212 <__ultoa_invert+0x86>
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	61 05       	cpc	r22, r1
    1224:	71 05       	cpc	r23, r1
    1226:	08 95       	ret
    1228:	9b 01       	movw	r18, r22
    122a:	ac 01       	movw	r20, r24
    122c:	0a 2e       	mov	r0, r26
    122e:	06 94       	lsr	r0
    1230:	57 95       	ror	r21
    1232:	47 95       	ror	r20
    1234:	37 95       	ror	r19
    1236:	27 95       	ror	r18
    1238:	ba 95       	dec	r27
    123a:	c9 f7       	brne	.-14     	; 0x122e <__ultoa_invert+0xa2>
    123c:	62 0f       	add	r22, r18
    123e:	73 1f       	adc	r23, r19
    1240:	84 1f       	adc	r24, r20
    1242:	95 1f       	adc	r25, r21
    1244:	a0 1d       	adc	r26, r0
    1246:	08 95       	ret

00001248 <_exit>:
    1248:	f8 94       	cli

0000124a <__stop_program>:
    124a:	ff cf       	rjmp	.-2      	; 0x124a <__stop_program>
