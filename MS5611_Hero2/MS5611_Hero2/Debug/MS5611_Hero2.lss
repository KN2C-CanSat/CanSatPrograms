
MS5611_Hero2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00802000  00001880  00001914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a5  00802026  00802026  0000193a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000193a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b8  00000000  00000000  00001996  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004fe4  00000000  00000000  00001b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f0c  00000000  00000000  00006b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003d1f  00000000  00000000  00007a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004f8  00000000  00000000  0000b760  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000276bd  00000000  00000000  0000bc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e3e  00000000  00000000  00033315  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00035153  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a29f  00000000  00000000  000352bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	17 c1       	rjmp	.+558    	; 0x234 <__bad_interrupt>
       6:	00 00       	nop
       8:	15 c1       	rjmp	.+554    	; 0x234 <__bad_interrupt>
       a:	00 00       	nop
       c:	13 c1       	rjmp	.+550    	; 0x234 <__bad_interrupt>
       e:	00 00       	nop
      10:	11 c1       	rjmp	.+546    	; 0x234 <__bad_interrupt>
      12:	00 00       	nop
      14:	0f c1       	rjmp	.+542    	; 0x234 <__bad_interrupt>
      16:	00 00       	nop
      18:	0d c1       	rjmp	.+538    	; 0x234 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0b c1       	rjmp	.+534    	; 0x234 <__bad_interrupt>
      1e:	00 00       	nop
      20:	09 c1       	rjmp	.+530    	; 0x234 <__bad_interrupt>
      22:	00 00       	nop
      24:	07 c1       	rjmp	.+526    	; 0x234 <__bad_interrupt>
      26:	00 00       	nop
      28:	05 c1       	rjmp	.+522    	; 0x234 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	03 c1       	rjmp	.+518    	; 0x234 <__bad_interrupt>
      2e:	00 00       	nop
      30:	01 c1       	rjmp	.+514    	; 0x234 <__bad_interrupt>
      32:	00 00       	nop
      34:	fd c6       	rjmp	.+3578   	; 0xe30 <__vector_13>
      36:	00 00       	nop
      38:	fd c0       	rjmp	.+506    	; 0x234 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fb c0       	rjmp	.+502    	; 0x234 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f9 c0       	rjmp	.+498    	; 0x234 <__bad_interrupt>
      42:	00 00       	nop
      44:	f7 c0       	rjmp	.+494    	; 0x234 <__bad_interrupt>
      46:	00 00       	nop
      48:	f5 c0       	rjmp	.+490    	; 0x234 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f3 c0       	rjmp	.+486    	; 0x234 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f1 c0       	rjmp	.+482    	; 0x234 <__bad_interrupt>
      52:	00 00       	nop
      54:	ef c0       	rjmp	.+478    	; 0x234 <__bad_interrupt>
      56:	00 00       	nop
      58:	ed c0       	rjmp	.+474    	; 0x234 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	eb c0       	rjmp	.+470    	; 0x234 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e9 c0       	rjmp	.+466    	; 0x234 <__bad_interrupt>
      62:	00 00       	nop
      64:	e7 c0       	rjmp	.+462    	; 0x234 <__bad_interrupt>
      66:	00 00       	nop
      68:	e5 c0       	rjmp	.+458    	; 0x234 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e3 c0       	rjmp	.+454    	; 0x234 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e1 c0       	rjmp	.+450    	; 0x234 <__bad_interrupt>
      72:	00 00       	nop
      74:	df c0       	rjmp	.+446    	; 0x234 <__bad_interrupt>
      76:	00 00       	nop
      78:	dd c0       	rjmp	.+442    	; 0x234 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	db c0       	rjmp	.+438    	; 0x234 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d9 c0       	rjmp	.+434    	; 0x234 <__bad_interrupt>
      82:	00 00       	nop
      84:	d7 c0       	rjmp	.+430    	; 0x234 <__bad_interrupt>
      86:	00 00       	nop
      88:	d5 c0       	rjmp	.+426    	; 0x234 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d3 c0       	rjmp	.+422    	; 0x234 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d1 c0       	rjmp	.+418    	; 0x234 <__bad_interrupt>
      92:	00 00       	nop
      94:	cf c0       	rjmp	.+414    	; 0x234 <__bad_interrupt>
      96:	00 00       	nop
      98:	cd c0       	rjmp	.+410    	; 0x234 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cb c0       	rjmp	.+406    	; 0x234 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c9 c0       	rjmp	.+402    	; 0x234 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c7 c0       	rjmp	.+398    	; 0x234 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c5 c0       	rjmp	.+394    	; 0x234 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c3 c0       	rjmp	.+390    	; 0x234 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e4 c6       	rjmp	.+3528   	; 0xe7a <__vector_44>
      b2:	00 00       	nop
      b4:	bf c0       	rjmp	.+382    	; 0x234 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bd c0       	rjmp	.+378    	; 0x234 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	bb c0       	rjmp	.+374    	; 0x234 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b9 c0       	rjmp	.+370    	; 0x234 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b7 c0       	rjmp	.+366    	; 0x234 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b5 c0       	rjmp	.+362    	; 0x234 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b3 c0       	rjmp	.+358    	; 0x234 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b1 c0       	rjmp	.+354    	; 0x234 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	af c0       	rjmp	.+350    	; 0x234 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ad c0       	rjmp	.+346    	; 0x234 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ab c0       	rjmp	.+342    	; 0x234 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a9 c0       	rjmp	.+338    	; 0x234 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a7 c0       	rjmp	.+334    	; 0x234 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a5 c0       	rjmp	.+330    	; 0x234 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a3 c0       	rjmp	.+326    	; 0x234 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a1 c0       	rjmp	.+322    	; 0x234 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	9f c0       	rjmp	.+318    	; 0x234 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9d c0       	rjmp	.+314    	; 0x234 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9b c0       	rjmp	.+310    	; 0x234 <__bad_interrupt>
      fe:	00 00       	nop
     100:	99 c0       	rjmp	.+306    	; 0x234 <__bad_interrupt>
     102:	00 00       	nop
     104:	97 c0       	rjmp	.+302    	; 0x234 <__bad_interrupt>
     106:	00 00       	nop
     108:	95 c0       	rjmp	.+298    	; 0x234 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	93 c0       	rjmp	.+294    	; 0x234 <__bad_interrupt>
     10e:	00 00       	nop
     110:	91 c0       	rjmp	.+290    	; 0x234 <__bad_interrupt>
     112:	00 00       	nop
     114:	8f c0       	rjmp	.+286    	; 0x234 <__bad_interrupt>
     116:	00 00       	nop
     118:	8d c0       	rjmp	.+282    	; 0x234 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8b c0       	rjmp	.+278    	; 0x234 <__bad_interrupt>
     11e:	00 00       	nop
     120:	89 c0       	rjmp	.+274    	; 0x234 <__bad_interrupt>
     122:	00 00       	nop
     124:	87 c0       	rjmp	.+270    	; 0x234 <__bad_interrupt>
     126:	00 00       	nop
     128:	85 c0       	rjmp	.+266    	; 0x234 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	83 c0       	rjmp	.+262    	; 0x234 <__bad_interrupt>
     12e:	00 00       	nop
     130:	81 c0       	rjmp	.+258    	; 0x234 <__bad_interrupt>
     132:	00 00       	nop
     134:	7f c0       	rjmp	.+254    	; 0x234 <__bad_interrupt>
     136:	00 00       	nop
     138:	7d c0       	rjmp	.+250    	; 0x234 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	7b c0       	rjmp	.+246    	; 0x234 <__bad_interrupt>
     13e:	00 00       	nop
     140:	79 c0       	rjmp	.+242    	; 0x234 <__bad_interrupt>
     142:	00 00       	nop
     144:	77 c0       	rjmp	.+238    	; 0x234 <__bad_interrupt>
     146:	00 00       	nop
     148:	75 c0       	rjmp	.+234    	; 0x234 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	73 c0       	rjmp	.+230    	; 0x234 <__bad_interrupt>
     14e:	00 00       	nop
     150:	71 c0       	rjmp	.+226    	; 0x234 <__bad_interrupt>
     152:	00 00       	nop
     154:	6f c0       	rjmp	.+222    	; 0x234 <__bad_interrupt>
     156:	00 00       	nop
     158:	6d c0       	rjmp	.+218    	; 0x234 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	6b c0       	rjmp	.+214    	; 0x234 <__bad_interrupt>
     15e:	00 00       	nop
     160:	69 c0       	rjmp	.+210    	; 0x234 <__bad_interrupt>
     162:	00 00       	nop
     164:	67 c0       	rjmp	.+206    	; 0x234 <__bad_interrupt>
     166:	00 00       	nop
     168:	65 c0       	rjmp	.+202    	; 0x234 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	63 c0       	rjmp	.+198    	; 0x234 <__bad_interrupt>
     16e:	00 00       	nop
     170:	61 c0       	rjmp	.+194    	; 0x234 <__bad_interrupt>
     172:	00 00       	nop
     174:	5f c0       	rjmp	.+190    	; 0x234 <__bad_interrupt>
     176:	00 00       	nop
     178:	5d c0       	rjmp	.+186    	; 0x234 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5b c0       	rjmp	.+182    	; 0x234 <__bad_interrupt>
     17e:	00 00       	nop
     180:	59 c0       	rjmp	.+178    	; 0x234 <__bad_interrupt>
     182:	00 00       	nop
     184:	57 c0       	rjmp	.+174    	; 0x234 <__bad_interrupt>
     186:	00 00       	nop
     188:	55 c0       	rjmp	.+170    	; 0x234 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	53 c0       	rjmp	.+166    	; 0x234 <__bad_interrupt>
     18e:	00 00       	nop
     190:	51 c0       	rjmp	.+162    	; 0x234 <__bad_interrupt>
     192:	00 00       	nop
     194:	4f c0       	rjmp	.+158    	; 0x234 <__bad_interrupt>
     196:	00 00       	nop
     198:	4d c0       	rjmp	.+154    	; 0x234 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4b c0       	rjmp	.+150    	; 0x234 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	49 c0       	rjmp	.+146    	; 0x234 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	47 c0       	rjmp	.+142    	; 0x234 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	45 c0       	rjmp	.+138    	; 0x234 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	43 c0       	rjmp	.+134    	; 0x234 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	41 c0       	rjmp	.+130    	; 0x234 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	3f c0       	rjmp	.+126    	; 0x234 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3d c0       	rjmp	.+122    	; 0x234 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3b c0       	rjmp	.+118    	; 0x234 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	39 c0       	rjmp	.+114    	; 0x234 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	37 c0       	rjmp	.+110    	; 0x234 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	35 c0       	rjmp	.+106    	; 0x234 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	33 c0       	rjmp	.+102    	; 0x234 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	31 c0       	rjmp	.+98     	; 0x234 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	2f c0       	rjmp	.+94     	; 0x234 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2d c0       	rjmp	.+90     	; 0x234 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2b c0       	rjmp	.+86     	; 0x234 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	29 c0       	rjmp	.+82     	; 0x234 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	27 c0       	rjmp	.+78     	; 0x234 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	25 c0       	rjmp	.+74     	; 0x234 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	23 c0       	rjmp	.+70     	; 0x234 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	21 c0       	rjmp	.+66     	; 0x234 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	1f c0       	rjmp	.+62     	; 0x234 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1d c0       	rjmp	.+58     	; 0x234 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e0 e8       	ldi	r30, 0x80	; 128
     210:	f8 e1       	ldi	r31, 0x18	; 24
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a6 32       	cpi	r26, 0x26	; 38
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	20 e2       	ldi	r18, 0x20	; 32
     220:	a6 e2       	ldi	r26, 0x26	; 38
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	ab 3c       	cpi	r26, 0xCB	; 203
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	b6 d5       	rcall	.+2924   	; 0xd9c <main>
     230:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <_exit>

00000234 <__bad_interrupt>:
     234:	e5 ce       	rjmp	.-566    	; 0x0 <__vectors>

00000236 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     236:	fc 01       	movw	r30, r24
     238:	81 81       	ldd	r24, Z+1	; 0x01
     23a:	85 ff       	sbrs	r24, 5
     23c:	fd cf       	rjmp	.-6      	; 0x238 <usart_putchar+0x2>
     23e:	60 83       	st	Z, r22
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	08 95       	ret

00000246 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     246:	4f 92       	push	r4
     248:	5f 92       	push	r5
     24a:	6f 92       	push	r6
     24c:	7f 92       	push	r7
     24e:	8f 92       	push	r8
     250:	9f 92       	push	r9
     252:	af 92       	push	r10
     254:	bf 92       	push	r11
     256:	cf 92       	push	r12
     258:	df 92       	push	r13
     25a:	ef 92       	push	r14
     25c:	ff 92       	push	r15
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
     268:	4a 01       	movw	r8, r20
     26a:	5b 01       	movw	r10, r22
     26c:	28 01       	movw	r4, r16
     26e:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     270:	d9 01       	movw	r26, r18
     272:	c8 01       	movw	r24, r16
     274:	68 94       	set
     276:	12 f8       	bld	r1, 2
     278:	b6 95       	lsr	r27
     27a:	a7 95       	ror	r26
     27c:	97 95       	ror	r25
     27e:	87 95       	ror	r24
     280:	16 94       	lsr	r1
     282:	d1 f7       	brne	.-12     	; 0x278 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     284:	b9 01       	movw	r22, r18
     286:	a8 01       	movw	r20, r16
     288:	03 2e       	mov	r0, r19
     28a:	36 e1       	ldi	r19, 0x16	; 22
     28c:	76 95       	lsr	r23
     28e:	67 95       	ror	r22
     290:	57 95       	ror	r21
     292:	47 95       	ror	r20
     294:	3a 95       	dec	r19
     296:	d1 f7       	brne	.-12     	; 0x28c <usart_set_baudrate+0x46>
     298:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     29a:	2c 81       	ldd	r18, Y+4	; 0x04
     29c:	22 fd       	sbrc	r18, 2
     29e:	08 c0       	rjmp	.+16     	; 0x2b0 <usart_set_baudrate+0x6a>
		max_rate /= 2;
     2a0:	b6 95       	lsr	r27
     2a2:	a7 95       	ror	r26
     2a4:	97 95       	ror	r25
     2a6:	87 95       	ror	r24
		min_rate /= 2;
     2a8:	76 95       	lsr	r23
     2aa:	67 95       	ror	r22
     2ac:	57 95       	ror	r21
     2ae:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     2b0:	88 15       	cp	r24, r8
     2b2:	99 05       	cpc	r25, r9
     2b4:	aa 05       	cpc	r26, r10
     2b6:	bb 05       	cpc	r27, r11
     2b8:	08 f4       	brcc	.+2      	; 0x2bc <usart_set_baudrate+0x76>
     2ba:	a2 c0       	rjmp	.+324    	; 0x400 <usart_set_baudrate+0x1ba>
     2bc:	84 16       	cp	r8, r20
     2be:	95 06       	cpc	r9, r21
     2c0:	a6 06       	cpc	r10, r22
     2c2:	b7 06       	cpc	r11, r23
     2c4:	08 f4       	brcc	.+2      	; 0x2c8 <usart_set_baudrate+0x82>
     2c6:	9e c0       	rjmp	.+316    	; 0x404 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     2c8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ca:	82 fd       	sbrc	r24, 2
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <usart_set_baudrate+0x90>
		baud *= 2;
     2ce:	88 0c       	add	r8, r8
     2d0:	99 1c       	adc	r9, r9
     2d2:	aa 1c       	adc	r10, r10
     2d4:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     2d6:	c3 01       	movw	r24, r6
     2d8:	b2 01       	movw	r22, r4
     2da:	a5 01       	movw	r20, r10
     2dc:	94 01       	movw	r18, r8
     2de:	f3 d7       	rcall	.+4070   	; 0x12c6 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     2e0:	2f 3f       	cpi	r18, 0xFF	; 255
     2e2:	31 05       	cpc	r19, r1
     2e4:	41 05       	cpc	r20, r1
     2e6:	51 05       	cpc	r21, r1
     2e8:	08 f4       	brcc	.+2      	; 0x2ec <usart_set_baudrate+0xa6>
     2ea:	8e c0       	rjmp	.+284    	; 0x408 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     2ec:	c1 2c       	mov	r12, r1
     2ee:	d1 2c       	mov	r13, r1
     2f0:	76 01       	movw	r14, r12
     2f2:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     2f4:	19 ef       	ldi	r17, 0xF9	; 249
     2f6:	05 c0       	rjmp	.+10     	; 0x302 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
     2f8:	2c 15       	cp	r18, r12
     2fa:	3d 05       	cpc	r19, r13
     2fc:	4e 05       	cpc	r20, r14
     2fe:	5f 05       	cpc	r21, r15
     300:	68 f0       	brcs	.+26     	; 0x31c <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
     302:	cc 0c       	add	r12, r12
     304:	dd 1c       	adc	r13, r13
     306:	ee 1c       	adc	r14, r14
     308:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     30a:	1d 3f       	cpi	r17, 0xFD	; 253
     30c:	14 f4       	brge	.+4      	; 0x312 <usart_set_baudrate+0xcc>
			limit |= 1;
     30e:	68 94       	set
     310:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     312:	1f 5f       	subi	r17, 0xFF	; 255
     314:	17 30       	cpi	r17, 0x07	; 7
     316:	81 f7       	brne	.-32     	; 0x2f8 <usart_set_baudrate+0xb2>
     318:	21 2f       	mov	r18, r17
     31a:	4e c0       	rjmp	.+156    	; 0x3b8 <usart_set_baudrate+0x172>
     31c:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     31e:	11 23       	and	r17, r17
     320:	0c f0       	brlt	.+2      	; 0x324 <usart_set_baudrate+0xde>
     322:	4a c0       	rjmp	.+148    	; 0x3b8 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     324:	d5 01       	movw	r26, r10
     326:	c4 01       	movw	r24, r8
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	aa 1f       	adc	r26, r26
     32e:	bb 1f       	adc	r27, r27
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	aa 1f       	adc	r26, r26
     336:	bb 1f       	adc	r27, r27
     338:	88 0f       	add	r24, r24
     33a:	99 1f       	adc	r25, r25
     33c:	aa 1f       	adc	r26, r26
     33e:	bb 1f       	adc	r27, r27
     340:	48 1a       	sub	r4, r24
     342:	59 0a       	sbc	r5, r25
     344:	6a 0a       	sbc	r6, r26
     346:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     348:	1e 3f       	cpi	r17, 0xFE	; 254
     34a:	ec f4       	brge	.+58     	; 0x386 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     34c:	6d ef       	ldi	r22, 0xFD	; 253
     34e:	7f ef       	ldi	r23, 0xFF	; 255
     350:	61 1b       	sub	r22, r17
     352:	71 09       	sbc	r23, r1
     354:	17 fd       	sbrc	r17, 7
     356:	73 95       	inc	r23
     358:	04 c0       	rjmp	.+8      	; 0x362 <usart_set_baudrate+0x11c>
     35a:	44 0c       	add	r4, r4
     35c:	55 1c       	adc	r5, r5
     35e:	66 1c       	adc	r6, r6
     360:	77 1c       	adc	r7, r7
     362:	6a 95       	dec	r22
     364:	d2 f7       	brpl	.-12     	; 0x35a <usart_set_baudrate+0x114>
     366:	d5 01       	movw	r26, r10
     368:	c4 01       	movw	r24, r8
     36a:	b6 95       	lsr	r27
     36c:	a7 95       	ror	r26
     36e:	97 95       	ror	r25
     370:	87 95       	ror	r24
     372:	bc 01       	movw	r22, r24
     374:	cd 01       	movw	r24, r26
     376:	64 0d       	add	r22, r4
     378:	75 1d       	adc	r23, r5
     37a:	86 1d       	adc	r24, r6
     37c:	97 1d       	adc	r25, r7
     37e:	a5 01       	movw	r20, r10
     380:	94 01       	movw	r18, r8
     382:	a1 d7       	rcall	.+3906   	; 0x12c6 <__udivmodsi4>
     384:	34 c0       	rjmp	.+104    	; 0x3ee <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
     386:	23 e0       	ldi	r18, 0x03	; 3
     388:	21 0f       	add	r18, r17
     38a:	d5 01       	movw	r26, r10
     38c:	c4 01       	movw	r24, r8
     38e:	04 c0       	rjmp	.+8      	; 0x398 <usart_set_baudrate+0x152>
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	aa 1f       	adc	r26, r26
     396:	bb 1f       	adc	r27, r27
     398:	2a 95       	dec	r18
     39a:	d2 f7       	brpl	.-12     	; 0x390 <usart_set_baudrate+0x14a>
     39c:	9c 01       	movw	r18, r24
     39e:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     3a0:	b6 95       	lsr	r27
     3a2:	a7 95       	ror	r26
     3a4:	97 95       	ror	r25
     3a6:	87 95       	ror	r24
     3a8:	bc 01       	movw	r22, r24
     3aa:	cd 01       	movw	r24, r26
     3ac:	64 0d       	add	r22, r4
     3ae:	75 1d       	adc	r23, r5
     3b0:	86 1d       	adc	r24, r6
     3b2:	97 1d       	adc	r25, r7
     3b4:	88 d7       	rcall	.+3856   	; 0x12c6 <__udivmodsi4>
     3b6:	1b c0       	rjmp	.+54     	; 0x3ee <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     3b8:	2d 5f       	subi	r18, 0xFD	; 253
     3ba:	d5 01       	movw	r26, r10
     3bc:	c4 01       	movw	r24, r8
     3be:	04 c0       	rjmp	.+8      	; 0x3c8 <usart_set_baudrate+0x182>
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	aa 1f       	adc	r26, r26
     3c6:	bb 1f       	adc	r27, r27
     3c8:	2a 95       	dec	r18
     3ca:	d2 f7       	brpl	.-12     	; 0x3c0 <usart_set_baudrate+0x17a>
     3cc:	9c 01       	movw	r18, r24
     3ce:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     3d0:	b6 95       	lsr	r27
     3d2:	a7 95       	ror	r26
     3d4:	97 95       	ror	r25
     3d6:	87 95       	ror	r24
     3d8:	bc 01       	movw	r22, r24
     3da:	cd 01       	movw	r24, r26
     3dc:	64 0d       	add	r22, r4
     3de:	75 1d       	adc	r23, r5
     3e0:	86 1d       	adc	r24, r6
     3e2:	97 1d       	adc	r25, r7
     3e4:	70 d7       	rcall	.+3808   	; 0x12c6 <__udivmodsi4>
     3e6:	21 50       	subi	r18, 0x01	; 1
     3e8:	31 09       	sbc	r19, r1
     3ea:	41 09       	sbc	r20, r1
     3ec:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     3ee:	83 2f       	mov	r24, r19
     3f0:	8f 70       	andi	r24, 0x0F	; 15
     3f2:	12 95       	swap	r17
     3f4:	10 7f       	andi	r17, 0xF0	; 240
     3f6:	18 2b       	or	r17, r24
     3f8:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     3fa:	2e 83       	std	Y+6, r18	; 0x06

	return true;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	18 c0       	rjmp	.+48     	; 0x430 <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	16 c0       	rjmp	.+44     	; 0x430 <usart_set_baudrate+0x1ea>
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	14 c0       	rjmp	.+40     	; 0x430 <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     408:	d5 01       	movw	r26, r10
     40a:	c4 01       	movw	r24, r8
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	aa 1f       	adc	r26, r26
     412:	bb 1f       	adc	r27, r27
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	aa 1f       	adc	r26, r26
     41a:	bb 1f       	adc	r27, r27
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	aa 1f       	adc	r26, r26
     422:	bb 1f       	adc	r27, r27
     424:	48 1a       	sub	r4, r24
     426:	59 0a       	sbc	r5, r25
     428:	6a 0a       	sbc	r6, r26
     42a:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     42c:	19 ef       	ldi	r17, 0xF9	; 249
     42e:	8e cf       	rjmp	.-228    	; 0x34c <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	bf 90       	pop	r11
     442:	af 90       	pop	r10
     444:	9f 90       	pop	r9
     446:	8f 90       	pop	r8
     448:	7f 90       	pop	r7
     44a:	6f 90       	pop	r6
     44c:	5f 90       	pop	r5
     44e:	4f 90       	pop	r4
     450:	08 95       	ret

00000452 <UART_SEND>:
#define printf2pcs(T)      UART_SEND(sprintf(buffer,T));
#define printf2pc(T,...)   UART_SEND(sprintf(buffer,T,__VA_ARGS__));
void UART_SEND(int l);
char buffer[100];
void UART_SEND(int l)
{
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
	int i;
	for(i=0;i<l;i++)
     45a:	18 16       	cp	r1, r24
     45c:	19 06       	cpc	r1, r25
     45e:	64 f4       	brge	.+24     	; 0x478 <UART_SEND+0x26>
     460:	c7 e2       	ldi	r28, 0x27	; 39
     462:	d0 e2       	ldi	r29, 0x20	; 32
     464:	8c 01       	movw	r16, r24
     466:	09 5d       	subi	r16, 0xD9	; 217
     468:	1f 4d       	sbci	r17, 0xDF	; 223
	usart_putchar(&USARTD0,buffer[i]);
     46a:	69 91       	ld	r22, Y+
     46c:	80 ea       	ldi	r24, 0xA0	; 160
     46e:	99 e0       	ldi	r25, 0x09	; 9
     470:	e2 de       	rcall	.-572    	; 0x236 <usart_putchar>
void UART_SEND(int l);
char buffer[100];
void UART_SEND(int l)
{
	int i;
	for(i=0;i<l;i++)
     472:	c0 17       	cp	r28, r16
     474:	d1 07       	cpc	r29, r17
     476:	c9 f7       	brne	.-14     	; 0x46a <UART_SEND+0x18>
	usart_putchar(&USARTD0,buffer[i]);
	
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <calculate>:

void calculate(unsigned int C1,unsigned int C2,unsigned int C3,unsigned int C4,unsigned int C5,unsigned int C6,long int D1,long int D2)
{
     482:	2f 92       	push	r2
     484:	3f 92       	push	r3
     486:	4f 92       	push	r4
     488:	5f 92       	push	r5
     48a:	6f 92       	push	r6
     48c:	7f 92       	push	r7
     48e:	8f 92       	push	r8
     490:	9f 92       	push	r9
     492:	af 92       	push	r10
     494:	bf 92       	push	r11
     496:	cf 92       	push	r12
     498:	df 92       	push	r13
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	64 97       	sbiw	r28, 0x14	; 20
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	4c 01       	movw	r8, r24
     4b2:	3b 01       	movw	r6, r22
     4b4:	4d 87       	std	Y+13, r20	; 0x0d
     4b6:	5e 87       	std	Y+14, r21	; 0x0e
     4b8:	19 01       	movw	r2, r18
	float T2=0;
	
	long int pressure; //baraye chaap
	long int temperature;
	
	dT=(long int)D2-(long int)(C5*pow(2,8));
     4ba:	b8 01       	movw	r22, r16
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	ed d5       	rcall	.+3034   	; 0x109c <__floatunsisf>
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	40 e8       	ldi	r20, 0x80	; 128
     4c8:	53 e4       	ldi	r21, 0x43	; 67
     4ca:	9a d6       	rcall	.+3380   	; 0x1200 <__mulsf3>
     4cc:	b6 d5       	rcall	.+2924   	; 0x103a <__fixsfsi>
     4ce:	29 a5       	ldd	r18, Y+41	; 0x29
     4d0:	3a a5       	ldd	r19, Y+42	; 0x2a
     4d2:	4b a5       	ldd	r20, Y+43	; 0x2b
     4d4:	5c a5       	ldd	r21, Y+44	; 0x2c
     4d6:	26 1b       	sub	r18, r22
     4d8:	37 0b       	sbc	r19, r23
     4da:	48 0b       	sbc	r20, r24
     4dc:	59 0b       	sbc	r21, r25
     4de:	ca 01       	movw	r24, r20
     4e0:	b9 01       	movw	r22, r18
	TEMP=(2000+(C6/(float)pow(2,23))*dT)/100;
     4e2:	de d5       	rcall	.+3004   	; 0x10a0 <__floatsisf>
     4e4:	69 83       	std	Y+1, r22	; 0x01
     4e6:	7a 83       	std	Y+2, r23	; 0x02
     4e8:	8b 83       	std	Y+3, r24	; 0x03
     4ea:	9c 83       	std	Y+4, r25	; 0x04
     4ec:	b7 01       	movw	r22, r14
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	d4 d5       	rcall	.+2984   	; 0x109c <__floatunsisf>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	54 e3       	ldi	r21, 0x34	; 52
     4fc:	81 d6       	rcall	.+3330   	; 0x1200 <__mulsf3>
     4fe:	29 81       	ldd	r18, Y+1	; 0x01
     500:	3a 81       	ldd	r19, Y+2	; 0x02
     502:	4b 81       	ldd	r20, Y+3	; 0x03
     504:	5c 81       	ldd	r21, Y+4	; 0x04
     506:	7c d6       	rcall	.+3320   	; 0x1200 <__mulsf3>
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	4a ef       	ldi	r20, 0xFA	; 250
     50e:	54 e4       	ldi	r21, 0x44	; 68
     510:	c4 d4       	rcall	.+2440   	; 0xe9a <__addsf3>
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	48 ec       	ldi	r20, 0xC8	; 200
     518:	52 e4       	ldi	r21, 0x42	; 66
     51a:	27 d5       	rcall	.+2638   	; 0xf6a <__divsf3>
     51c:	69 87       	std	Y+9, r22	; 0x09
     51e:	7a 87       	std	Y+10, r23	; 0x0a
     520:	8b 87       	std	Y+11, r24	; 0x0b
     522:	9c 87       	std	Y+12, r25	; 0x0c
	OFF=pow(2,16)/16*C2+dT/pow(2,7)/16*C4;
     524:	b3 01       	movw	r22, r6
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	b8 d5       	rcall	.+2928   	; 0x109c <__floatunsisf>
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	40 e8       	ldi	r20, 0x80	; 128
     532:	55 e4       	ldi	r21, 0x45	; 69
     534:	65 d6       	rcall	.+3274   	; 0x1200 <__mulsf3>
     536:	69 8b       	std	Y+17, r22	; 0x11
     538:	7a 8b       	std	Y+18, r23	; 0x12
     53a:	8b 8b       	std	Y+19, r24	; 0x13
     53c:	9c 8b       	std	Y+20, r25	; 0x14
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	5c e3       	ldi	r21, 0x3C	; 60
     546:	69 81       	ldd	r22, Y+1	; 0x01
     548:	7a 81       	ldd	r23, Y+2	; 0x02
     54a:	8b 81       	ldd	r24, Y+3	; 0x03
     54c:	9c 81       	ldd	r25, Y+4	; 0x04
     54e:	58 d6       	rcall	.+3248   	; 0x1200 <__mulsf3>
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	40 e8       	ldi	r20, 0x80	; 128
     556:	5d e3       	ldi	r21, 0x3D	; 61
     558:	53 d6       	rcall	.+3238   	; 0x1200 <__mulsf3>
     55a:	2b 01       	movw	r4, r22
     55c:	3c 01       	movw	r6, r24
     55e:	b1 01       	movw	r22, r2
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	9b d5       	rcall	.+2870   	; 0x109c <__floatunsisf>
     566:	9b 01       	movw	r18, r22
     568:	ac 01       	movw	r20, r24
     56a:	c3 01       	movw	r24, r6
     56c:	b2 01       	movw	r22, r4
     56e:	48 d6       	rcall	.+3216   	; 0x1200 <__mulsf3>
     570:	9b 01       	movw	r18, r22
     572:	ac 01       	movw	r20, r24
     574:	69 89       	ldd	r22, Y+17	; 0x11
     576:	7a 89       	ldd	r23, Y+18	; 0x12
     578:	8b 89       	ldd	r24, Y+19	; 0x13
     57a:	9c 89       	ldd	r25, Y+20	; 0x14
     57c:	8e d4       	rcall	.+2332   	; 0xe9a <__addsf3>
     57e:	5d d5       	rcall	.+2746   	; 0x103a <__fixsfsi>
     580:	2b 01       	movw	r4, r22
     582:	3c 01       	movw	r6, r24
	SENS=pow(2,15)/8*C1+dT/pow(2,8)/8*C3;
     584:	b4 01       	movw	r22, r8
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	88 d5       	rcall	.+2832   	; 0x109c <__floatunsisf>
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	40 e8       	ldi	r20, 0x80	; 128
     592:	55 e4       	ldi	r21, 0x45	; 69
     594:	35 d6       	rcall	.+3178   	; 0x1200 <__mulsf3>
     596:	6d 83       	std	Y+5, r22	; 0x05
     598:	7e 83       	std	Y+6, r23	; 0x06
     59a:	8f 83       	std	Y+7, r24	; 0x07
     59c:	98 87       	std	Y+8, r25	; 0x08
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 e8       	ldi	r20, 0x80	; 128
     5a4:	5b e3       	ldi	r21, 0x3B	; 59
     5a6:	69 81       	ldd	r22, Y+1	; 0x01
     5a8:	7a 81       	ldd	r23, Y+2	; 0x02
     5aa:	8b 81       	ldd	r24, Y+3	; 0x03
     5ac:	9c 81       	ldd	r25, Y+4	; 0x04
     5ae:	28 d6       	rcall	.+3152   	; 0x1200 <__mulsf3>
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	40 e0       	ldi	r20, 0x00	; 0
     5b6:	5e e3       	ldi	r21, 0x3E	; 62
     5b8:	23 d6       	rcall	.+3142   	; 0x1200 <__mulsf3>
     5ba:	69 83       	std	Y+1, r22	; 0x01
     5bc:	7a 83       	std	Y+2, r23	; 0x02
     5be:	8b 83       	std	Y+3, r24	; 0x03
     5c0:	9c 83       	std	Y+4, r25	; 0x04
     5c2:	4d 85       	ldd	r20, Y+13	; 0x0d
     5c4:	5e 85       	ldd	r21, Y+14	; 0x0e
     5c6:	ba 01       	movw	r22, r20
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	67 d5       	rcall	.+2766   	; 0x109c <__floatunsisf>
     5ce:	9b 01       	movw	r18, r22
     5d0:	ac 01       	movw	r20, r24
     5d2:	69 81       	ldd	r22, Y+1	; 0x01
     5d4:	7a 81       	ldd	r23, Y+2	; 0x02
     5d6:	8b 81       	ldd	r24, Y+3	; 0x03
     5d8:	9c 81       	ldd	r25, Y+4	; 0x04
     5da:	12 d6       	rcall	.+3108   	; 0x1200 <__mulsf3>
     5dc:	9b 01       	movw	r18, r22
     5de:	ac 01       	movw	r20, r24
     5e0:	6d 81       	ldd	r22, Y+5	; 0x05
     5e2:	7e 81       	ldd	r23, Y+6	; 0x06
     5e4:	8f 81       	ldd	r24, Y+7	; 0x07
     5e6:	98 85       	ldd	r25, Y+8	; 0x08
     5e8:	58 d4       	rcall	.+2224   	; 0xe9a <__addsf3>
     5ea:	27 d5       	rcall	.+2638   	; 0x103a <__fixsfsi>
     5ec:	69 83       	std	Y+1, r22	; 0x01
     5ee:	7a 83       	std	Y+2, r23	; 0x02
     5f0:	8b 83       	std	Y+3, r24	; 0x03
     5f2:	9c 83       	std	Y+4, r25	; 0x04

    	if (TEMP<20)
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 ea       	ldi	r20, 0xA0	; 160
     5fa:	51 e4       	ldi	r21, 0x41	; 65
     5fc:	69 85       	ldd	r22, Y+9	; 0x09
     5fe:	7a 85       	ldd	r23, Y+10	; 0x0a
     600:	8b 85       	ldd	r24, Y+11	; 0x0b
     602:	9c 85       	ldd	r25, Y+12	; 0x0c
     604:	ae d4       	rcall	.+2396   	; 0xf62 <__cmpsf2>
     606:	88 23       	and	r24, r24
     608:	0c f0       	brlt	.+2      	; 0x60c <calculate+0x18a>
     60a:	a7 c0       	rjmp	.+334    	; 0x75a <calculate+0x2d8>
    	{
    		//T2=(dT/(float)pow(2,31))*dT;
    		OFF2=(pow((TEMP-2000),2)/(float)2)*5;
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	4a ef       	ldi	r20, 0xFA	; 250
     612:	54 e4       	ldi	r21, 0x44	; 68
     614:	69 85       	ldd	r22, Y+9	; 0x09
     616:	7a 85       	ldd	r23, Y+10	; 0x0a
     618:	8b 85       	ldd	r24, Y+11	; 0x0b
     61a:	9c 85       	ldd	r25, Y+12	; 0x0c
     61c:	3d d4       	rcall	.+2170   	; 0xe98 <__subsf3>
     61e:	9b 01       	movw	r18, r22
     620:	ac 01       	movw	r20, r24
     622:	ee d5       	rcall	.+3036   	; 0x1200 <__mulsf3>
     624:	6d 83       	std	Y+5, r22	; 0x05
     626:	7e 83       	std	Y+6, r23	; 0x06
     628:	8f 83       	std	Y+7, r24	; 0x07
     62a:	98 87       	std	Y+8, r25	; 0x08
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	5f e3       	ldi	r21, 0x3F	; 63
     634:	e5 d5       	rcall	.+3018   	; 0x1200 <__mulsf3>
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 ea       	ldi	r20, 0xA0	; 160
     63c:	50 e4       	ldi	r21, 0x40	; 64
     63e:	e0 d5       	rcall	.+3008   	; 0x1200 <__mulsf3>
     640:	fc d4       	rcall	.+2552   	; 0x103a <__fixsfsi>
     642:	6d 87       	std	Y+13, r22	; 0x0d
     644:	7e 87       	std	Y+14, r23	; 0x0e
     646:	8f 87       	std	Y+15, r24	; 0x0f
     648:	98 8b       	std	Y+16, r25	; 0x10
    		SENS2=(pow((TEMP-2000),2)/(float)4)*5;
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	40 e8       	ldi	r20, 0x80	; 128
     650:	5e e3       	ldi	r21, 0x3E	; 62
     652:	6d 81       	ldd	r22, Y+5	; 0x05
     654:	7e 81       	ldd	r23, Y+6	; 0x06
     656:	8f 81       	ldd	r24, Y+7	; 0x07
     658:	98 85       	ldd	r25, Y+8	; 0x08
     65a:	d2 d5       	rcall	.+2980   	; 0x1200 <__mulsf3>
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	40 ea       	ldi	r20, 0xA0	; 160
     662:	50 e4       	ldi	r21, 0x40	; 64
     664:	cd d5       	rcall	.+2970   	; 0x1200 <__mulsf3>
     666:	e9 d4       	rcall	.+2514   	; 0x103a <__fixsfsi>
     668:	6d 83       	std	Y+5, r22	; 0x05
     66a:	7e 83       	std	Y+6, r23	; 0x06
     66c:	8f 83       	std	Y+7, r24	; 0x07
     66e:	98 87       	std	Y+8, r25	; 0x08
    		
    		if (TEMP<-15)
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e7       	ldi	r20, 0x70	; 112
     676:	51 ec       	ldi	r21, 0xC1	; 193
     678:	69 85       	ldd	r22, Y+9	; 0x09
     67a:	7a 85       	ldd	r23, Y+10	; 0x0a
     67c:	8b 85       	ldd	r24, Y+11	; 0x0b
     67e:	9c 85       	ldd	r25, Y+12	; 0x0c
     680:	70 d4       	rcall	.+2272   	; 0xf62 <__cmpsf2>
     682:	88 23       	and	r24, r24
     684:	0c f0       	brlt	.+2      	; 0x688 <calculate+0x206>
     686:	51 c0       	rjmp	.+162    	; 0x72a <calculate+0x2a8>
    		{
    			OFF2=OFF2+7*pow((TEMP+1500),2);
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e8       	ldi	r19, 0x80	; 128
     68c:	4b eb       	ldi	r20, 0xBB	; 187
     68e:	54 e4       	ldi	r21, 0x44	; 68
     690:	69 85       	ldd	r22, Y+9	; 0x09
     692:	7a 85       	ldd	r23, Y+10	; 0x0a
     694:	8b 85       	ldd	r24, Y+11	; 0x0b
     696:	9c 85       	ldd	r25, Y+12	; 0x0c
     698:	00 d4       	rcall	.+2048   	; 0xe9a <__addsf3>
     69a:	9b 01       	movw	r18, r22
     69c:	ac 01       	movw	r20, r24
     69e:	b0 d5       	rcall	.+2912   	; 0x1200 <__mulsf3>
     6a0:	69 8b       	std	Y+17, r22	; 0x11
     6a2:	7a 8b       	std	Y+18, r23	; 0x12
     6a4:	8b 8b       	std	Y+19, r24	; 0x13
     6a6:	9c 8b       	std	Y+20, r25	; 0x14
     6a8:	6d 85       	ldd	r22, Y+13	; 0x0d
     6aa:	7e 85       	ldd	r23, Y+14	; 0x0e
     6ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     6ae:	98 89       	ldd	r25, Y+16	; 0x10
     6b0:	f7 d4       	rcall	.+2542   	; 0x10a0 <__floatsisf>
     6b2:	6d 87       	std	Y+13, r22	; 0x0d
     6b4:	7e 87       	std	Y+14, r23	; 0x0e
     6b6:	8f 87       	std	Y+15, r24	; 0x0f
     6b8:	98 8b       	std	Y+16, r25	; 0x10
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 ee       	ldi	r20, 0xE0	; 224
     6c0:	50 e4       	ldi	r21, 0x40	; 64
     6c2:	69 89       	ldd	r22, Y+17	; 0x11
     6c4:	7a 89       	ldd	r23, Y+18	; 0x12
     6c6:	8b 89       	ldd	r24, Y+19	; 0x13
     6c8:	9c 89       	ldd	r25, Y+20	; 0x14
     6ca:	9a d5       	rcall	.+2868   	; 0x1200 <__mulsf3>
     6cc:	9b 01       	movw	r18, r22
     6ce:	ac 01       	movw	r20, r24
     6d0:	6d 85       	ldd	r22, Y+13	; 0x0d
     6d2:	7e 85       	ldd	r23, Y+14	; 0x0e
     6d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     6d6:	98 89       	ldd	r25, Y+16	; 0x10
     6d8:	e0 d3       	rcall	.+1984   	; 0xe9a <__addsf3>
     6da:	af d4       	rcall	.+2398   	; 0x103a <__fixsfsi>
     6dc:	6d 87       	std	Y+13, r22	; 0x0d
     6de:	7e 87       	std	Y+14, r23	; 0x0e
     6e0:	8f 87       	std	Y+15, r24	; 0x0f
     6e2:	98 8b       	std	Y+16, r25	; 0x10
    			SENS2=SENS2+(pow((TEMP+1500),2)/(float)2)*11;
     6e4:	6d 81       	ldd	r22, Y+5	; 0x05
     6e6:	7e 81       	ldd	r23, Y+6	; 0x06
     6e8:	8f 81       	ldd	r24, Y+7	; 0x07
     6ea:	98 85       	ldd	r25, Y+8	; 0x08
     6ec:	d9 d4       	rcall	.+2482   	; 0x10a0 <__floatsisf>
     6ee:	6d 83       	std	Y+5, r22	; 0x05
     6f0:	7e 83       	std	Y+6, r23	; 0x06
     6f2:	8f 83       	std	Y+7, r24	; 0x07
     6f4:	98 87       	std	Y+8, r25	; 0x08
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	5f e3       	ldi	r21, 0x3F	; 63
     6fe:	69 89       	ldd	r22, Y+17	; 0x11
     700:	7a 89       	ldd	r23, Y+18	; 0x12
     702:	8b 89       	ldd	r24, Y+19	; 0x13
     704:	9c 89       	ldd	r25, Y+20	; 0x14
     706:	7c d5       	rcall	.+2808   	; 0x1200 <__mulsf3>
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 e3       	ldi	r20, 0x30	; 48
     70e:	51 e4       	ldi	r21, 0x41	; 65
     710:	77 d5       	rcall	.+2798   	; 0x1200 <__mulsf3>
     712:	9b 01       	movw	r18, r22
     714:	ac 01       	movw	r20, r24
     716:	6d 81       	ldd	r22, Y+5	; 0x05
     718:	7e 81       	ldd	r23, Y+6	; 0x06
     71a:	8f 81       	ldd	r24, Y+7	; 0x07
     71c:	98 85       	ldd	r25, Y+8	; 0x08
     71e:	bd d3       	rcall	.+1914   	; 0xe9a <__addsf3>
     720:	8c d4       	rcall	.+2328   	; 0x103a <__fixsfsi>
     722:	6d 83       	std	Y+5, r22	; 0x05
     724:	7e 83       	std	Y+6, r23	; 0x06
     726:	8f 83       	std	Y+7, r24	; 0x07
     728:	98 87       	std	Y+8, r25	; 0x08
    		}
    		
    		//TEMP=TEMP-T2;
    		OFF=OFF-OFF2;
     72a:	8d 85       	ldd	r24, Y+13	; 0x0d
     72c:	9e 85       	ldd	r25, Y+14	; 0x0e
     72e:	af 85       	ldd	r26, Y+15	; 0x0f
     730:	b8 89       	ldd	r27, Y+16	; 0x10
     732:	48 1a       	sub	r4, r24
     734:	59 0a       	sbc	r5, r25
     736:	6a 0a       	sbc	r6, r26
     738:	7b 0a       	sbc	r7, r27
    		SENS=SENS-SENS2;
     73a:	29 81       	ldd	r18, Y+1	; 0x01
     73c:	3a 81       	ldd	r19, Y+2	; 0x02
     73e:	4b 81       	ldd	r20, Y+3	; 0x03
     740:	5c 81       	ldd	r21, Y+4	; 0x04
     742:	8d 81       	ldd	r24, Y+5	; 0x05
     744:	9e 81       	ldd	r25, Y+6	; 0x06
     746:	af 81       	ldd	r26, Y+7	; 0x07
     748:	b8 85       	ldd	r27, Y+8	; 0x08
     74a:	28 1b       	sub	r18, r24
     74c:	39 0b       	sbc	r19, r25
     74e:	4a 0b       	sbc	r20, r26
     750:	5b 0b       	sbc	r21, r27
     752:	29 83       	std	Y+1, r18	; 0x01
     754:	3a 83       	std	Y+2, r19	; 0x02
     756:	4b 83       	std	Y+3, r20	; 0x03
     758:	5c 83       	std	Y+4, r21	; 0x04
    	}
 	
	
	pres[1]=SENS/(float)pow(2,21)/(float)pow(2,15)*8*D1;
     75a:	69 81       	ldd	r22, Y+1	; 0x01
     75c:	7a 81       	ldd	r23, Y+2	; 0x02
     75e:	8b 81       	ldd	r24, Y+3	; 0x03
     760:	9c 81       	ldd	r25, Y+4	; 0x04
     762:	9e d4       	rcall	.+2364   	; 0x10a0 <__floatsisf>
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	40 e0       	ldi	r20, 0x00	; 0
     76a:	55 e3       	ldi	r21, 0x35	; 53
     76c:	49 d5       	rcall	.+2706   	; 0x1200 <__mulsf3>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	58 e3       	ldi	r21, 0x38	; 56
     776:	44 d5       	rcall	.+2696   	; 0x1200 <__mulsf3>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	51 e4       	ldi	r21, 0x41	; 65
     780:	3f d5       	rcall	.+2686   	; 0x1200 <__mulsf3>
     782:	69 83       	std	Y+1, r22	; 0x01
     784:	7a 83       	std	Y+2, r23	; 0x02
     786:	8b 83       	std	Y+3, r24	; 0x03
     788:	9c 83       	std	Y+4, r25	; 0x04
     78a:	c6 01       	movw	r24, r12
     78c:	b5 01       	movw	r22, r10
     78e:	88 d4       	rcall	.+2320   	; 0x10a0 <__floatsisf>
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
     794:	69 81       	ldd	r22, Y+1	; 0x01
     796:	7a 81       	ldd	r23, Y+2	; 0x02
     798:	8b 81       	ldd	r24, Y+3	; 0x03
     79a:	9c 81       	ldd	r25, Y+4	; 0x04
     79c:	31 d5       	rcall	.+2658   	; 0x1200 <__mulsf3>
     79e:	6b 01       	movw	r12, r22
     7a0:	7c 01       	movw	r14, r24
	q=OFF/(float)pow(2,15)*16;
     7a2:	c3 01       	movw	r24, r6
     7a4:	b2 01       	movw	r22, r4
     7a6:	7c d4       	rcall	.+2296   	; 0x10a0 <__floatsisf>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	58 e3       	ldi	r21, 0x38	; 56
     7b0:	27 d5       	rcall	.+2638   	; 0x1200 <__mulsf3>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e8       	ldi	r20, 0x80	; 128
     7b8:	51 e4       	ldi	r21, 0x41	; 65
     7ba:	22 d5       	rcall	.+2628   	; 0x1200 <__mulsf3>
     7bc:	9b 01       	movw	r18, r22
     7be:	ac 01       	movw	r20, r24
	pres[1]=(pres[1]-q)/(float)100;
     7c0:	c7 01       	movw	r24, r14
     7c2:	b6 01       	movw	r22, r12
     7c4:	69 d3       	rcall	.+1746   	; 0xe98 <__subsf3>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	48 ec       	ldi	r20, 0xC8	; 200
     7cc:	52 e4       	ldi	r21, 0x42	; 66
     7ce:	cd d3       	rcall	.+1946   	; 0xf6a <__divsf3>
	
	pres[1]=pres[1]*100;
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	48 ec       	ldi	r20, 0xC8	; 200
     7d6:	52 e4       	ldi	r21, 0x42	; 66
     7d8:	13 d5       	rcall	.+2598   	; 0x1200 <__mulsf3>
     7da:	6b 01       	movw	r12, r22
     7dc:	7c 01       	movw	r14, r24
	pressure=(long int)pres[1];
     7de:	2d d4       	rcall	.+2138   	; 0x103a <__fixsfsi>
     7e0:	46 2e       	mov	r4, r22
     7e2:	57 2e       	mov	r5, r23
     7e4:	78 2e       	mov	r7, r24
     7e6:	69 2e       	mov	r6, r25
	
  	if (flag==1)  //bare aval last_data ba data barabare
     7e8:	80 91 00 20 	lds	r24, 0x2000
     7ec:	90 91 01 20 	lds	r25, 0x2001
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	61 f4       	brne	.+24     	; 0x80c <calculate+0x38a>
  	{
  		pres[0]=pres[1];
     7f4:	c0 92 8d 20 	sts	0x208D, r12
     7f8:	d0 92 8e 20 	sts	0x208E, r13
     7fc:	e0 92 8f 20 	sts	0x208F, r14
     800:	f0 92 90 20 	sts	0x2090, r15
  		flag=0;
     804:	10 92 00 20 	sts	0x2000, r1
     808:	10 92 01 20 	sts	0x2001, r1
  	}
  	
   	pres[1]=pres[0]+(0.025/(float)(0.025+1/(float)(2*(float)(3.14)*6)))*(pres[1]-pres[0]);    //filter
     80c:	0d e8       	ldi	r16, 0x8D	; 141
     80e:	10 e2       	ldi	r17, 0x20	; 32
     810:	d8 01       	movw	r26, r16
     812:	8d 90       	ld	r8, X+
     814:	9d 90       	ld	r9, X+
     816:	ad 90       	ld	r10, X+
     818:	bc 90       	ld	r11, X
     81a:	a5 01       	movw	r20, r10
     81c:	94 01       	movw	r18, r8
     81e:	c7 01       	movw	r24, r14
     820:	b6 01       	movw	r22, r12
     822:	3a d3       	rcall	.+1652   	; 0xe98 <__subsf3>
     824:	22 eb       	ldi	r18, 0xB2	; 178
     826:	3a e5       	ldi	r19, 0x5A	; 90
     828:	48 ef       	ldi	r20, 0xF8	; 248
     82a:	5e e3       	ldi	r21, 0x3E	; 62
     82c:	e9 d4       	rcall	.+2514   	; 0x1200 <__mulsf3>
     82e:	9b 01       	movw	r18, r22
     830:	ac 01       	movw	r20, r24
     832:	c5 01       	movw	r24, r10
     834:	b4 01       	movw	r22, r8
     836:	31 d3       	rcall	.+1634   	; 0xe9a <__addsf3>
     838:	60 93 91 20 	sts	0x2091, r22
     83c:	70 93 92 20 	sts	0x2092, r23
     840:	80 93 93 20 	sts	0x2093, r24
     844:	90 93 94 20 	sts	0x2094, r25
   	pres[0]=pres[1];
     848:	f8 01       	movw	r30, r16
     84a:	60 83       	st	Z, r22
     84c:	71 83       	std	Z+1, r23	; 0x01
     84e:	82 83       	std	Z+2, r24	; 0x02
     850:	93 83       	std	Z+3, r25	; 0x03

	 printf2pc("Pressure: %ld\r",pressure);
     852:	6f 92       	push	r6
     854:	7f 92       	push	r7
     856:	5f 92       	push	r5
     858:	4f 92       	push	r4
     85a:	85 e0       	ldi	r24, 0x05	; 5
     85c:	90 e2       	ldi	r25, 0x20	; 32
     85e:	9f 93       	push	r25
     860:	8f 93       	push	r24
     862:	07 e2       	ldi	r16, 0x27	; 39
     864:	10 e2       	ldi	r17, 0x20	; 32
     866:	1f 93       	push	r17
     868:	0f 93       	push	r16
     86a:	4f d5       	rcall	.+2718   	; 0x130a <sprintf>
     86c:	f2 dd       	rcall	.-1052   	; 0x452 <UART_SEND>
	 TEMP=TEMP*100;
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	48 ec       	ldi	r20, 0xC8	; 200
     874:	52 e4       	ldi	r21, 0x42	; 66
     876:	69 85       	ldd	r22, Y+9	; 0x09
     878:	7a 85       	ldd	r23, Y+10	; 0x0a
     87a:	8b 85       	ldd	r24, Y+11	; 0x0b
     87c:	9c 85       	ldd	r25, Y+12	; 0x0c
     87e:	c0 d4       	rcall	.+2432   	; 0x1200 <__mulsf3>
	 temperature=(long int)TEMP;
     880:	dc d3       	rcall	.+1976   	; 0x103a <__fixsfsi>
	 //temperature=(long int)T2;
	 printf2pc("Temperature: %ld\r",temperature);
     882:	9f 93       	push	r25
     884:	8f 93       	push	r24
     886:	7f 93       	push	r23
     888:	6f 93       	push	r22
     88a:	84 e1       	ldi	r24, 0x14	; 20
     88c:	90 e2       	ldi	r25, 0x20	; 32
     88e:	9f 93       	push	r25
     890:	8f 93       	push	r24
     892:	1f 93       	push	r17
     894:	0f 93       	push	r16
     896:	39 d5       	rcall	.+2674   	; 0x130a <sprintf>
     898:	dc dd       	rcall	.-1096   	; 0x452 <UART_SEND>
     89a:	cd bf       	out	0x3d, r28	; 61
     89c:	de bf       	out	0x3e, r29	; 62

//test!

	
}
     89e:	64 96       	adiw	r28, 0x14	; 20
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	df 90       	pop	r13
     8b2:	cf 90       	pop	r12
     8b4:	bf 90       	pop	r11
     8b6:	af 90       	pop	r10
     8b8:	9f 90       	pop	r9
     8ba:	8f 90       	pop	r8
     8bc:	7f 90       	pop	r7
     8be:	6f 90       	pop	r6
     8c0:	5f 90       	pop	r5
     8c2:	4f 90       	pop	r4
     8c4:	3f 90       	pop	r3
     8c6:	2f 90       	pop	r2
     8c8:	08 95       	ret

000008ca <En_RC32M>:
// }

void En_RC32M(void)
{
    // Start RC32M OSC
    OSC_CTRL |= OSC_RC32MEN_bm;
     8ca:	e0 e5       	ldi	r30, 0x50	; 80
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	82 60       	ori	r24, 0x02	; 2
     8d2:	80 83       	st	Z, r24
    while(!(OSC_STATUS & OSC_RC32MRDY_bm));
     8d4:	e1 e5       	ldi	r30, 0x51	; 81
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	81 ff       	sbrs	r24, 1
     8dc:	fd cf       	rjmp	.-6      	; 0x8d8 <En_RC32M+0xe>

    // Select the system clock source: 32 MHz Internal RC Osc.
    CCP = CCP_IOREG_gc;
     8de:	88 ed       	ldi	r24, 0xD8	; 216
     8e0:	84 bf       	out	0x34, r24	; 52
    CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	80 93 40 00 	sts	0x0040, r24

    // Disable the unused oscillators: 2 MHz, internal 32 kHz, external clock/crystal oscillator, PLL
    OSC_CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
     8e8:	e0 e5       	ldi	r30, 0x50	; 80
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	82 7e       	andi	r24, 0xE2	; 226
     8f0:	80 83       	st	Z, r24
     8f2:	08 95       	ret

000008f4 <PORT_init>:
};

void PORT_init(void)
{
	//LED
	PORTE_DIRSET = PIN3_bm;  
     8f4:	88 e0       	ldi	r24, 0x08	; 8
     8f6:	80 93 81 06 	sts	0x0681, r24
	PORTE_OUTCLR = PIN3_bm;  
     8fa:	80 93 86 06 	sts	0x0686, r24
	
	//TX
	PORTD_DIRSET = PIN3_bm; 
     8fe:	80 93 61 06 	sts	0x0661, r24
	PORTD_OUTSET = PIN3_bm;
     902:	80 93 65 06 	sts	0x0665, r24
 
    //Measuring pressure button interrupt (INT1)/
 	PORTE_OUTSET=PIN2_bm;  ////ama kilid be vcc vasle! bepors bebin 0 esh koni mipoke ya na
     906:	84 e0       	ldi	r24, 0x04	; 4
     908:	80 93 85 06 	sts	0x0685, r24
 	PORTE_DIRCLR=PIN2_bm;
     90c:	80 93 82 06 	sts	0x0682, r24
 	PORTE_PIN2CTRL |= PORT_ISC_RISING_gc;
     910:	e2 e9       	ldi	r30, 0x92	; 146
     912:	f6 e0       	ldi	r31, 0x06	; 6
     914:	80 81       	ld	r24, Z
     916:	81 60       	ori	r24, 0x01	; 1
     918:	80 83       	st	Z, r24
 	PORTE_INTCTRL |= PORT_INT1LVL_HI_gc;
     91a:	e9 e8       	ldi	r30, 0x89	; 137
     91c:	f6 e0       	ldi	r31, 0x06	; 6
     91e:	80 81       	ld	r24, Z
     920:	8c 60       	ori	r24, 0x0C	; 12
     922:	80 83       	st	Z, r24
 	PORTE_INT1MASK |= PIN2_bm;
     924:	eb e8       	ldi	r30, 0x8B	; 139
     926:	f6 e0       	ldi	r31, 0x06	; 6
     928:	80 81       	ld	r24, Z
     92a:	84 60       	ori	r24, 0x04	; 4
     92c:	80 83       	st	Z, r24
     92e:	08 95       	ret

00000930 <USARTD0_init>:
//}
//
#define USARTD0_conf USARTD0
#define USARTD0_BUADRATE 115200
void USARTD0_init(void)
{
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     938:	c0 ea       	ldi	r28, 0xA0	; 160
     93a:	d9 e0       	ldi	r29, 0x09	; 9
     93c:	8d 81       	ldd	r24, Y+5	; 0x05
     93e:	8f 73       	andi	r24, 0x3F	; 63
     940:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     942:	83 e0       	ldi	r24, 0x03	; 3
     944:	8d 83       	std	Y+5, r24	; 0x05
	usart_set_mode(&USARTD0_conf,USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(&USARTD0_conf,USART_CHSIZE_8BIT_gc,USART_PMODE_DISABLED_gc,false);
	//usart_set_rx_interrupt_level(&USARTE0_conf,USART_INT_LVL_MED);
	//usart_set_dre_interrupt_level(&USARTE0_conf,USART_INT_LVL_LO);
	usart_set_baudrate(&USARTD0_conf,USARTD0_BUADRATE,F_CPU);
     946:	00 e0       	ldi	r16, 0x00	; 0
     948:	18 e4       	ldi	r17, 0x48	; 72
     94a:	28 ee       	ldi	r18, 0xE8	; 232
     94c:	31 e0       	ldi	r19, 0x01	; 1
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	52 ec       	ldi	r21, 0xC2	; 194
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	80 ea       	ldi	r24, 0xA0	; 160
     958:	99 e0       	ldi	r25, 0x09	; 9
     95a:	75 dc       	rcall	.-1814   	; 0x246 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     95c:	8c 81       	ldd	r24, Y+4	; 0x04
     95e:	88 60       	ori	r24, 0x08	; 8
     960:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     962:	8c 81       	ldd	r24, Y+4	; 0x04
     964:	80 61       	ori	r24, 0x10	; 16
     966:	8c 83       	std	Y+4, r24	; 0x04
	usart_tx_enable(&USARTD0_conf);
	usart_rx_enable(&USARTD0_conf);
}
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	08 95       	ret

00000972 <reset>:
#include "calculation.h"
#include "MS5611.h"


 void reset(void)
 {
     972:	0f 93       	push	r16

	 TWI_MasterWriteRead(&twiMaster,MS5607_ADD,&ms_reset,1,0);
     974:	00 e0       	ldi	r16, 0x00	; 0
     976:	21 e0       	ldi	r18, 0x01	; 1
     978:	44 e0       	ldi	r20, 0x04	; 4
     97a:	50 e2       	ldi	r21, 0x20	; 32
     97c:	67 e7       	ldi	r22, 0x77	; 119
     97e:	85 ea       	ldi	r24, 0xA5	; 165
     980:	90 e2       	ldi	r25, 0x20	; 32
     982:	41 d1       	rcall	.+642    	; 0xc06 <TWI_MasterWriteRead>
 	 while (twiMaster.status != TWIM_STATUS_READY) {
     984:	ec eb       	ldi	r30, 0xBC	; 188
     986:	f0 e2       	ldi	r31, 0x20	; 32
     988:	80 81       	ld	r24, Z
     98a:	81 11       	cpse	r24, r1
     98c:	fd cf       	rjmp	.-6      	; 0x988 <reset+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     98e:	8f eb       	ldi	r24, 0xBF	; 191
     990:	9d e5       	ldi	r25, 0x5D	; 93
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <reset+0x20>
     996:	00 c0       	rjmp	.+0      	; 0x998 <reset+0x26>
     998:	00 00       	nop
      /* Wait until transaction is complete. */
      }
	 _delay_ms(3);
	 PORTD_OUTSET=LED_White_PIN_bm;
     99a:	88 e0       	ldi	r24, 0x08	; 8
     99c:	80 93 65 06 	sts	0x0665, r24
	
	  
 }
     9a0:	0f 91       	pop	r16
     9a2:	08 95       	ret

000009a4 <read_PROM>:


 
   void read_PROM(void)
   {
     9a4:	4f 92       	push	r4
     9a6:	5f 92       	push	r5
     9a8:	6f 92       	push	r6
     9aa:	7f 92       	push	r7
     9ac:	8f 92       	push	r8
     9ae:	9f 92       	push	r9
     9b0:	af 92       	push	r10
     9b2:	bf 92       	push	r11
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
   	 int i;
   	 PROM_read=0xA2;
     9c2:	82 ea       	ldi	r24, 0xA2	; 162
     9c4:	80 93 03 20 	sts	0x2003, r24
     9c8:	0f 2e       	mov	r0, r31
     9ca:	f9 e9       	ldi	r31, 0x99	; 153
     9cc:	6f 2e       	mov	r6, r31
     9ce:	f0 e2       	ldi	r31, 0x20	; 32
     9d0:	7f 2e       	mov	r7, r31
     9d2:	f0 2d       	mov	r31, r0
     9d4:	0f 2e       	mov	r0, r31
     9d6:	f5 ea       	ldi	r31, 0xA5	; 165
     9d8:	8f 2e       	mov	r8, r31
     9da:	f0 e2       	ldi	r31, 0x20	; 32
     9dc:	9f 2e       	mov	r9, r31
     9de:	f0 2d       	mov	r31, r0
   	 
   	 for(i=0;i<6;i++)
   	 {
   		  TWI_MasterWriteRead(&twiMaster,MS5607_ADD,&PROM_read,1,2);
    		  while (twiMaster.status != TWIM_STATUS_READY) {
     9e0:	cc eb       	ldi	r28, 0xBC	; 188
     9e2:	d0 e2       	ldi	r29, 0x20	; 32
    			  /* Wait until transaction is complete. */
    		  }
   		 PROM_read=PROM_read+2;
		 c[0]=twiMaster.readData[0];
     9e4:	0f 2e       	mov	r0, r31
     9e6:	f0 eb       	ldi	r31, 0xB0	; 176
     9e8:	af 2e       	mov	r10, r31
     9ea:	f0 e2       	ldi	r31, 0x20	; 32
     9ec:	bf 2e       	mov	r11, r31
     9ee:	f0 2d       	mov	r31, r0
     9f0:	0f 2e       	mov	r0, r31
     9f2:	fe eb       	ldi	r31, 0xBE	; 190
     9f4:	cf 2e       	mov	r12, r31
     9f6:	f0 e2       	ldi	r31, 0x20	; 32
     9f8:	df 2e       	mov	r13, r31
     9fa:	f0 2d       	mov	r31, r0
		 c[1]=twiMaster.readData[1];	
     9fc:	0f 2e       	mov	r0, r31
     9fe:	f1 eb       	ldi	r31, 0xB1	; 177
     a00:	ef 2e       	mov	r14, r31
     a02:	f0 e2       	ldi	r31, 0x20	; 32
     a04:	ff 2e       	mov	r15, r31
     a06:	f0 2d       	mov	r31, r0
     a08:	0f 2e       	mov	r0, r31
     a0a:	ff eb       	ldi	r31, 0xBF	; 191
     a0c:	4f 2e       	mov	r4, r31
     a0e:	f0 e2       	ldi	r31, 0x20	; 32
     a10:	5f 2e       	mov	r5, r31
     a12:	f0 2d       	mov	r31, r0
   	 int i;
   	 PROM_read=0xA2;
   	 
   	 for(i=0;i<6;i++)
   	 {
   		  TWI_MasterWriteRead(&twiMaster,MS5607_ADD,&PROM_read,1,2);
     a14:	02 e0       	ldi	r16, 0x02	; 2
     a16:	21 e0       	ldi	r18, 0x01	; 1
     a18:	43 e0       	ldi	r20, 0x03	; 3
     a1a:	50 e2       	ldi	r21, 0x20	; 32
     a1c:	67 e7       	ldi	r22, 0x77	; 119
     a1e:	85 ea       	ldi	r24, 0xA5	; 165
     a20:	90 e2       	ldi	r25, 0x20	; 32
     a22:	f1 d0       	rcall	.+482    	; 0xc06 <TWI_MasterWriteRead>
    		  while (twiMaster.status != TWIM_STATUS_READY) {
     a24:	88 81       	ld	r24, Y
     a26:	81 11       	cpse	r24, r1
     a28:	fd cf       	rjmp	.-6      	; 0xa24 <read_PROM+0x80>
    			  /* Wait until transaction is complete. */
    		  }
   		 PROM_read=PROM_read+2;
     a2a:	80 91 03 20 	lds	r24, 0x2003
     a2e:	8e 5f       	subi	r24, 0xFE	; 254
     a30:	80 93 03 20 	sts	0x2003, r24
		 c[0]=twiMaster.readData[0];
     a34:	f5 01       	movw	r30, r10
     a36:	80 81       	ld	r24, Z
     a38:	f6 01       	movw	r30, r12
     a3a:	80 83       	st	Z, r24
		 c[1]=twiMaster.readData[1];	
     a3c:	f7 01       	movw	r30, r14
     a3e:	20 81       	ld	r18, Z
     a40:	f2 01       	movw	r30, r4
     a42:	20 83       	st	Z, r18
   		 n[i]=(unsigned int)c[0]*256+(unsigned int)c[1];   //avali MSB
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	98 2f       	mov	r25, r24
     a48:	88 27       	eor	r24, r24
     a4a:	82 0f       	add	r24, r18
     a4c:	91 1d       	adc	r25, r1
     a4e:	f3 01       	movw	r30, r6
     a50:	81 93       	st	Z+, r24
     a52:	91 93       	st	Z+, r25
     a54:	3f 01       	movw	r6, r30
   void read_PROM(void)
   {
   	 int i;
   	 PROM_read=0xA2;
   	 
   	 for(i=0;i<6;i++)
     a56:	e8 15       	cp	r30, r8
     a58:	f9 05       	cpc	r31, r9
     a5a:	e1 f6       	brne	.-72     	; 0xa14 <read_PROM+0x70>
   		 n[i]=(unsigned int)c[0]*256+(unsigned int)c[1];   //avali MSB
			
   	 }

  	 
   }
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	0f 91       	pop	r16
     a62:	ff 90       	pop	r15
     a64:	ef 90       	pop	r14
     a66:	df 90       	pop	r13
     a68:	cf 90       	pop	r12
     a6a:	bf 90       	pop	r11
     a6c:	af 90       	pop	r10
     a6e:	9f 90       	pop	r9
     a70:	8f 90       	pop	r8
     a72:	7f 90       	pop	r7
     a74:	6f 90       	pop	r6
     a76:	5f 90       	pop	r5
     a78:	4f 90       	pop	r4
     a7a:	08 95       	ret

00000a7c <D_read>:
   
   
   void D_read(void)
   {
     a7c:	2f 92       	push	r2
     a7e:	3f 92       	push	r3
     a80:	4f 92       	push	r4
     a82:	5f 92       	push	r5
     a84:	6f 92       	push	r6
     a86:	7f 92       	push	r7
     a88:	8f 92       	push	r8
     a8a:	9f 92       	push	r9
     a8c:	af 92       	push	r10
     a8e:	bf 92       	push	r11
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
  	 
   	 int j=0,i;
   	 read_d=0x48;
     a9e:	88 e4       	ldi	r24, 0x48	; 72
     aa0:	80 93 02 20 	sts	0x2002, r24
     aa4:	0f 2e       	mov	r0, r31
     aa6:	f3 ec       	ldi	r31, 0xC3	; 195
     aa8:	6f 2e       	mov	r6, r31
     aaa:	f0 e2       	ldi	r31, 0x20	; 32
     aac:	7f 2e       	mov	r7, r31
     aae:	f0 2d       	mov	r31, r0
     ab0:	0f 2e       	mov	r0, r31
     ab2:	fb ec       	ldi	r31, 0xCB	; 203
     ab4:	8f 2e       	mov	r8, r31
     ab6:	f0 e2       	ldi	r31, 0x20	; 32
     ab8:	9f 2e       	mov	r9, r31
     aba:	f0 2d       	mov	r31, r0
   	 
   	 for(i=0;i<2;i++)
   	 {
   		  TWI_MasterWriteRead(&twiMaster,MS5607_ADD,&read_d,1,0);
    		  while (twiMaster.status != TWIM_STATUS_READY) {    //ino mizaram gir mikone
     abc:	cc eb       	ldi	r28, 0xBC	; 188
     abe:	d0 e2       	ldi	r29, 0x20	; 32
   		 TWI_MasterWriteRead(&twiMaster,MS5607_ADD,&ADC_read,1,3);
    		 while (twiMaster.status != TWIM_STATUS_READY) {    //ino mizaram gir mikone
    			 /* Wait until transaction is complete. */
    		 }
   		 read_d=read_d+16;
		 d[0]=twiMaster.readData[0];
     ac0:	0f 2e       	mov	r0, r31
     ac2:	f0 eb       	ldi	r31, 0xB0	; 176
     ac4:	af 2e       	mov	r10, r31
     ac6:	f0 e2       	ldi	r31, 0x20	; 32
     ac8:	bf 2e       	mov	r11, r31
     aca:	f0 2d       	mov	r31, r0
     acc:	0f 2e       	mov	r0, r31
     ace:	f0 ec       	ldi	r31, 0xC0	; 192
     ad0:	cf 2e       	mov	r12, r31
     ad2:	f0 e2       	ldi	r31, 0x20	; 32
     ad4:	df 2e       	mov	r13, r31
     ad6:	f0 2d       	mov	r31, r0
		 d[1]=twiMaster.readData[1];
     ad8:	0f 2e       	mov	r0, r31
     ada:	f1 eb       	ldi	r31, 0xB1	; 177
     adc:	ef 2e       	mov	r14, r31
     ade:	f0 e2       	ldi	r31, 0x20	; 32
     ae0:	ff 2e       	mov	r15, r31
     ae2:	f0 2d       	mov	r31, r0
     ae4:	0f 2e       	mov	r0, r31
     ae6:	f1 ec       	ldi	r31, 0xC1	; 193
     ae8:	4f 2e       	mov	r4, r31
     aea:	f0 e2       	ldi	r31, 0x20	; 32
     aec:	5f 2e       	mov	r5, r31
     aee:	f0 2d       	mov	r31, r0
		 d[2]=twiMaster.readData[2];
     af0:	0f 2e       	mov	r0, r31
     af2:	f2 eb       	ldi	r31, 0xB2	; 178
     af4:	2f 2e       	mov	r2, r31
     af6:	f0 e2       	ldi	r31, 0x20	; 32
     af8:	3f 2e       	mov	r3, r31
     afa:	f0 2d       	mov	r31, r0
   	 int j=0,i;
   	 read_d=0x48;
   	 
   	 for(i=0;i<2;i++)
   	 {
   		  TWI_MasterWriteRead(&twiMaster,MS5607_ADD,&read_d,1,0);
     afc:	00 e0       	ldi	r16, 0x00	; 0
     afe:	21 e0       	ldi	r18, 0x01	; 1
     b00:	42 e0       	ldi	r20, 0x02	; 2
     b02:	50 e2       	ldi	r21, 0x20	; 32
     b04:	67 e7       	ldi	r22, 0x77	; 119
     b06:	85 ea       	ldi	r24, 0xA5	; 165
     b08:	90 e2       	ldi	r25, 0x20	; 32
     b0a:	7d d0       	rcall	.+250    	; 0xc06 <TWI_MasterWriteRead>
    		  while (twiMaster.status != TWIM_STATUS_READY) {    //ino mizaram gir mikone
     b0c:	88 81       	ld	r24, Y
     b0e:	81 11       	cpse	r24, r1
     b10:	fd cf       	rjmp	.-6      	; 0xb0c <D_read+0x90>
     b12:	2f ef       	ldi	r18, 0xFF	; 255
     b14:	89 ef       	ldi	r24, 0xF9	; 249
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	21 50       	subi	r18, 0x01	; 1
     b1a:	80 40       	sbci	r24, 0x00	; 0
     b1c:	90 40       	sbci	r25, 0x00	; 0
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <D_read+0x9c>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <D_read+0xa6>
     b22:	00 00       	nop
    			  /* Wait until transaction is complete. */
    		  }
   		 _delay_ms(10);
   		 TWI_MasterWriteRead(&twiMaster,MS5607_ADD,&ADC_read,1,3);
     b24:	03 e0       	ldi	r16, 0x03	; 3
     b26:	21 e0       	ldi	r18, 0x01	; 1
     b28:	46 e2       	ldi	r20, 0x26	; 38
     b2a:	50 e2       	ldi	r21, 0x20	; 32
     b2c:	67 e7       	ldi	r22, 0x77	; 119
     b2e:	85 ea       	ldi	r24, 0xA5	; 165
     b30:	90 e2       	ldi	r25, 0x20	; 32
     b32:	69 d0       	rcall	.+210    	; 0xc06 <TWI_MasterWriteRead>
    		 while (twiMaster.status != TWIM_STATUS_READY) {    //ino mizaram gir mikone
     b34:	88 81       	ld	r24, Y
     b36:	81 11       	cpse	r24, r1
     b38:	fd cf       	rjmp	.-6      	; 0xb34 <D_read+0xb8>
    			 /* Wait until transaction is complete. */
    		 }
   		 read_d=read_d+16;
     b3a:	80 91 02 20 	lds	r24, 0x2002
     b3e:	80 5f       	subi	r24, 0xF0	; 240
     b40:	80 93 02 20 	sts	0x2002, r24
		 d[0]=twiMaster.readData[0];
     b44:	f5 01       	movw	r30, r10
     b46:	80 81       	ld	r24, Z
     b48:	f6 01       	movw	r30, r12
     b4a:	80 83       	st	Z, r24
		 d[1]=twiMaster.readData[1];
     b4c:	f7 01       	movw	r30, r14
     b4e:	30 81       	ld	r19, Z
     b50:	f2 01       	movw	r30, r4
     b52:	30 83       	st	Z, r19
		 d[2]=twiMaster.readData[2];
     b54:	f1 01       	movw	r30, r2
     b56:	20 81       	ld	r18, Z
     b58:	e2 ec       	ldi	r30, 0xC2	; 194
     b5a:	f0 e2       	ldi	r31, 0x20	; 32
     b5c:	20 83       	st	Z, r18
		 	
   		 m[i]=(unsigned long int)d[2]+(unsigned long int)d[1]*256+(unsigned long int)d[0]*65536;   
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ba 2f       	mov	r27, r26
     b66:	a9 2f       	mov	r26, r25
     b68:	98 2f       	mov	r25, r24
     b6a:	88 27       	eor	r24, r24
     b6c:	83 0f       	add	r24, r19
     b6e:	91 1d       	adc	r25, r1
     b70:	a1 1d       	adc	r26, r1
     b72:	b1 1d       	adc	r27, r1
     b74:	ba 2f       	mov	r27, r26
     b76:	a9 2f       	mov	r26, r25
     b78:	98 2f       	mov	r25, r24
     b7a:	88 27       	eor	r24, r24
     b7c:	82 0f       	add	r24, r18
     b7e:	91 1d       	adc	r25, r1
     b80:	a1 1d       	adc	r26, r1
     b82:	b1 1d       	adc	r27, r1
     b84:	f3 01       	movw	r30, r6
     b86:	81 93       	st	Z+, r24
     b88:	91 93       	st	Z+, r25
     b8a:	a1 93       	st	Z+, r26
     b8c:	b1 93       	st	Z+, r27
     b8e:	3f 01       	movw	r6, r30
   {
  	 
   	 int j=0,i;
   	 read_d=0x48;
   	 
   	 for(i=0;i<2;i++)
     b90:	e8 15       	cp	r30, r8
     b92:	f9 05       	cpc	r31, r9
     b94:	09 f0       	breq	.+2      	; 0xb98 <D_read+0x11c>
     b96:	b2 cf       	rjmp	.-156    	; 0xafc <D_read+0x80>
   		 m[i]=(unsigned long int)d[2]+(unsigned long int)d[1]*256+(unsigned long int)d[0]*65536;   
   	 }
  
  	 
  
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	ef 90       	pop	r14
     ba2:	df 90       	pop	r13
     ba4:	cf 90       	pop	r12
     ba6:	bf 90       	pop	r11
     ba8:	af 90       	pop	r10
     baa:	9f 90       	pop	r9
     bac:	8f 90       	pop	r8
     bae:	7f 90       	pop	r7
     bb0:	6f 90       	pop	r6
     bb2:	5f 90       	pop	r5
     bb4:	4f 90       	pop	r4
     bb6:	3f 90       	pop	r3
     bb8:	2f 90       	pop	r2
     bba:	08 95       	ret

00000bbc <set_micro>:


void set_micro(void)
{

En_RC32M();
     bbc:	86 de       	rcall	.-756    	; 0x8ca <En_RC32M>
PMIC_CTRL |= PMIC_HILVLEN_bm | PMIC_LOLVLEN_bm |PMIC_MEDLVLEN_bm;
     bbe:	e2 ea       	ldi	r30, 0xA2	; 162
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	87 60       	ori	r24, 0x07	; 7
     bc6:	80 83       	st	Z, r24
PORT_init();
     bc8:	95 de       	rcall	.-726    	; 0x8f4 <PORT_init>
USARTD0_init();
     bca:	b2 de       	rcall	.-668    	; 0x930 <USARTD0_init>

sei();
     bcc:	78 94       	sei

TWI_MasterInit(&twiMaster,&TWIC,TWI_MASTER_INTLVL_LO_gc,TWI_BAUDSETTING);	
     bce:	2b e9       	ldi	r18, 0x9B	; 155
     bd0:	40 e4       	ldi	r20, 0x40	; 64
     bd2:	60 e8       	ldi	r22, 0x80	; 128
     bd4:	74 e0       	ldi	r23, 0x04	; 4
     bd6:	85 ea       	ldi	r24, 0xA5	; 165
     bd8:	90 e2       	ldi	r25, 0x20	; 32
     bda:	04 d0       	rcall	.+8      	; 0xbe4 <TWI_MasterInit>
TWIC.SLAVE.CTRLA=0;  //slave disabled
     bdc:	e0 e8       	ldi	r30, 0x80	; 128
     bde:	f4 e0       	ldi	r31, 0x04	; 4
     be0:	10 86       	std	Z+8, r1	; 0x08
     be2:	08 95       	ret

00000be4 <TWI_MasterInit>:
                    uint8_t address,
                    uint8_t bytesToRead)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
     be4:	fc 01       	movw	r30, r24
     be6:	60 83       	st	Z, r22
     be8:	71 83       	std	Z+1, r23	; 0x01
     bea:	48 63       	ori	r20, 0x38	; 56
     bec:	db 01       	movw	r26, r22
     bee:	11 96       	adiw	r26, 0x01	; 1
     bf0:	4c 93       	st	X, r20
     bf2:	a0 81       	ld	r26, Z
     bf4:	b1 81       	ldd	r27, Z+1	; 0x01
     bf6:	15 96       	adiw	r26, 0x05	; 5
     bf8:	2c 93       	st	X, r18
     bfa:	01 90       	ld	r0, Z+
     bfc:	f0 81       	ld	r31, Z
     bfe:	e0 2d       	mov	r30, r0
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	84 83       	std	Z+4, r24	; 0x04
     c04:	08 95       	ret

00000c06 <TWI_MasterWriteRead>:
     c06:	0f 93       	push	r16
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	fc 01       	movw	r30, r24
     c0e:	29 30       	cpi	r18, 0x09	; 9
     c10:	98 f5       	brcc	.+102    	; 0xc78 <TWI_MasterWriteRead+0x72>
     c12:	09 30       	cpi	r16, 0x09	; 9
     c14:	98 f5       	brcc	.+102    	; 0xc7c <TWI_MasterWriteRead+0x76>
     c16:	87 89       	ldd	r24, Z+23	; 0x17
     c18:	81 11       	cpse	r24, r1
     c1a:	32 c0       	rjmp	.+100    	; 0xc80 <TWI_MasterWriteRead+0x7a>
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	87 8b       	std	Z+23, r24	; 0x17
     c20:	10 8e       	std	Z+24, r1	; 0x18
     c22:	66 0f       	add	r22, r22
     c24:	62 83       	std	Z+2, r22	; 0x02
     c26:	22 23       	and	r18, r18
     c28:	69 f0       	breq	.+26     	; 0xc44 <TWI_MasterWriteRead+0x3e>
     c2a:	a4 2f       	mov	r26, r20
     c2c:	b5 2f       	mov	r27, r21
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	8d 91       	ld	r24, X+
     c34:	ef 01       	movw	r28, r30
     c36:	c4 0f       	add	r28, r20
     c38:	d5 1f       	adc	r29, r21
     c3a:	8b 83       	std	Y+3, r24	; 0x03
     c3c:	4f 5f       	subi	r20, 0xFF	; 255
     c3e:	5f 4f       	sbci	r21, 0xFF	; 255
     c40:	42 17       	cp	r20, r18
     c42:	b8 f3       	brcs	.-18     	; 0xc32 <TWI_MasterWriteRead+0x2c>
     c44:	23 8b       	std	Z+19, r18	; 0x13
     c46:	04 8b       	std	Z+20, r16	; 0x14
     c48:	15 8a       	std	Z+21, r1	; 0x15
     c4a:	16 8a       	std	Z+22, r1	; 0x16
     c4c:	83 89       	ldd	r24, Z+19	; 0x13
     c4e:	88 23       	and	r24, r24
     c50:	41 f0       	breq	.+16     	; 0xc62 <TWI_MasterWriteRead+0x5c>
     c52:	82 81       	ldd	r24, Z+2	; 0x02
     c54:	8e 7f       	andi	r24, 0xFE	; 254
     c56:	01 90       	ld	r0, Z+
     c58:	f0 81       	ld	r31, Z
     c5a:	e0 2d       	mov	r30, r0
     c5c:	86 83       	std	Z+6, r24	; 0x06
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	12 c0       	rjmp	.+36     	; 0xc86 <TWI_MasterWriteRead+0x80>
     c62:	84 89       	ldd	r24, Z+20	; 0x14
     c64:	88 23       	and	r24, r24
     c66:	71 f0       	breq	.+28     	; 0xc84 <TWI_MasterWriteRead+0x7e>
     c68:	82 81       	ldd	r24, Z+2	; 0x02
     c6a:	81 60       	ori	r24, 0x01	; 1
     c6c:	01 90       	ld	r0, Z+
     c6e:	f0 81       	ld	r31, Z
     c70:	e0 2d       	mov	r30, r0
     c72:	86 83       	std	Z+6, r24	; 0x06
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	07 c0       	rjmp	.+14     	; 0xc86 <TWI_MasterWriteRead+0x80>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	05 c0       	rjmp	.+10     	; 0xc86 <TWI_MasterWriteRead+0x80>
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	03 c0       	rjmp	.+6      	; 0xc86 <TWI_MasterWriteRead+0x80>
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <TWI_MasterWriteRead+0x80>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	0f 91       	pop	r16
     c8c:	08 95       	ret

00000c8e <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
     c8e:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
     c90:	a0 81       	ld	r26, Z
     c92:	b1 81       	ldd	r27, Z+1	; 0x01
     c94:	14 96       	adiw	r26, 0x04	; 4
     c96:	8c 91       	ld	r24, X
     c98:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) 
     c9a:	82 ff       	sbrs	r24, 2
     c9c:	03 c0       	rjmp	.+6      	; 0xca4 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
	{
		twi->result = TWIM_RESULT_BUS_ERROR;
     c9e:	94 e0       	ldi	r25, 0x04	; 4
     ca0:	90 8f       	std	Z+24, r25	; 0x18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	90 8f       	std	Z+24, r25	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     ca8:	88 60       	ori	r24, 0x08	; 8
     caa:	14 96       	adiw	r26, 0x04	; 4
     cac:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
     cae:	17 8a       	std	Z+23, r1	; 0x17
     cb0:	08 95       	ret

00000cb2 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
     cb8:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
     cba:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
     cbc:	a0 81       	ld	r26, Z
     cbe:	b1 81       	ldd	r27, Z+1	; 0x01
     cc0:	14 96       	adiw	r26, 0x04	; 4
     cc2:	8c 91       	ld	r24, X
     cc4:	14 97       	sbiw	r26, 0x04	; 4
     cc6:	84 ff       	sbrs	r24, 4
     cc8:	07 c0       	rjmp	.+14     	; 0xcd8 <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	13 96       	adiw	r26, 0x03	; 3
     cce:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
     cd0:	85 e0       	ldi	r24, 0x05	; 5
     cd2:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
     cd4:	17 8a       	std	Z+23, r1	; 0x17
     cd6:	1c c0       	rjmp	.+56     	; 0xd10 <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
     cd8:	85 89       	ldd	r24, Z+21	; 0x15
     cda:	89 17       	cp	r24, r25
     cdc:	58 f4       	brcc	.+22     	; 0xcf4 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
     cde:	85 89       	ldd	r24, Z+21	; 0x15
     ce0:	ef 01       	movw	r28, r30
     ce2:	c8 0f       	add	r28, r24
     ce4:	d1 1d       	adc	r29, r1
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
     ce8:	17 96       	adiw	r26, 0x07	; 7
     cea:	8c 93       	st	X, r24
		++twi->bytesWritten;
     cec:	85 89       	ldd	r24, Z+21	; 0x15
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	85 8b       	std	Z+21, r24	; 0x15
     cf2:	0e c0       	rjmp	.+28     	; 0xd10 <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
     cf4:	86 89       	ldd	r24, Z+22	; 0x16
     cf6:	82 17       	cp	r24, r18
     cf8:	28 f4       	brcc	.+10     	; 0xd04 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
     cfe:	16 96       	adiw	r26, 0x06	; 6
     d00:	8c 93       	st	X, r24
     d02:	06 c0       	rjmp	.+12     	; 0xd10 <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     d04:	83 e0       	ldi	r24, 0x03	; 3
     d06:	13 96       	adiw	r26, 0x03	; 3
     d08:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
     d0e:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret

00000d16 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
     d16:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
     d18:	86 89       	ldd	r24, Z+22	; 0x16
     d1a:	88 30       	cpi	r24, 0x08	; 8
     d1c:	70 f4       	brcc	.+28     	; 0xd3a <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
     d1e:	a0 81       	ld	r26, Z
     d20:	b1 81       	ldd	r27, Z+1	; 0x01
     d22:	17 96       	adiw	r26, 0x07	; 7
     d24:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
     d26:	96 89       	ldd	r25, Z+22	; 0x16
     d28:	df 01       	movw	r26, r30
     d2a:	a9 0f       	add	r26, r25
     d2c:	b1 1d       	adc	r27, r1
     d2e:	1b 96       	adiw	r26, 0x0b	; 11
     d30:	8c 93       	st	X, r24
		twi->bytesRead++;
     d32:	86 89       	ldd	r24, Z+22	; 0x16
     d34:	8f 5f       	subi	r24, 0xFF	; 255
     d36:	86 8b       	std	Z+22, r24	; 0x16
     d38:	08 c0       	rjmp	.+16     	; 0xd4a <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     d3a:	a0 81       	ld	r26, Z
     d3c:	b1 81       	ldd	r27, Z+1	; 0x01
     d3e:	83 e0       	ldi	r24, 0x03	; 3
     d40:	13 96       	adiw	r26, 0x03	; 3
     d42:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
     d48:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
     d4a:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
     d4c:	86 89       	ldd	r24, Z+22	; 0x16
     d4e:	89 17       	cp	r24, r25
     d50:	30 f4       	brcc	.+12     	; 0xd5e <TWI_MasterReadHandler+0x48>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     d52:	01 90       	ld	r0, Z+
     d54:	f0 81       	ld	r31, Z
     d56:	e0 2d       	mov	r30, r0
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	83 83       	std	Z+3, r24	; 0x03
     d5c:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
     d5e:	a0 81       	ld	r26, Z
     d60:	b1 81       	ldd	r27, Z+1	; 0x01
     d62:	87 e0       	ldi	r24, 0x07	; 7
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
     d6c:	17 8a       	std	Z+23, r1	; 0x17
     d6e:	08 95       	ret

00000d70 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
     d70:	dc 01       	movw	r26, r24
     d72:	ed 91       	ld	r30, X+
     d74:	fc 91       	ld	r31, X
     d76:	24 81       	ldd	r18, Z+4	; 0x04
     d78:	32 2f       	mov	r19, r18
     d7a:	3c 70       	andi	r19, 0x0C	; 12

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     d7c:	11 f0       	breq	.+4      	; 0xd82 <TWI_MasterInterruptHandler+0x12>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
     d7e:	87 cf       	rjmp	.-242    	; 0xc8e <TWI_MasterArbitrationLostBusErrorHandler>
     d80:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     d82:	26 ff       	sbrs	r18, 6
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <TWI_MasterInterruptHandler+0x1a>
		TWI_MasterWriteHandler(twi);
     d86:	95 cf       	rjmp	.-214    	; 0xcb2 <TWI_MasterWriteHandler>
     d88:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     d8a:	22 23       	and	r18, r18
     d8c:	14 f4       	brge	.+4      	; 0xd92 <TWI_MasterInterruptHandler+0x22>
		TWI_MasterReadHandler(twi);
     d8e:	c3 cf       	rjmp	.-122    	; 0xd16 <TWI_MasterReadHandler>
     d90:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     d92:	26 e0       	ldi	r18, 0x06	; 6
     d94:	fc 01       	movw	r30, r24
     d96:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
     d98:	17 8a       	std	Z+23, r1	; 0x17
     d9a:	08 95       	ret

00000d9c <main>:
#include "MS5611.h"
#define F_CPU 32000000UL

int main (void)
{
 	   set_micro();
     d9c:	0f df       	rcall	.-482    	; 0xbbc <set_micro>
       reset();
     d9e:	e9 dd       	rcall	.-1070   	; 0x972 <reset>
     

 while (1)
 {
   	    PORTE_OUTSET = PIN3_bm;  //LED 
     da0:	0f 2e       	mov	r0, r31
     da2:	f5 e8       	ldi	r31, 0x85	; 133
     da4:	6f 2e       	mov	r6, r31
     da6:	f6 e0       	ldi	r31, 0x06	; 6
     da8:	7f 2e       	mov	r7, r31
     daa:	f0 2d       	mov	r31, r0
    	read_PROM();
    	D_read();
    	calculate(n[0],n[1],n[2],n[3],n[4],n[5],m[0],m[1]);
     dac:	0f 2e       	mov	r0, r31
     dae:	f3 ec       	ldi	r31, 0xC3	; 195
     db0:	8f 2e       	mov	r8, r31
     db2:	f0 e2       	ldi	r31, 0x20	; 32
     db4:	9f 2e       	mov	r9, r31
     db6:	f0 2d       	mov	r31, r0
     db8:	0f 2e       	mov	r0, r31
     dba:	f3 ea       	ldi	r31, 0xA3	; 163
     dbc:	2f 2e       	mov	r2, r31
     dbe:	f0 e2       	ldi	r31, 0x20	; 32
     dc0:	3f 2e       	mov	r3, r31
     dc2:	f0 2d       	mov	r31, r0
     dc4:	0f 2e       	mov	r0, r31
     dc6:	f9 e9       	ldi	r31, 0x99	; 153
     dc8:	4f 2e       	mov	r4, r31
     dca:	f0 e2       	ldi	r31, 0x20	; 32
     dcc:	5f 2e       	mov	r5, r31
     dce:	f0 2d       	mov	r31, r0
     dd0:	c7 ec       	ldi	r28, 0xC7	; 199
     dd2:	d0 e2       	ldi	r29, 0x20	; 32
       reset();
     

 while (1)
 {
   	    PORTE_OUTSET = PIN3_bm;  //LED 
     dd4:	88 e0       	ldi	r24, 0x08	; 8
     dd6:	f3 01       	movw	r30, r6
     dd8:	80 83       	st	Z, r24
    	read_PROM();
     dda:	e4 dd       	rcall	.-1080   	; 0x9a4 <read_PROM>
    	D_read();
     ddc:	4f de       	rcall	.-866    	; 0xa7c <D_read>
    	calculate(n[0],n[1],n[2],n[3],n[4],n[5],m[0],m[1]);
     dde:	f4 01       	movw	r30, r8
     de0:	a0 80       	ld	r10, Z
     de2:	b1 80       	ldd	r11, Z+1	; 0x01
     de4:	c2 80       	ldd	r12, Z+2	; 0x02
     de6:	d3 80       	ldd	r13, Z+3	; 0x03
     de8:	f1 01       	movw	r30, r2
     dea:	e0 80       	ld	r14, Z
     dec:	f1 80       	ldd	r15, Z+1	; 0x01
     dee:	e1 ea       	ldi	r30, 0xA1	; 161
     df0:	f0 e2       	ldi	r31, 0x20	; 32
     df2:	00 81       	ld	r16, Z
     df4:	11 81       	ldd	r17, Z+1	; 0x01
     df6:	ef e9       	ldi	r30, 0x9F	; 159
     df8:	f0 e2       	ldi	r31, 0x20	; 32
     dfa:	20 81       	ld	r18, Z
     dfc:	31 81       	ldd	r19, Z+1	; 0x01
     dfe:	ed e9       	ldi	r30, 0x9D	; 157
     e00:	f0 e2       	ldi	r31, 0x20	; 32
     e02:	40 81       	ld	r20, Z
     e04:	51 81       	ldd	r21, Z+1	; 0x01
     e06:	eb e9       	ldi	r30, 0x9B	; 155
     e08:	f0 e2       	ldi	r31, 0x20	; 32
     e0a:	60 81       	ld	r22, Z
     e0c:	71 81       	ldd	r23, Z+1	; 0x01
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	8f 93       	push	r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	8f 93       	push	r24
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	8f 93       	push	r24
     e1a:	88 81       	ld	r24, Y
     e1c:	8f 93       	push	r24
     e1e:	f2 01       	movw	r30, r4
     e20:	80 81       	ld	r24, Z
     e22:	91 81       	ldd	r25, Z+1	; 0x01
     e24:	2e db       	rcall	.-2468   	; 0x482 <calculate>
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	d2 cf       	rjmp	.-92     	; 0xdd4 <main+0x38>

00000e30 <__vector_13>:
	
}


ISR(TWIC_TWIM_vect)
{
     e30:	1f 92       	push	r1
     e32:	0f 92       	push	r0
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	0f 92       	push	r0
     e38:	11 24       	eor	r1, r1
     e3a:	2f 93       	push	r18
     e3c:	3f 93       	push	r19
     e3e:	4f 93       	push	r20
     e40:	5f 93       	push	r21
     e42:	6f 93       	push	r22
     e44:	7f 93       	push	r23
     e46:	8f 93       	push	r24
     e48:	9f 93       	push	r25
     e4a:	af 93       	push	r26
     e4c:	bf 93       	push	r27
     e4e:	ef 93       	push	r30
     e50:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
     e52:	85 ea       	ldi	r24, 0xA5	; 165
     e54:	90 e2       	ldi	r25, 0x20	; 32
     e56:	8c df       	rcall	.-232    	; 0xd70 <TWI_MasterInterruptHandler>
}
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	bf 91       	pop	r27
     e5e:	af 91       	pop	r26
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	7f 91       	pop	r23
     e66:	6f 91       	pop	r22
     e68:	5f 91       	pop	r21
     e6a:	4f 91       	pop	r20
     e6c:	3f 91       	pop	r19
     e6e:	2f 91       	pop	r18
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	0f 90       	pop	r0
     e76:	1f 90       	pop	r1
     e78:	18 95       	reti

00000e7a <__vector_44>:


 ISR(PORTE_INT1_vect)
 {
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	11 24       	eor	r1, r1
     e84:	8f 93       	push	r24
 	//PORTE_OUTCLR = PIN3_bm;  //LED
	//while ((PORTE.IN&0x04)==0)  chera kar nakard??
	
	PORTE_OUTCLR = PIN3_bm;  //LED
     e86:	88 e0       	ldi	r24, 0x08	; 8
     e88:	80 93 86 06 	sts	0x0686, r24
	
	 	
     e8c:	8f 91       	pop	r24
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <__subsf3>:
     e98:	50 58       	subi	r21, 0x80	; 128

00000e9a <__addsf3>:
     e9a:	bb 27       	eor	r27, r27
     e9c:	aa 27       	eor	r26, r26
     e9e:	0e d0       	rcall	.+28     	; 0xebc <__addsf3x>
     ea0:	75 c1       	rjmp	.+746    	; 0x118c <__fp_round>
     ea2:	66 d1       	rcall	.+716    	; 0x1170 <__fp_pscA>
     ea4:	30 f0       	brcs	.+12     	; 0xeb2 <__addsf3+0x18>
     ea6:	6b d1       	rcall	.+726    	; 0x117e <__fp_pscB>
     ea8:	20 f0       	brcs	.+8      	; 0xeb2 <__addsf3+0x18>
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <__addsf3+0x1e>
     eac:	9f 3f       	cpi	r25, 0xFF	; 255
     eae:	11 f4       	brne	.+4      	; 0xeb4 <__addsf3+0x1a>
     eb0:	1e f4       	brtc	.+6      	; 0xeb8 <__addsf3+0x1e>
     eb2:	5b c1       	rjmp	.+694    	; 0x116a <__fp_nan>
     eb4:	0e f4       	brtc	.+2      	; 0xeb8 <__addsf3+0x1e>
     eb6:	e0 95       	com	r30
     eb8:	e7 fb       	bst	r30, 7
     eba:	51 c1       	rjmp	.+674    	; 0x115e <__fp_inf>

00000ebc <__addsf3x>:
     ebc:	e9 2f       	mov	r30, r25
     ebe:	77 d1       	rcall	.+750    	; 0x11ae <__fp_split3>
     ec0:	80 f3       	brcs	.-32     	; 0xea2 <__addsf3+0x8>
     ec2:	ba 17       	cp	r27, r26
     ec4:	62 07       	cpc	r22, r18
     ec6:	73 07       	cpc	r23, r19
     ec8:	84 07       	cpc	r24, r20
     eca:	95 07       	cpc	r25, r21
     ecc:	18 f0       	brcs	.+6      	; 0xed4 <__addsf3x+0x18>
     ece:	71 f4       	brne	.+28     	; 0xeec <__addsf3x+0x30>
     ed0:	9e f5       	brtc	.+102    	; 0xf38 <__addsf3x+0x7c>
     ed2:	8f c1       	rjmp	.+798    	; 0x11f2 <__fp_zero>
     ed4:	0e f4       	brtc	.+2      	; 0xed8 <__addsf3x+0x1c>
     ed6:	e0 95       	com	r30
     ed8:	0b 2e       	mov	r0, r27
     eda:	ba 2f       	mov	r27, r26
     edc:	a0 2d       	mov	r26, r0
     ede:	0b 01       	movw	r0, r22
     ee0:	b9 01       	movw	r22, r18
     ee2:	90 01       	movw	r18, r0
     ee4:	0c 01       	movw	r0, r24
     ee6:	ca 01       	movw	r24, r20
     ee8:	a0 01       	movw	r20, r0
     eea:	11 24       	eor	r1, r1
     eec:	ff 27       	eor	r31, r31
     eee:	59 1b       	sub	r21, r25
     ef0:	99 f0       	breq	.+38     	; 0xf18 <__addsf3x+0x5c>
     ef2:	59 3f       	cpi	r21, 0xF9	; 249
     ef4:	50 f4       	brcc	.+20     	; 0xf0a <__addsf3x+0x4e>
     ef6:	50 3e       	cpi	r21, 0xE0	; 224
     ef8:	68 f1       	brcs	.+90     	; 0xf54 <__addsf3x+0x98>
     efa:	1a 16       	cp	r1, r26
     efc:	f0 40       	sbci	r31, 0x00	; 0
     efe:	a2 2f       	mov	r26, r18
     f00:	23 2f       	mov	r18, r19
     f02:	34 2f       	mov	r19, r20
     f04:	44 27       	eor	r20, r20
     f06:	58 5f       	subi	r21, 0xF8	; 248
     f08:	f3 cf       	rjmp	.-26     	; 0xef0 <__addsf3x+0x34>
     f0a:	46 95       	lsr	r20
     f0c:	37 95       	ror	r19
     f0e:	27 95       	ror	r18
     f10:	a7 95       	ror	r26
     f12:	f0 40       	sbci	r31, 0x00	; 0
     f14:	53 95       	inc	r21
     f16:	c9 f7       	brne	.-14     	; 0xf0a <__addsf3x+0x4e>
     f18:	7e f4       	brtc	.+30     	; 0xf38 <__addsf3x+0x7c>
     f1a:	1f 16       	cp	r1, r31
     f1c:	ba 0b       	sbc	r27, r26
     f1e:	62 0b       	sbc	r22, r18
     f20:	73 0b       	sbc	r23, r19
     f22:	84 0b       	sbc	r24, r20
     f24:	ba f0       	brmi	.+46     	; 0xf54 <__addsf3x+0x98>
     f26:	91 50       	subi	r25, 0x01	; 1
     f28:	a1 f0       	breq	.+40     	; 0xf52 <__addsf3x+0x96>
     f2a:	ff 0f       	add	r31, r31
     f2c:	bb 1f       	adc	r27, r27
     f2e:	66 1f       	adc	r22, r22
     f30:	77 1f       	adc	r23, r23
     f32:	88 1f       	adc	r24, r24
     f34:	c2 f7       	brpl	.-16     	; 0xf26 <__addsf3x+0x6a>
     f36:	0e c0       	rjmp	.+28     	; 0xf54 <__addsf3x+0x98>
     f38:	ba 0f       	add	r27, r26
     f3a:	62 1f       	adc	r22, r18
     f3c:	73 1f       	adc	r23, r19
     f3e:	84 1f       	adc	r24, r20
     f40:	48 f4       	brcc	.+18     	; 0xf54 <__addsf3x+0x98>
     f42:	87 95       	ror	r24
     f44:	77 95       	ror	r23
     f46:	67 95       	ror	r22
     f48:	b7 95       	ror	r27
     f4a:	f7 95       	ror	r31
     f4c:	9e 3f       	cpi	r25, 0xFE	; 254
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <__addsf3x+0x96>
     f50:	b3 cf       	rjmp	.-154    	; 0xeb8 <__addsf3+0x1e>
     f52:	93 95       	inc	r25
     f54:	88 0f       	add	r24, r24
     f56:	08 f0       	brcs	.+2      	; 0xf5a <__addsf3x+0x9e>
     f58:	99 27       	eor	r25, r25
     f5a:	ee 0f       	add	r30, r30
     f5c:	97 95       	ror	r25
     f5e:	87 95       	ror	r24
     f60:	08 95       	ret

00000f62 <__cmpsf2>:
     f62:	d9 d0       	rcall	.+434    	; 0x1116 <__fp_cmp>
     f64:	08 f4       	brcc	.+2      	; 0xf68 <__cmpsf2+0x6>
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	08 95       	ret

00000f6a <__divsf3>:
     f6a:	0c d0       	rcall	.+24     	; 0xf84 <__divsf3x>
     f6c:	0f c1       	rjmp	.+542    	; 0x118c <__fp_round>
     f6e:	07 d1       	rcall	.+526    	; 0x117e <__fp_pscB>
     f70:	40 f0       	brcs	.+16     	; 0xf82 <__divsf3+0x18>
     f72:	fe d0       	rcall	.+508    	; 0x1170 <__fp_pscA>
     f74:	30 f0       	brcs	.+12     	; 0xf82 <__divsf3+0x18>
     f76:	21 f4       	brne	.+8      	; 0xf80 <__divsf3+0x16>
     f78:	5f 3f       	cpi	r21, 0xFF	; 255
     f7a:	19 f0       	breq	.+6      	; 0xf82 <__divsf3+0x18>
     f7c:	f0 c0       	rjmp	.+480    	; 0x115e <__fp_inf>
     f7e:	51 11       	cpse	r21, r1
     f80:	39 c1       	rjmp	.+626    	; 0x11f4 <__fp_szero>
     f82:	f3 c0       	rjmp	.+486    	; 0x116a <__fp_nan>

00000f84 <__divsf3x>:
     f84:	14 d1       	rcall	.+552    	; 0x11ae <__fp_split3>
     f86:	98 f3       	brcs	.-26     	; 0xf6e <__divsf3+0x4>

00000f88 <__divsf3_pse>:
     f88:	99 23       	and	r25, r25
     f8a:	c9 f3       	breq	.-14     	; 0xf7e <__divsf3+0x14>
     f8c:	55 23       	and	r21, r21
     f8e:	b1 f3       	breq	.-20     	; 0xf7c <__divsf3+0x12>
     f90:	95 1b       	sub	r25, r21
     f92:	55 0b       	sbc	r21, r21
     f94:	bb 27       	eor	r27, r27
     f96:	aa 27       	eor	r26, r26
     f98:	62 17       	cp	r22, r18
     f9a:	73 07       	cpc	r23, r19
     f9c:	84 07       	cpc	r24, r20
     f9e:	38 f0       	brcs	.+14     	; 0xfae <__divsf3_pse+0x26>
     fa0:	9f 5f       	subi	r25, 0xFF	; 255
     fa2:	5f 4f       	sbci	r21, 0xFF	; 255
     fa4:	22 0f       	add	r18, r18
     fa6:	33 1f       	adc	r19, r19
     fa8:	44 1f       	adc	r20, r20
     faa:	aa 1f       	adc	r26, r26
     fac:	a9 f3       	breq	.-22     	; 0xf98 <__divsf3_pse+0x10>
     fae:	33 d0       	rcall	.+102    	; 0x1016 <__divsf3_pse+0x8e>
     fb0:	0e 2e       	mov	r0, r30
     fb2:	3a f0       	brmi	.+14     	; 0xfc2 <__divsf3_pse+0x3a>
     fb4:	e0 e8       	ldi	r30, 0x80	; 128
     fb6:	30 d0       	rcall	.+96     	; 0x1018 <__divsf3_pse+0x90>
     fb8:	91 50       	subi	r25, 0x01	; 1
     fba:	50 40       	sbci	r21, 0x00	; 0
     fbc:	e6 95       	lsr	r30
     fbe:	00 1c       	adc	r0, r0
     fc0:	ca f7       	brpl	.-14     	; 0xfb4 <__divsf3_pse+0x2c>
     fc2:	29 d0       	rcall	.+82     	; 0x1016 <__divsf3_pse+0x8e>
     fc4:	fe 2f       	mov	r31, r30
     fc6:	27 d0       	rcall	.+78     	; 0x1016 <__divsf3_pse+0x8e>
     fc8:	66 0f       	add	r22, r22
     fca:	77 1f       	adc	r23, r23
     fcc:	88 1f       	adc	r24, r24
     fce:	bb 1f       	adc	r27, r27
     fd0:	26 17       	cp	r18, r22
     fd2:	37 07       	cpc	r19, r23
     fd4:	48 07       	cpc	r20, r24
     fd6:	ab 07       	cpc	r26, r27
     fd8:	b0 e8       	ldi	r27, 0x80	; 128
     fda:	09 f0       	breq	.+2      	; 0xfde <__divsf3_pse+0x56>
     fdc:	bb 0b       	sbc	r27, r27
     fde:	80 2d       	mov	r24, r0
     fe0:	bf 01       	movw	r22, r30
     fe2:	ff 27       	eor	r31, r31
     fe4:	93 58       	subi	r25, 0x83	; 131
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	2a f0       	brmi	.+10     	; 0xff4 <__divsf3_pse+0x6c>
     fea:	9e 3f       	cpi	r25, 0xFE	; 254
     fec:	51 05       	cpc	r21, r1
     fee:	68 f0       	brcs	.+26     	; 0x100a <__divsf3_pse+0x82>
     ff0:	b6 c0       	rjmp	.+364    	; 0x115e <__fp_inf>
     ff2:	00 c1       	rjmp	.+512    	; 0x11f4 <__fp_szero>
     ff4:	5f 3f       	cpi	r21, 0xFF	; 255
     ff6:	ec f3       	brlt	.-6      	; 0xff2 <__divsf3_pse+0x6a>
     ff8:	98 3e       	cpi	r25, 0xE8	; 232
     ffa:	dc f3       	brlt	.-10     	; 0xff2 <__divsf3_pse+0x6a>
     ffc:	86 95       	lsr	r24
     ffe:	77 95       	ror	r23
    1000:	67 95       	ror	r22
    1002:	b7 95       	ror	r27
    1004:	f7 95       	ror	r31
    1006:	9f 5f       	subi	r25, 0xFF	; 255
    1008:	c9 f7       	brne	.-14     	; 0xffc <__divsf3_pse+0x74>
    100a:	88 0f       	add	r24, r24
    100c:	91 1d       	adc	r25, r1
    100e:	96 95       	lsr	r25
    1010:	87 95       	ror	r24
    1012:	97 f9       	bld	r25, 7
    1014:	08 95       	ret
    1016:	e1 e0       	ldi	r30, 0x01	; 1
    1018:	66 0f       	add	r22, r22
    101a:	77 1f       	adc	r23, r23
    101c:	88 1f       	adc	r24, r24
    101e:	bb 1f       	adc	r27, r27
    1020:	62 17       	cp	r22, r18
    1022:	73 07       	cpc	r23, r19
    1024:	84 07       	cpc	r24, r20
    1026:	ba 07       	cpc	r27, r26
    1028:	20 f0       	brcs	.+8      	; 0x1032 <__divsf3_pse+0xaa>
    102a:	62 1b       	sub	r22, r18
    102c:	73 0b       	sbc	r23, r19
    102e:	84 0b       	sbc	r24, r20
    1030:	ba 0b       	sbc	r27, r26
    1032:	ee 1f       	adc	r30, r30
    1034:	88 f7       	brcc	.-30     	; 0x1018 <__divsf3_pse+0x90>
    1036:	e0 95       	com	r30
    1038:	08 95       	ret

0000103a <__fixsfsi>:
    103a:	04 d0       	rcall	.+8      	; 0x1044 <__fixunssfsi>
    103c:	68 94       	set
    103e:	b1 11       	cpse	r27, r1
    1040:	d9 c0       	rjmp	.+434    	; 0x11f4 <__fp_szero>
    1042:	08 95       	ret

00001044 <__fixunssfsi>:
    1044:	bc d0       	rcall	.+376    	; 0x11be <__fp_splitA>
    1046:	88 f0       	brcs	.+34     	; 0x106a <__fixunssfsi+0x26>
    1048:	9f 57       	subi	r25, 0x7F	; 127
    104a:	90 f0       	brcs	.+36     	; 0x1070 <__fixunssfsi+0x2c>
    104c:	b9 2f       	mov	r27, r25
    104e:	99 27       	eor	r25, r25
    1050:	b7 51       	subi	r27, 0x17	; 23
    1052:	a0 f0       	brcs	.+40     	; 0x107c <__fixunssfsi+0x38>
    1054:	d1 f0       	breq	.+52     	; 0x108a <__fixunssfsi+0x46>
    1056:	66 0f       	add	r22, r22
    1058:	77 1f       	adc	r23, r23
    105a:	88 1f       	adc	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	1a f0       	brmi	.+6      	; 0x1066 <__fixunssfsi+0x22>
    1060:	ba 95       	dec	r27
    1062:	c9 f7       	brne	.-14     	; 0x1056 <__fixunssfsi+0x12>
    1064:	12 c0       	rjmp	.+36     	; 0x108a <__fixunssfsi+0x46>
    1066:	b1 30       	cpi	r27, 0x01	; 1
    1068:	81 f0       	breq	.+32     	; 0x108a <__fixunssfsi+0x46>
    106a:	c3 d0       	rcall	.+390    	; 0x11f2 <__fp_zero>
    106c:	b1 e0       	ldi	r27, 0x01	; 1
    106e:	08 95       	ret
    1070:	c0 c0       	rjmp	.+384    	; 0x11f2 <__fp_zero>
    1072:	67 2f       	mov	r22, r23
    1074:	78 2f       	mov	r23, r24
    1076:	88 27       	eor	r24, r24
    1078:	b8 5f       	subi	r27, 0xF8	; 248
    107a:	39 f0       	breq	.+14     	; 0x108a <__fixunssfsi+0x46>
    107c:	b9 3f       	cpi	r27, 0xF9	; 249
    107e:	cc f3       	brlt	.-14     	; 0x1072 <__fixunssfsi+0x2e>
    1080:	86 95       	lsr	r24
    1082:	77 95       	ror	r23
    1084:	67 95       	ror	r22
    1086:	b3 95       	inc	r27
    1088:	d9 f7       	brne	.-10     	; 0x1080 <__fixunssfsi+0x3c>
    108a:	3e f4       	brtc	.+14     	; 0x109a <__fixunssfsi+0x56>
    108c:	90 95       	com	r25
    108e:	80 95       	com	r24
    1090:	70 95       	com	r23
    1092:	61 95       	neg	r22
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	8f 4f       	sbci	r24, 0xFF	; 255
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	08 95       	ret

0000109c <__floatunsisf>:
    109c:	e8 94       	clt
    109e:	09 c0       	rjmp	.+18     	; 0x10b2 <__floatsisf+0x12>

000010a0 <__floatsisf>:
    10a0:	97 fb       	bst	r25, 7
    10a2:	3e f4       	brtc	.+14     	; 0x10b2 <__floatsisf+0x12>
    10a4:	90 95       	com	r25
    10a6:	80 95       	com	r24
    10a8:	70 95       	com	r23
    10aa:	61 95       	neg	r22
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	8f 4f       	sbci	r24, 0xFF	; 255
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	99 23       	and	r25, r25
    10b4:	a9 f0       	breq	.+42     	; 0x10e0 <__floatsisf+0x40>
    10b6:	f9 2f       	mov	r31, r25
    10b8:	96 e9       	ldi	r25, 0x96	; 150
    10ba:	bb 27       	eor	r27, r27
    10bc:	93 95       	inc	r25
    10be:	f6 95       	lsr	r31
    10c0:	87 95       	ror	r24
    10c2:	77 95       	ror	r23
    10c4:	67 95       	ror	r22
    10c6:	b7 95       	ror	r27
    10c8:	f1 11       	cpse	r31, r1
    10ca:	f8 cf       	rjmp	.-16     	; 0x10bc <__floatsisf+0x1c>
    10cc:	fa f4       	brpl	.+62     	; 0x110c <__floatsisf+0x6c>
    10ce:	bb 0f       	add	r27, r27
    10d0:	11 f4       	brne	.+4      	; 0x10d6 <__floatsisf+0x36>
    10d2:	60 ff       	sbrs	r22, 0
    10d4:	1b c0       	rjmp	.+54     	; 0x110c <__floatsisf+0x6c>
    10d6:	6f 5f       	subi	r22, 0xFF	; 255
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	8f 4f       	sbci	r24, 0xFF	; 255
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	16 c0       	rjmp	.+44     	; 0x110c <__floatsisf+0x6c>
    10e0:	88 23       	and	r24, r24
    10e2:	11 f0       	breq	.+4      	; 0x10e8 <__floatsisf+0x48>
    10e4:	96 e9       	ldi	r25, 0x96	; 150
    10e6:	11 c0       	rjmp	.+34     	; 0x110a <__floatsisf+0x6a>
    10e8:	77 23       	and	r23, r23
    10ea:	21 f0       	breq	.+8      	; 0x10f4 <__floatsisf+0x54>
    10ec:	9e e8       	ldi	r25, 0x8E	; 142
    10ee:	87 2f       	mov	r24, r23
    10f0:	76 2f       	mov	r23, r22
    10f2:	05 c0       	rjmp	.+10     	; 0x10fe <__floatsisf+0x5e>
    10f4:	66 23       	and	r22, r22
    10f6:	71 f0       	breq	.+28     	; 0x1114 <__floatsisf+0x74>
    10f8:	96 e8       	ldi	r25, 0x86	; 134
    10fa:	86 2f       	mov	r24, r22
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	2a f0       	brmi	.+10     	; 0x110c <__floatsisf+0x6c>
    1102:	9a 95       	dec	r25
    1104:	66 0f       	add	r22, r22
    1106:	77 1f       	adc	r23, r23
    1108:	88 1f       	adc	r24, r24
    110a:	da f7       	brpl	.-10     	; 0x1102 <__floatsisf+0x62>
    110c:	88 0f       	add	r24, r24
    110e:	96 95       	lsr	r25
    1110:	87 95       	ror	r24
    1112:	97 f9       	bld	r25, 7
    1114:	08 95       	ret

00001116 <__fp_cmp>:
    1116:	99 0f       	add	r25, r25
    1118:	00 08       	sbc	r0, r0
    111a:	55 0f       	add	r21, r21
    111c:	aa 0b       	sbc	r26, r26
    111e:	e0 e8       	ldi	r30, 0x80	; 128
    1120:	fe ef       	ldi	r31, 0xFE	; 254
    1122:	16 16       	cp	r1, r22
    1124:	17 06       	cpc	r1, r23
    1126:	e8 07       	cpc	r30, r24
    1128:	f9 07       	cpc	r31, r25
    112a:	c0 f0       	brcs	.+48     	; 0x115c <__fp_cmp+0x46>
    112c:	12 16       	cp	r1, r18
    112e:	13 06       	cpc	r1, r19
    1130:	e4 07       	cpc	r30, r20
    1132:	f5 07       	cpc	r31, r21
    1134:	98 f0       	brcs	.+38     	; 0x115c <__fp_cmp+0x46>
    1136:	62 1b       	sub	r22, r18
    1138:	73 0b       	sbc	r23, r19
    113a:	84 0b       	sbc	r24, r20
    113c:	95 0b       	sbc	r25, r21
    113e:	39 f4       	brne	.+14     	; 0x114e <__fp_cmp+0x38>
    1140:	0a 26       	eor	r0, r26
    1142:	61 f0       	breq	.+24     	; 0x115c <__fp_cmp+0x46>
    1144:	23 2b       	or	r18, r19
    1146:	24 2b       	or	r18, r20
    1148:	25 2b       	or	r18, r21
    114a:	21 f4       	brne	.+8      	; 0x1154 <__fp_cmp+0x3e>
    114c:	08 95       	ret
    114e:	0a 26       	eor	r0, r26
    1150:	09 f4       	brne	.+2      	; 0x1154 <__fp_cmp+0x3e>
    1152:	a1 40       	sbci	r26, 0x01	; 1
    1154:	a6 95       	lsr	r26
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	81 1d       	adc	r24, r1
    115a:	81 1d       	adc	r24, r1
    115c:	08 95       	ret

0000115e <__fp_inf>:
    115e:	97 f9       	bld	r25, 7
    1160:	9f 67       	ori	r25, 0x7F	; 127
    1162:	80 e8       	ldi	r24, 0x80	; 128
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	08 95       	ret

0000116a <__fp_nan>:
    116a:	9f ef       	ldi	r25, 0xFF	; 255
    116c:	80 ec       	ldi	r24, 0xC0	; 192
    116e:	08 95       	ret

00001170 <__fp_pscA>:
    1170:	00 24       	eor	r0, r0
    1172:	0a 94       	dec	r0
    1174:	16 16       	cp	r1, r22
    1176:	17 06       	cpc	r1, r23
    1178:	18 06       	cpc	r1, r24
    117a:	09 06       	cpc	r0, r25
    117c:	08 95       	ret

0000117e <__fp_pscB>:
    117e:	00 24       	eor	r0, r0
    1180:	0a 94       	dec	r0
    1182:	12 16       	cp	r1, r18
    1184:	13 06       	cpc	r1, r19
    1186:	14 06       	cpc	r1, r20
    1188:	05 06       	cpc	r0, r21
    118a:	08 95       	ret

0000118c <__fp_round>:
    118c:	09 2e       	mov	r0, r25
    118e:	03 94       	inc	r0
    1190:	00 0c       	add	r0, r0
    1192:	11 f4       	brne	.+4      	; 0x1198 <__fp_round+0xc>
    1194:	88 23       	and	r24, r24
    1196:	52 f0       	brmi	.+20     	; 0x11ac <__fp_round+0x20>
    1198:	bb 0f       	add	r27, r27
    119a:	40 f4       	brcc	.+16     	; 0x11ac <__fp_round+0x20>
    119c:	bf 2b       	or	r27, r31
    119e:	11 f4       	brne	.+4      	; 0x11a4 <__fp_round+0x18>
    11a0:	60 ff       	sbrs	r22, 0
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <__fp_round+0x20>
    11a4:	6f 5f       	subi	r22, 0xFF	; 255
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	8f 4f       	sbci	r24, 0xFF	; 255
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255
    11ac:	08 95       	ret

000011ae <__fp_split3>:
    11ae:	57 fd       	sbrc	r21, 7
    11b0:	90 58       	subi	r25, 0x80	; 128
    11b2:	44 0f       	add	r20, r20
    11b4:	55 1f       	adc	r21, r21
    11b6:	59 f0       	breq	.+22     	; 0x11ce <__fp_splitA+0x10>
    11b8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ba:	71 f0       	breq	.+28     	; 0x11d8 <__fp_splitA+0x1a>
    11bc:	47 95       	ror	r20

000011be <__fp_splitA>:
    11be:	88 0f       	add	r24, r24
    11c0:	97 fb       	bst	r25, 7
    11c2:	99 1f       	adc	r25, r25
    11c4:	61 f0       	breq	.+24     	; 0x11de <__fp_splitA+0x20>
    11c6:	9f 3f       	cpi	r25, 0xFF	; 255
    11c8:	79 f0       	breq	.+30     	; 0x11e8 <__fp_splitA+0x2a>
    11ca:	87 95       	ror	r24
    11cc:	08 95       	ret
    11ce:	12 16       	cp	r1, r18
    11d0:	13 06       	cpc	r1, r19
    11d2:	14 06       	cpc	r1, r20
    11d4:	55 1f       	adc	r21, r21
    11d6:	f2 cf       	rjmp	.-28     	; 0x11bc <__fp_split3+0xe>
    11d8:	46 95       	lsr	r20
    11da:	f1 df       	rcall	.-30     	; 0x11be <__fp_splitA>
    11dc:	08 c0       	rjmp	.+16     	; 0x11ee <__fp_splitA+0x30>
    11de:	16 16       	cp	r1, r22
    11e0:	17 06       	cpc	r1, r23
    11e2:	18 06       	cpc	r1, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	f1 cf       	rjmp	.-30     	; 0x11ca <__fp_splitA+0xc>
    11e8:	86 95       	lsr	r24
    11ea:	71 05       	cpc	r23, r1
    11ec:	61 05       	cpc	r22, r1
    11ee:	08 94       	sec
    11f0:	08 95       	ret

000011f2 <__fp_zero>:
    11f2:	e8 94       	clt

000011f4 <__fp_szero>:
    11f4:	bb 27       	eor	r27, r27
    11f6:	66 27       	eor	r22, r22
    11f8:	77 27       	eor	r23, r23
    11fa:	cb 01       	movw	r24, r22
    11fc:	97 f9       	bld	r25, 7
    11fe:	08 95       	ret

00001200 <__mulsf3>:
    1200:	0b d0       	rcall	.+22     	; 0x1218 <__mulsf3x>
    1202:	c4 cf       	rjmp	.-120    	; 0x118c <__fp_round>
    1204:	b5 df       	rcall	.-150    	; 0x1170 <__fp_pscA>
    1206:	28 f0       	brcs	.+10     	; 0x1212 <__mulsf3+0x12>
    1208:	ba df       	rcall	.-140    	; 0x117e <__fp_pscB>
    120a:	18 f0       	brcs	.+6      	; 0x1212 <__mulsf3+0x12>
    120c:	95 23       	and	r25, r21
    120e:	09 f0       	breq	.+2      	; 0x1212 <__mulsf3+0x12>
    1210:	a6 cf       	rjmp	.-180    	; 0x115e <__fp_inf>
    1212:	ab cf       	rjmp	.-170    	; 0x116a <__fp_nan>
    1214:	11 24       	eor	r1, r1
    1216:	ee cf       	rjmp	.-36     	; 0x11f4 <__fp_szero>

00001218 <__mulsf3x>:
    1218:	ca df       	rcall	.-108    	; 0x11ae <__fp_split3>
    121a:	a0 f3       	brcs	.-24     	; 0x1204 <__mulsf3+0x4>

0000121c <__mulsf3_pse>:
    121c:	95 9f       	mul	r25, r21
    121e:	d1 f3       	breq	.-12     	; 0x1214 <__mulsf3+0x14>
    1220:	95 0f       	add	r25, r21
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	55 1f       	adc	r21, r21
    1226:	62 9f       	mul	r22, r18
    1228:	f0 01       	movw	r30, r0
    122a:	72 9f       	mul	r23, r18
    122c:	bb 27       	eor	r27, r27
    122e:	f0 0d       	add	r31, r0
    1230:	b1 1d       	adc	r27, r1
    1232:	63 9f       	mul	r22, r19
    1234:	aa 27       	eor	r26, r26
    1236:	f0 0d       	add	r31, r0
    1238:	b1 1d       	adc	r27, r1
    123a:	aa 1f       	adc	r26, r26
    123c:	64 9f       	mul	r22, r20
    123e:	66 27       	eor	r22, r22
    1240:	b0 0d       	add	r27, r0
    1242:	a1 1d       	adc	r26, r1
    1244:	66 1f       	adc	r22, r22
    1246:	82 9f       	mul	r24, r18
    1248:	22 27       	eor	r18, r18
    124a:	b0 0d       	add	r27, r0
    124c:	a1 1d       	adc	r26, r1
    124e:	62 1f       	adc	r22, r18
    1250:	73 9f       	mul	r23, r19
    1252:	b0 0d       	add	r27, r0
    1254:	a1 1d       	adc	r26, r1
    1256:	62 1f       	adc	r22, r18
    1258:	83 9f       	mul	r24, r19
    125a:	a0 0d       	add	r26, r0
    125c:	61 1d       	adc	r22, r1
    125e:	22 1f       	adc	r18, r18
    1260:	74 9f       	mul	r23, r20
    1262:	33 27       	eor	r19, r19
    1264:	a0 0d       	add	r26, r0
    1266:	61 1d       	adc	r22, r1
    1268:	23 1f       	adc	r18, r19
    126a:	84 9f       	mul	r24, r20
    126c:	60 0d       	add	r22, r0
    126e:	21 1d       	adc	r18, r1
    1270:	82 2f       	mov	r24, r18
    1272:	76 2f       	mov	r23, r22
    1274:	6a 2f       	mov	r22, r26
    1276:	11 24       	eor	r1, r1
    1278:	9f 57       	subi	r25, 0x7F	; 127
    127a:	50 40       	sbci	r21, 0x00	; 0
    127c:	8a f0       	brmi	.+34     	; 0x12a0 <__mulsf3_pse+0x84>
    127e:	e1 f0       	breq	.+56     	; 0x12b8 <__mulsf3_pse+0x9c>
    1280:	88 23       	and	r24, r24
    1282:	4a f0       	brmi	.+18     	; 0x1296 <__mulsf3_pse+0x7a>
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	bb 1f       	adc	r27, r27
    128a:	66 1f       	adc	r22, r22
    128c:	77 1f       	adc	r23, r23
    128e:	88 1f       	adc	r24, r24
    1290:	91 50       	subi	r25, 0x01	; 1
    1292:	50 40       	sbci	r21, 0x00	; 0
    1294:	a9 f7       	brne	.-22     	; 0x1280 <__mulsf3_pse+0x64>
    1296:	9e 3f       	cpi	r25, 0xFE	; 254
    1298:	51 05       	cpc	r21, r1
    129a:	70 f0       	brcs	.+28     	; 0x12b8 <__mulsf3_pse+0x9c>
    129c:	60 cf       	rjmp	.-320    	; 0x115e <__fp_inf>
    129e:	aa cf       	rjmp	.-172    	; 0x11f4 <__fp_szero>
    12a0:	5f 3f       	cpi	r21, 0xFF	; 255
    12a2:	ec f3       	brlt	.-6      	; 0x129e <__mulsf3_pse+0x82>
    12a4:	98 3e       	cpi	r25, 0xE8	; 232
    12a6:	dc f3       	brlt	.-10     	; 0x129e <__mulsf3_pse+0x82>
    12a8:	86 95       	lsr	r24
    12aa:	77 95       	ror	r23
    12ac:	67 95       	ror	r22
    12ae:	b7 95       	ror	r27
    12b0:	f7 95       	ror	r31
    12b2:	e7 95       	ror	r30
    12b4:	9f 5f       	subi	r25, 0xFF	; 255
    12b6:	c1 f7       	brne	.-16     	; 0x12a8 <__mulsf3_pse+0x8c>
    12b8:	fe 2b       	or	r31, r30
    12ba:	88 0f       	add	r24, r24
    12bc:	91 1d       	adc	r25, r1
    12be:	96 95       	lsr	r25
    12c0:	87 95       	ror	r24
    12c2:	97 f9       	bld	r25, 7
    12c4:	08 95       	ret

000012c6 <__udivmodsi4>:
    12c6:	a1 e2       	ldi	r26, 0x21	; 33
    12c8:	1a 2e       	mov	r1, r26
    12ca:	aa 1b       	sub	r26, r26
    12cc:	bb 1b       	sub	r27, r27
    12ce:	fd 01       	movw	r30, r26
    12d0:	0d c0       	rjmp	.+26     	; 0x12ec <__udivmodsi4_ep>

000012d2 <__udivmodsi4_loop>:
    12d2:	aa 1f       	adc	r26, r26
    12d4:	bb 1f       	adc	r27, r27
    12d6:	ee 1f       	adc	r30, r30
    12d8:	ff 1f       	adc	r31, r31
    12da:	a2 17       	cp	r26, r18
    12dc:	b3 07       	cpc	r27, r19
    12de:	e4 07       	cpc	r30, r20
    12e0:	f5 07       	cpc	r31, r21
    12e2:	20 f0       	brcs	.+8      	; 0x12ec <__udivmodsi4_ep>
    12e4:	a2 1b       	sub	r26, r18
    12e6:	b3 0b       	sbc	r27, r19
    12e8:	e4 0b       	sbc	r30, r20
    12ea:	f5 0b       	sbc	r31, r21

000012ec <__udivmodsi4_ep>:
    12ec:	66 1f       	adc	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	1a 94       	dec	r1
    12f6:	69 f7       	brne	.-38     	; 0x12d2 <__udivmodsi4_loop>
    12f8:	60 95       	com	r22
    12fa:	70 95       	com	r23
    12fc:	80 95       	com	r24
    12fe:	90 95       	com	r25
    1300:	9b 01       	movw	r18, r22
    1302:	ac 01       	movw	r20, r24
    1304:	bd 01       	movw	r22, r26
    1306:	cf 01       	movw	r24, r30
    1308:	08 95       	ret

0000130a <sprintf>:
    130a:	ae e0       	ldi	r26, 0x0E	; 14
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ea e8       	ldi	r30, 0x8A	; 138
    1310:	f9 e0       	ldi	r31, 0x09	; 9
    1312:	91 c2       	rjmp	.+1314   	; 0x1836 <__prologue_saves__+0x1c>
    1314:	0d 89       	ldd	r16, Y+21	; 0x15
    1316:	1e 89       	ldd	r17, Y+22	; 0x16
    1318:	86 e0       	ldi	r24, 0x06	; 6
    131a:	8c 83       	std	Y+4, r24	; 0x04
    131c:	09 83       	std	Y+1, r16	; 0x01
    131e:	1a 83       	std	Y+2, r17	; 0x02
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	9f e7       	ldi	r25, 0x7F	; 127
    1324:	8d 83       	std	Y+5, r24	; 0x05
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	ae 01       	movw	r20, r28
    132a:	47 5e       	subi	r20, 0xE7	; 231
    132c:	5f 4f       	sbci	r21, 0xFF	; 255
    132e:	6f 89       	ldd	r22, Y+23	; 0x17
    1330:	78 8d       	ldd	r23, Y+24	; 0x18
    1332:	ce 01       	movw	r24, r28
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	08 d0       	rcall	.+16     	; 0x1348 <vfprintf>
    1338:	ef 81       	ldd	r30, Y+7	; 0x07
    133a:	f8 85       	ldd	r31, Y+8	; 0x08
    133c:	e0 0f       	add	r30, r16
    133e:	f1 1f       	adc	r31, r17
    1340:	10 82       	st	Z, r1
    1342:	2e 96       	adiw	r28, 0x0e	; 14
    1344:	e4 e0       	ldi	r30, 0x04	; 4
    1346:	90 c2       	rjmp	.+1312   	; 0x1868 <__epilogue_restores__+0x1c>

00001348 <vfprintf>:
    1348:	ac e0       	ldi	r26, 0x0C	; 12
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e9 ea       	ldi	r30, 0xA9	; 169
    134e:	f9 e0       	ldi	r31, 0x09	; 9
    1350:	64 c2       	rjmp	.+1224   	; 0x181a <__prologue_saves__>
    1352:	7c 01       	movw	r14, r24
    1354:	6b 01       	movw	r12, r22
    1356:	8a 01       	movw	r16, r20
    1358:	fc 01       	movw	r30, r24
    135a:	16 82       	std	Z+6, r1	; 0x06
    135c:	17 82       	std	Z+7, r1	; 0x07
    135e:	83 81       	ldd	r24, Z+3	; 0x03
    1360:	81 ff       	sbrs	r24, 1
    1362:	b0 c1       	rjmp	.+864    	; 0x16c4 <vfprintf+0x37c>
    1364:	ce 01       	movw	r24, r28
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	4c 01       	movw	r8, r24
    136a:	f7 01       	movw	r30, r14
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	f6 01       	movw	r30, r12
    1370:	93 fd       	sbrc	r25, 3
    1372:	85 91       	lpm	r24, Z+
    1374:	93 ff       	sbrs	r25, 3
    1376:	81 91       	ld	r24, Z+
    1378:	6f 01       	movw	r12, r30
    137a:	88 23       	and	r24, r24
    137c:	09 f4       	brne	.+2      	; 0x1380 <vfprintf+0x38>
    137e:	9e c1       	rjmp	.+828    	; 0x16bc <vfprintf+0x374>
    1380:	85 32       	cpi	r24, 0x25	; 37
    1382:	39 f4       	brne	.+14     	; 0x1392 <vfprintf+0x4a>
    1384:	93 fd       	sbrc	r25, 3
    1386:	85 91       	lpm	r24, Z+
    1388:	93 ff       	sbrs	r25, 3
    138a:	81 91       	ld	r24, Z+
    138c:	6f 01       	movw	r12, r30
    138e:	85 32       	cpi	r24, 0x25	; 37
    1390:	21 f4       	brne	.+8      	; 0x139a <vfprintf+0x52>
    1392:	b7 01       	movw	r22, r14
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	b1 d1       	rcall	.+866    	; 0x16fa <fputc>
    1398:	e8 cf       	rjmp	.-48     	; 0x136a <vfprintf+0x22>
    139a:	51 2c       	mov	r5, r1
    139c:	31 2c       	mov	r3, r1
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	20 32       	cpi	r18, 0x20	; 32
    13a2:	a0 f4       	brcc	.+40     	; 0x13cc <vfprintf+0x84>
    13a4:	8b 32       	cpi	r24, 0x2B	; 43
    13a6:	69 f0       	breq	.+26     	; 0x13c2 <vfprintf+0x7a>
    13a8:	30 f4       	brcc	.+12     	; 0x13b6 <vfprintf+0x6e>
    13aa:	80 32       	cpi	r24, 0x20	; 32
    13ac:	59 f0       	breq	.+22     	; 0x13c4 <vfprintf+0x7c>
    13ae:	83 32       	cpi	r24, 0x23	; 35
    13b0:	69 f4       	brne	.+26     	; 0x13cc <vfprintf+0x84>
    13b2:	20 61       	ori	r18, 0x10	; 16
    13b4:	2c c0       	rjmp	.+88     	; 0x140e <vfprintf+0xc6>
    13b6:	8d 32       	cpi	r24, 0x2D	; 45
    13b8:	39 f0       	breq	.+14     	; 0x13c8 <vfprintf+0x80>
    13ba:	80 33       	cpi	r24, 0x30	; 48
    13bc:	39 f4       	brne	.+14     	; 0x13cc <vfprintf+0x84>
    13be:	21 60       	ori	r18, 0x01	; 1
    13c0:	26 c0       	rjmp	.+76     	; 0x140e <vfprintf+0xc6>
    13c2:	22 60       	ori	r18, 0x02	; 2
    13c4:	24 60       	ori	r18, 0x04	; 4
    13c6:	23 c0       	rjmp	.+70     	; 0x140e <vfprintf+0xc6>
    13c8:	28 60       	ori	r18, 0x08	; 8
    13ca:	21 c0       	rjmp	.+66     	; 0x140e <vfprintf+0xc6>
    13cc:	27 fd       	sbrc	r18, 7
    13ce:	27 c0       	rjmp	.+78     	; 0x141e <vfprintf+0xd6>
    13d0:	30 ed       	ldi	r19, 0xD0	; 208
    13d2:	38 0f       	add	r19, r24
    13d4:	3a 30       	cpi	r19, 0x0A	; 10
    13d6:	78 f4       	brcc	.+30     	; 0x13f6 <vfprintf+0xae>
    13d8:	26 ff       	sbrs	r18, 6
    13da:	06 c0       	rjmp	.+12     	; 0x13e8 <vfprintf+0xa0>
    13dc:	fa e0       	ldi	r31, 0x0A	; 10
    13de:	5f 9e       	mul	r5, r31
    13e0:	30 0d       	add	r19, r0
    13e2:	11 24       	eor	r1, r1
    13e4:	53 2e       	mov	r5, r19
    13e6:	13 c0       	rjmp	.+38     	; 0x140e <vfprintf+0xc6>
    13e8:	8a e0       	ldi	r24, 0x0A	; 10
    13ea:	38 9e       	mul	r3, r24
    13ec:	30 0d       	add	r19, r0
    13ee:	11 24       	eor	r1, r1
    13f0:	33 2e       	mov	r3, r19
    13f2:	20 62       	ori	r18, 0x20	; 32
    13f4:	0c c0       	rjmp	.+24     	; 0x140e <vfprintf+0xc6>
    13f6:	8e 32       	cpi	r24, 0x2E	; 46
    13f8:	21 f4       	brne	.+8      	; 0x1402 <vfprintf+0xba>
    13fa:	26 fd       	sbrc	r18, 6
    13fc:	5f c1       	rjmp	.+702    	; 0x16bc <vfprintf+0x374>
    13fe:	20 64       	ori	r18, 0x40	; 64
    1400:	06 c0       	rjmp	.+12     	; 0x140e <vfprintf+0xc6>
    1402:	8c 36       	cpi	r24, 0x6C	; 108
    1404:	11 f4       	brne	.+4      	; 0x140a <vfprintf+0xc2>
    1406:	20 68       	ori	r18, 0x80	; 128
    1408:	02 c0       	rjmp	.+4      	; 0x140e <vfprintf+0xc6>
    140a:	88 36       	cpi	r24, 0x68	; 104
    140c:	41 f4       	brne	.+16     	; 0x141e <vfprintf+0xd6>
    140e:	f6 01       	movw	r30, r12
    1410:	93 fd       	sbrc	r25, 3
    1412:	85 91       	lpm	r24, Z+
    1414:	93 ff       	sbrs	r25, 3
    1416:	81 91       	ld	r24, Z+
    1418:	6f 01       	movw	r12, r30
    141a:	81 11       	cpse	r24, r1
    141c:	c1 cf       	rjmp	.-126    	; 0x13a0 <vfprintf+0x58>
    141e:	98 2f       	mov	r25, r24
    1420:	9f 7d       	andi	r25, 0xDF	; 223
    1422:	95 54       	subi	r25, 0x45	; 69
    1424:	93 30       	cpi	r25, 0x03	; 3
    1426:	28 f4       	brcc	.+10     	; 0x1432 <vfprintf+0xea>
    1428:	0c 5f       	subi	r16, 0xFC	; 252
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	ff e3       	ldi	r31, 0x3F	; 63
    142e:	f9 83       	std	Y+1, r31	; 0x01
    1430:	0d c0       	rjmp	.+26     	; 0x144c <vfprintf+0x104>
    1432:	83 36       	cpi	r24, 0x63	; 99
    1434:	31 f0       	breq	.+12     	; 0x1442 <vfprintf+0xfa>
    1436:	83 37       	cpi	r24, 0x73	; 115
    1438:	71 f0       	breq	.+28     	; 0x1456 <vfprintf+0x10e>
    143a:	83 35       	cpi	r24, 0x53	; 83
    143c:	09 f0       	breq	.+2      	; 0x1440 <vfprintf+0xf8>
    143e:	57 c0       	rjmp	.+174    	; 0x14ee <vfprintf+0x1a6>
    1440:	21 c0       	rjmp	.+66     	; 0x1484 <vfprintf+0x13c>
    1442:	f8 01       	movw	r30, r16
    1444:	80 81       	ld	r24, Z
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	0e 5f       	subi	r16, 0xFE	; 254
    144a:	1f 4f       	sbci	r17, 0xFF	; 255
    144c:	44 24       	eor	r4, r4
    144e:	43 94       	inc	r4
    1450:	51 2c       	mov	r5, r1
    1452:	54 01       	movw	r10, r8
    1454:	14 c0       	rjmp	.+40     	; 0x147e <vfprintf+0x136>
    1456:	38 01       	movw	r6, r16
    1458:	f2 e0       	ldi	r31, 0x02	; 2
    145a:	6f 0e       	add	r6, r31
    145c:	71 1c       	adc	r7, r1
    145e:	f8 01       	movw	r30, r16
    1460:	a0 80       	ld	r10, Z
    1462:	b1 80       	ldd	r11, Z+1	; 0x01
    1464:	26 ff       	sbrs	r18, 6
    1466:	03 c0       	rjmp	.+6      	; 0x146e <vfprintf+0x126>
    1468:	65 2d       	mov	r22, r5
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <vfprintf+0x12a>
    146e:	6f ef       	ldi	r22, 0xFF	; 255
    1470:	7f ef       	ldi	r23, 0xFF	; 255
    1472:	c5 01       	movw	r24, r10
    1474:	2c 87       	std	Y+12, r18	; 0x0c
    1476:	36 d1       	rcall	.+620    	; 0x16e4 <strnlen>
    1478:	2c 01       	movw	r4, r24
    147a:	83 01       	movw	r16, r6
    147c:	2c 85       	ldd	r18, Y+12	; 0x0c
    147e:	2f 77       	andi	r18, 0x7F	; 127
    1480:	22 2e       	mov	r2, r18
    1482:	16 c0       	rjmp	.+44     	; 0x14b0 <vfprintf+0x168>
    1484:	38 01       	movw	r6, r16
    1486:	f2 e0       	ldi	r31, 0x02	; 2
    1488:	6f 0e       	add	r6, r31
    148a:	71 1c       	adc	r7, r1
    148c:	f8 01       	movw	r30, r16
    148e:	a0 80       	ld	r10, Z
    1490:	b1 80       	ldd	r11, Z+1	; 0x01
    1492:	26 ff       	sbrs	r18, 6
    1494:	03 c0       	rjmp	.+6      	; 0x149c <vfprintf+0x154>
    1496:	65 2d       	mov	r22, r5
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <vfprintf+0x158>
    149c:	6f ef       	ldi	r22, 0xFF	; 255
    149e:	7f ef       	ldi	r23, 0xFF	; 255
    14a0:	c5 01       	movw	r24, r10
    14a2:	2c 87       	std	Y+12, r18	; 0x0c
    14a4:	14 d1       	rcall	.+552    	; 0x16ce <strnlen_P>
    14a6:	2c 01       	movw	r4, r24
    14a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    14aa:	20 68       	ori	r18, 0x80	; 128
    14ac:	22 2e       	mov	r2, r18
    14ae:	83 01       	movw	r16, r6
    14b0:	23 fc       	sbrc	r2, 3
    14b2:	19 c0       	rjmp	.+50     	; 0x14e6 <vfprintf+0x19e>
    14b4:	83 2d       	mov	r24, r3
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	48 16       	cp	r4, r24
    14ba:	59 06       	cpc	r5, r25
    14bc:	a0 f4       	brcc	.+40     	; 0x14e6 <vfprintf+0x19e>
    14be:	b7 01       	movw	r22, r14
    14c0:	80 e2       	ldi	r24, 0x20	; 32
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	1a d1       	rcall	.+564    	; 0x16fa <fputc>
    14c6:	3a 94       	dec	r3
    14c8:	f5 cf       	rjmp	.-22     	; 0x14b4 <vfprintf+0x16c>
    14ca:	f5 01       	movw	r30, r10
    14cc:	27 fc       	sbrc	r2, 7
    14ce:	85 91       	lpm	r24, Z+
    14d0:	27 fe       	sbrs	r2, 7
    14d2:	81 91       	ld	r24, Z+
    14d4:	5f 01       	movw	r10, r30
    14d6:	b7 01       	movw	r22, r14
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0f d1       	rcall	.+542    	; 0x16fa <fputc>
    14dc:	31 10       	cpse	r3, r1
    14de:	3a 94       	dec	r3
    14e0:	f1 e0       	ldi	r31, 0x01	; 1
    14e2:	4f 1a       	sub	r4, r31
    14e4:	51 08       	sbc	r5, r1
    14e6:	41 14       	cp	r4, r1
    14e8:	51 04       	cpc	r5, r1
    14ea:	79 f7       	brne	.-34     	; 0x14ca <vfprintf+0x182>
    14ec:	de c0       	rjmp	.+444    	; 0x16aa <vfprintf+0x362>
    14ee:	84 36       	cpi	r24, 0x64	; 100
    14f0:	11 f0       	breq	.+4      	; 0x14f6 <vfprintf+0x1ae>
    14f2:	89 36       	cpi	r24, 0x69	; 105
    14f4:	31 f5       	brne	.+76     	; 0x1542 <vfprintf+0x1fa>
    14f6:	f8 01       	movw	r30, r16
    14f8:	27 ff       	sbrs	r18, 7
    14fa:	07 c0       	rjmp	.+14     	; 0x150a <vfprintf+0x1c2>
    14fc:	60 81       	ld	r22, Z
    14fe:	71 81       	ldd	r23, Z+1	; 0x01
    1500:	82 81       	ldd	r24, Z+2	; 0x02
    1502:	93 81       	ldd	r25, Z+3	; 0x03
    1504:	0c 5f       	subi	r16, 0xFC	; 252
    1506:	1f 4f       	sbci	r17, 0xFF	; 255
    1508:	08 c0       	rjmp	.+16     	; 0x151a <vfprintf+0x1d2>
    150a:	60 81       	ld	r22, Z
    150c:	71 81       	ldd	r23, Z+1	; 0x01
    150e:	88 27       	eor	r24, r24
    1510:	77 fd       	sbrc	r23, 7
    1512:	80 95       	com	r24
    1514:	98 2f       	mov	r25, r24
    1516:	0e 5f       	subi	r16, 0xFE	; 254
    1518:	1f 4f       	sbci	r17, 0xFF	; 255
    151a:	2f 76       	andi	r18, 0x6F	; 111
    151c:	b2 2e       	mov	r11, r18
    151e:	97 ff       	sbrs	r25, 7
    1520:	09 c0       	rjmp	.+18     	; 0x1534 <vfprintf+0x1ec>
    1522:	90 95       	com	r25
    1524:	80 95       	com	r24
    1526:	70 95       	com	r23
    1528:	61 95       	neg	r22
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	8f 4f       	sbci	r24, 0xFF	; 255
    152e:	9f 4f       	sbci	r25, 0xFF	; 255
    1530:	20 68       	ori	r18, 0x80	; 128
    1532:	b2 2e       	mov	r11, r18
    1534:	2a e0       	ldi	r18, 0x0A	; 10
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	a4 01       	movw	r20, r8
    153a:	11 d1       	rcall	.+546    	; 0x175e <__ultoa_invert>
    153c:	a8 2e       	mov	r10, r24
    153e:	a8 18       	sub	r10, r8
    1540:	43 c0       	rjmp	.+134    	; 0x15c8 <vfprintf+0x280>
    1542:	85 37       	cpi	r24, 0x75	; 117
    1544:	29 f4       	brne	.+10     	; 0x1550 <vfprintf+0x208>
    1546:	2f 7e       	andi	r18, 0xEF	; 239
    1548:	b2 2e       	mov	r11, r18
    154a:	2a e0       	ldi	r18, 0x0A	; 10
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	25 c0       	rjmp	.+74     	; 0x159a <vfprintf+0x252>
    1550:	f2 2f       	mov	r31, r18
    1552:	f9 7f       	andi	r31, 0xF9	; 249
    1554:	bf 2e       	mov	r11, r31
    1556:	8f 36       	cpi	r24, 0x6F	; 111
    1558:	c1 f0       	breq	.+48     	; 0x158a <vfprintf+0x242>
    155a:	18 f4       	brcc	.+6      	; 0x1562 <vfprintf+0x21a>
    155c:	88 35       	cpi	r24, 0x58	; 88
    155e:	79 f0       	breq	.+30     	; 0x157e <vfprintf+0x236>
    1560:	ad c0       	rjmp	.+346    	; 0x16bc <vfprintf+0x374>
    1562:	80 37       	cpi	r24, 0x70	; 112
    1564:	19 f0       	breq	.+6      	; 0x156c <vfprintf+0x224>
    1566:	88 37       	cpi	r24, 0x78	; 120
    1568:	21 f0       	breq	.+8      	; 0x1572 <vfprintf+0x22a>
    156a:	a8 c0       	rjmp	.+336    	; 0x16bc <vfprintf+0x374>
    156c:	2f 2f       	mov	r18, r31
    156e:	20 61       	ori	r18, 0x10	; 16
    1570:	b2 2e       	mov	r11, r18
    1572:	b4 fe       	sbrs	r11, 4
    1574:	0d c0       	rjmp	.+26     	; 0x1590 <vfprintf+0x248>
    1576:	8b 2d       	mov	r24, r11
    1578:	84 60       	ori	r24, 0x04	; 4
    157a:	b8 2e       	mov	r11, r24
    157c:	09 c0       	rjmp	.+18     	; 0x1590 <vfprintf+0x248>
    157e:	24 ff       	sbrs	r18, 4
    1580:	0a c0       	rjmp	.+20     	; 0x1596 <vfprintf+0x24e>
    1582:	9f 2f       	mov	r25, r31
    1584:	96 60       	ori	r25, 0x06	; 6
    1586:	b9 2e       	mov	r11, r25
    1588:	06 c0       	rjmp	.+12     	; 0x1596 <vfprintf+0x24e>
    158a:	28 e0       	ldi	r18, 0x08	; 8
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	05 c0       	rjmp	.+10     	; 0x159a <vfprintf+0x252>
    1590:	20 e1       	ldi	r18, 0x10	; 16
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	02 c0       	rjmp	.+4      	; 0x159a <vfprintf+0x252>
    1596:	20 e1       	ldi	r18, 0x10	; 16
    1598:	32 e0       	ldi	r19, 0x02	; 2
    159a:	f8 01       	movw	r30, r16
    159c:	b7 fe       	sbrs	r11, 7
    159e:	07 c0       	rjmp	.+14     	; 0x15ae <vfprintf+0x266>
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	82 81       	ldd	r24, Z+2	; 0x02
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	0c 5f       	subi	r16, 0xFC	; 252
    15aa:	1f 4f       	sbci	r17, 0xFF	; 255
    15ac:	06 c0       	rjmp	.+12     	; 0x15ba <vfprintf+0x272>
    15ae:	60 81       	ld	r22, Z
    15b0:	71 81       	ldd	r23, Z+1	; 0x01
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 5f       	subi	r16, 0xFE	; 254
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	a4 01       	movw	r20, r8
    15bc:	d0 d0       	rcall	.+416    	; 0x175e <__ultoa_invert>
    15be:	a8 2e       	mov	r10, r24
    15c0:	a8 18       	sub	r10, r8
    15c2:	fb 2d       	mov	r31, r11
    15c4:	ff 77       	andi	r31, 0x7F	; 127
    15c6:	bf 2e       	mov	r11, r31
    15c8:	b6 fe       	sbrs	r11, 6
    15ca:	0b c0       	rjmp	.+22     	; 0x15e2 <vfprintf+0x29a>
    15cc:	2b 2d       	mov	r18, r11
    15ce:	2e 7f       	andi	r18, 0xFE	; 254
    15d0:	a5 14       	cp	r10, r5
    15d2:	50 f4       	brcc	.+20     	; 0x15e8 <vfprintf+0x2a0>
    15d4:	b4 fe       	sbrs	r11, 4
    15d6:	0a c0       	rjmp	.+20     	; 0x15ec <vfprintf+0x2a4>
    15d8:	b2 fc       	sbrc	r11, 2
    15da:	08 c0       	rjmp	.+16     	; 0x15ec <vfprintf+0x2a4>
    15dc:	2b 2d       	mov	r18, r11
    15de:	2e 7e       	andi	r18, 0xEE	; 238
    15e0:	05 c0       	rjmp	.+10     	; 0x15ec <vfprintf+0x2a4>
    15e2:	7a 2c       	mov	r7, r10
    15e4:	2b 2d       	mov	r18, r11
    15e6:	03 c0       	rjmp	.+6      	; 0x15ee <vfprintf+0x2a6>
    15e8:	7a 2c       	mov	r7, r10
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <vfprintf+0x2a6>
    15ec:	75 2c       	mov	r7, r5
    15ee:	24 ff       	sbrs	r18, 4
    15f0:	0d c0       	rjmp	.+26     	; 0x160c <vfprintf+0x2c4>
    15f2:	fe 01       	movw	r30, r28
    15f4:	ea 0d       	add	r30, r10
    15f6:	f1 1d       	adc	r31, r1
    15f8:	80 81       	ld	r24, Z
    15fa:	80 33       	cpi	r24, 0x30	; 48
    15fc:	11 f4       	brne	.+4      	; 0x1602 <vfprintf+0x2ba>
    15fe:	29 7e       	andi	r18, 0xE9	; 233
    1600:	09 c0       	rjmp	.+18     	; 0x1614 <vfprintf+0x2cc>
    1602:	22 ff       	sbrs	r18, 2
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <vfprintf+0x2ca>
    1606:	73 94       	inc	r7
    1608:	73 94       	inc	r7
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <vfprintf+0x2cc>
    160c:	82 2f       	mov	r24, r18
    160e:	86 78       	andi	r24, 0x86	; 134
    1610:	09 f0       	breq	.+2      	; 0x1614 <vfprintf+0x2cc>
    1612:	73 94       	inc	r7
    1614:	23 fd       	sbrc	r18, 3
    1616:	12 c0       	rjmp	.+36     	; 0x163c <vfprintf+0x2f4>
    1618:	20 ff       	sbrs	r18, 0
    161a:	06 c0       	rjmp	.+12     	; 0x1628 <vfprintf+0x2e0>
    161c:	5a 2c       	mov	r5, r10
    161e:	73 14       	cp	r7, r3
    1620:	18 f4       	brcc	.+6      	; 0x1628 <vfprintf+0x2e0>
    1622:	53 0c       	add	r5, r3
    1624:	57 18       	sub	r5, r7
    1626:	73 2c       	mov	r7, r3
    1628:	73 14       	cp	r7, r3
    162a:	60 f4       	brcc	.+24     	; 0x1644 <vfprintf+0x2fc>
    162c:	b7 01       	movw	r22, r14
    162e:	80 e2       	ldi	r24, 0x20	; 32
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	2c 87       	std	Y+12, r18	; 0x0c
    1634:	62 d0       	rcall	.+196    	; 0x16fa <fputc>
    1636:	73 94       	inc	r7
    1638:	2c 85       	ldd	r18, Y+12	; 0x0c
    163a:	f6 cf       	rjmp	.-20     	; 0x1628 <vfprintf+0x2e0>
    163c:	73 14       	cp	r7, r3
    163e:	10 f4       	brcc	.+4      	; 0x1644 <vfprintf+0x2fc>
    1640:	37 18       	sub	r3, r7
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <vfprintf+0x2fe>
    1644:	31 2c       	mov	r3, r1
    1646:	24 ff       	sbrs	r18, 4
    1648:	11 c0       	rjmp	.+34     	; 0x166c <vfprintf+0x324>
    164a:	b7 01       	movw	r22, r14
    164c:	80 e3       	ldi	r24, 0x30	; 48
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	2c 87       	std	Y+12, r18	; 0x0c
    1652:	53 d0       	rcall	.+166    	; 0x16fa <fputc>
    1654:	2c 85       	ldd	r18, Y+12	; 0x0c
    1656:	22 ff       	sbrs	r18, 2
    1658:	16 c0       	rjmp	.+44     	; 0x1686 <vfprintf+0x33e>
    165a:	21 ff       	sbrs	r18, 1
    165c:	03 c0       	rjmp	.+6      	; 0x1664 <vfprintf+0x31c>
    165e:	88 e5       	ldi	r24, 0x58	; 88
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <vfprintf+0x320>
    1664:	88 e7       	ldi	r24, 0x78	; 120
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	b7 01       	movw	r22, r14
    166a:	0c c0       	rjmp	.+24     	; 0x1684 <vfprintf+0x33c>
    166c:	82 2f       	mov	r24, r18
    166e:	86 78       	andi	r24, 0x86	; 134
    1670:	51 f0       	breq	.+20     	; 0x1686 <vfprintf+0x33e>
    1672:	21 fd       	sbrc	r18, 1
    1674:	02 c0       	rjmp	.+4      	; 0x167a <vfprintf+0x332>
    1676:	80 e2       	ldi	r24, 0x20	; 32
    1678:	01 c0       	rjmp	.+2      	; 0x167c <vfprintf+0x334>
    167a:	8b e2       	ldi	r24, 0x2B	; 43
    167c:	27 fd       	sbrc	r18, 7
    167e:	8d e2       	ldi	r24, 0x2D	; 45
    1680:	b7 01       	movw	r22, r14
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	3a d0       	rcall	.+116    	; 0x16fa <fputc>
    1686:	a5 14       	cp	r10, r5
    1688:	30 f4       	brcc	.+12     	; 0x1696 <vfprintf+0x34e>
    168a:	b7 01       	movw	r22, r14
    168c:	80 e3       	ldi	r24, 0x30	; 48
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	34 d0       	rcall	.+104    	; 0x16fa <fputc>
    1692:	5a 94       	dec	r5
    1694:	f8 cf       	rjmp	.-16     	; 0x1686 <vfprintf+0x33e>
    1696:	aa 94       	dec	r10
    1698:	f4 01       	movw	r30, r8
    169a:	ea 0d       	add	r30, r10
    169c:	f1 1d       	adc	r31, r1
    169e:	80 81       	ld	r24, Z
    16a0:	b7 01       	movw	r22, r14
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	2a d0       	rcall	.+84     	; 0x16fa <fputc>
    16a6:	a1 10       	cpse	r10, r1
    16a8:	f6 cf       	rjmp	.-20     	; 0x1696 <vfprintf+0x34e>
    16aa:	33 20       	and	r3, r3
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <vfprintf+0x368>
    16ae:	5d ce       	rjmp	.-838    	; 0x136a <vfprintf+0x22>
    16b0:	b7 01       	movw	r22, r14
    16b2:	80 e2       	ldi	r24, 0x20	; 32
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	21 d0       	rcall	.+66     	; 0x16fa <fputc>
    16b8:	3a 94       	dec	r3
    16ba:	f7 cf       	rjmp	.-18     	; 0x16aa <vfprintf+0x362>
    16bc:	f7 01       	movw	r30, r14
    16be:	86 81       	ldd	r24, Z+6	; 0x06
    16c0:	97 81       	ldd	r25, Z+7	; 0x07
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <vfprintf+0x380>
    16c4:	8f ef       	ldi	r24, 0xFF	; 255
    16c6:	9f ef       	ldi	r25, 0xFF	; 255
    16c8:	2c 96       	adiw	r28, 0x0c	; 12
    16ca:	e2 e1       	ldi	r30, 0x12	; 18
    16cc:	bf c0       	rjmp	.+382    	; 0x184c <__epilogue_restores__>

000016ce <strnlen_P>:
    16ce:	fc 01       	movw	r30, r24
    16d0:	05 90       	lpm	r0, Z+
    16d2:	61 50       	subi	r22, 0x01	; 1
    16d4:	70 40       	sbci	r23, 0x00	; 0
    16d6:	01 10       	cpse	r0, r1
    16d8:	d8 f7       	brcc	.-10     	; 0x16d0 <strnlen_P+0x2>
    16da:	80 95       	com	r24
    16dc:	90 95       	com	r25
    16de:	8e 0f       	add	r24, r30
    16e0:	9f 1f       	adc	r25, r31
    16e2:	08 95       	ret

000016e4 <strnlen>:
    16e4:	fc 01       	movw	r30, r24
    16e6:	61 50       	subi	r22, 0x01	; 1
    16e8:	70 40       	sbci	r23, 0x00	; 0
    16ea:	01 90       	ld	r0, Z+
    16ec:	01 10       	cpse	r0, r1
    16ee:	d8 f7       	brcc	.-10     	; 0x16e6 <strnlen+0x2>
    16f0:	80 95       	com	r24
    16f2:	90 95       	com	r25
    16f4:	8e 0f       	add	r24, r30
    16f6:	9f 1f       	adc	r25, r31
    16f8:	08 95       	ret

000016fa <fputc>:
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	18 2f       	mov	r17, r24
    1704:	09 2f       	mov	r16, r25
    1706:	eb 01       	movw	r28, r22
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	81 fd       	sbrc	r24, 1
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <fputc+0x1a>
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	9f ef       	ldi	r25, 0xFF	; 255
    1712:	20 c0       	rjmp	.+64     	; 0x1754 <fputc+0x5a>
    1714:	82 ff       	sbrs	r24, 2
    1716:	10 c0       	rjmp	.+32     	; 0x1738 <fputc+0x3e>
    1718:	4e 81       	ldd	r20, Y+6	; 0x06
    171a:	5f 81       	ldd	r21, Y+7	; 0x07
    171c:	2c 81       	ldd	r18, Y+4	; 0x04
    171e:	3d 81       	ldd	r19, Y+5	; 0x05
    1720:	42 17       	cp	r20, r18
    1722:	53 07       	cpc	r21, r19
    1724:	7c f4       	brge	.+30     	; 0x1744 <fputc+0x4a>
    1726:	e8 81       	ld	r30, Y
    1728:	f9 81       	ldd	r31, Y+1	; 0x01
    172a:	9f 01       	movw	r18, r30
    172c:	2f 5f       	subi	r18, 0xFF	; 255
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	28 83       	st	Y, r18
    1732:	39 83       	std	Y+1, r19	; 0x01
    1734:	10 83       	st	Z, r17
    1736:	06 c0       	rjmp	.+12     	; 0x1744 <fputc+0x4a>
    1738:	e8 85       	ldd	r30, Y+8	; 0x08
    173a:	f9 85       	ldd	r31, Y+9	; 0x09
    173c:	81 2f       	mov	r24, r17
    173e:	09 95       	icall
    1740:	89 2b       	or	r24, r25
    1742:	29 f7       	brne	.-54     	; 0x170e <fputc+0x14>
    1744:	2e 81       	ldd	r18, Y+6	; 0x06
    1746:	3f 81       	ldd	r19, Y+7	; 0x07
    1748:	2f 5f       	subi	r18, 0xFF	; 255
    174a:	3f 4f       	sbci	r19, 0xFF	; 255
    174c:	2e 83       	std	Y+6, r18	; 0x06
    174e:	3f 83       	std	Y+7, r19	; 0x07
    1750:	81 2f       	mov	r24, r17
    1752:	90 2f       	mov	r25, r16
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	08 95       	ret

0000175e <__ultoa_invert>:
    175e:	fa 01       	movw	r30, r20
    1760:	aa 27       	eor	r26, r26
    1762:	28 30       	cpi	r18, 0x08	; 8
    1764:	51 f1       	breq	.+84     	; 0x17ba <__ultoa_invert+0x5c>
    1766:	20 31       	cpi	r18, 0x10	; 16
    1768:	81 f1       	breq	.+96     	; 0x17ca <__ultoa_invert+0x6c>
    176a:	e8 94       	clt
    176c:	6f 93       	push	r22
    176e:	6e 7f       	andi	r22, 0xFE	; 254
    1770:	6e 5f       	subi	r22, 0xFE	; 254
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	8f 4f       	sbci	r24, 0xFF	; 255
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	af 4f       	sbci	r26, 0xFF	; 255
    177a:	b1 e0       	ldi	r27, 0x01	; 1
    177c:	3e d0       	rcall	.+124    	; 0x17fa <__ultoa_invert+0x9c>
    177e:	b4 e0       	ldi	r27, 0x04	; 4
    1780:	3c d0       	rcall	.+120    	; 0x17fa <__ultoa_invert+0x9c>
    1782:	67 0f       	add	r22, r23
    1784:	78 1f       	adc	r23, r24
    1786:	89 1f       	adc	r24, r25
    1788:	9a 1f       	adc	r25, r26
    178a:	a1 1d       	adc	r26, r1
    178c:	68 0f       	add	r22, r24
    178e:	79 1f       	adc	r23, r25
    1790:	8a 1f       	adc	r24, r26
    1792:	91 1d       	adc	r25, r1
    1794:	a1 1d       	adc	r26, r1
    1796:	6a 0f       	add	r22, r26
    1798:	71 1d       	adc	r23, r1
    179a:	81 1d       	adc	r24, r1
    179c:	91 1d       	adc	r25, r1
    179e:	a1 1d       	adc	r26, r1
    17a0:	20 d0       	rcall	.+64     	; 0x17e2 <__ultoa_invert+0x84>
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <__ultoa_invert+0x48>
    17a4:	68 94       	set
    17a6:	3f 91       	pop	r19
    17a8:	2a e0       	ldi	r18, 0x0A	; 10
    17aa:	26 9f       	mul	r18, r22
    17ac:	11 24       	eor	r1, r1
    17ae:	30 19       	sub	r19, r0
    17b0:	30 5d       	subi	r19, 0xD0	; 208
    17b2:	31 93       	st	Z+, r19
    17b4:	de f6       	brtc	.-74     	; 0x176c <__ultoa_invert+0xe>
    17b6:	cf 01       	movw	r24, r30
    17b8:	08 95       	ret
    17ba:	46 2f       	mov	r20, r22
    17bc:	47 70       	andi	r20, 0x07	; 7
    17be:	40 5d       	subi	r20, 0xD0	; 208
    17c0:	41 93       	st	Z+, r20
    17c2:	b3 e0       	ldi	r27, 0x03	; 3
    17c4:	0f d0       	rcall	.+30     	; 0x17e4 <__ultoa_invert+0x86>
    17c6:	c9 f7       	brne	.-14     	; 0x17ba <__ultoa_invert+0x5c>
    17c8:	f6 cf       	rjmp	.-20     	; 0x17b6 <__ultoa_invert+0x58>
    17ca:	46 2f       	mov	r20, r22
    17cc:	4f 70       	andi	r20, 0x0F	; 15
    17ce:	40 5d       	subi	r20, 0xD0	; 208
    17d0:	4a 33       	cpi	r20, 0x3A	; 58
    17d2:	18 f0       	brcs	.+6      	; 0x17da <__ultoa_invert+0x7c>
    17d4:	49 5d       	subi	r20, 0xD9	; 217
    17d6:	31 fd       	sbrc	r19, 1
    17d8:	40 52       	subi	r20, 0x20	; 32
    17da:	41 93       	st	Z+, r20
    17dc:	02 d0       	rcall	.+4      	; 0x17e2 <__ultoa_invert+0x84>
    17de:	a9 f7       	brne	.-22     	; 0x17ca <__ultoa_invert+0x6c>
    17e0:	ea cf       	rjmp	.-44     	; 0x17b6 <__ultoa_invert+0x58>
    17e2:	b4 e0       	ldi	r27, 0x04	; 4
    17e4:	a6 95       	lsr	r26
    17e6:	97 95       	ror	r25
    17e8:	87 95       	ror	r24
    17ea:	77 95       	ror	r23
    17ec:	67 95       	ror	r22
    17ee:	ba 95       	dec	r27
    17f0:	c9 f7       	brne	.-14     	; 0x17e4 <__ultoa_invert+0x86>
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	61 05       	cpc	r22, r1
    17f6:	71 05       	cpc	r23, r1
    17f8:	08 95       	ret
    17fa:	9b 01       	movw	r18, r22
    17fc:	ac 01       	movw	r20, r24
    17fe:	0a 2e       	mov	r0, r26
    1800:	06 94       	lsr	r0
    1802:	57 95       	ror	r21
    1804:	47 95       	ror	r20
    1806:	37 95       	ror	r19
    1808:	27 95       	ror	r18
    180a:	ba 95       	dec	r27
    180c:	c9 f7       	brne	.-14     	; 0x1800 <__ultoa_invert+0xa2>
    180e:	62 0f       	add	r22, r18
    1810:	73 1f       	adc	r23, r19
    1812:	84 1f       	adc	r24, r20
    1814:	95 1f       	adc	r25, r21
    1816:	a0 1d       	adc	r26, r0
    1818:	08 95       	ret

0000181a <__prologue_saves__>:
    181a:	2f 92       	push	r2
    181c:	3f 92       	push	r3
    181e:	4f 92       	push	r4
    1820:	5f 92       	push	r5
    1822:	6f 92       	push	r6
    1824:	7f 92       	push	r7
    1826:	8f 92       	push	r8
    1828:	9f 92       	push	r9
    182a:	af 92       	push	r10
    182c:	bf 92       	push	r11
    182e:	cf 92       	push	r12
    1830:	df 92       	push	r13
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	ca 1b       	sub	r28, r26
    1844:	db 0b       	sbc	r29, r27
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	09 94       	ijmp

0000184c <__epilogue_restores__>:
    184c:	2a 88       	ldd	r2, Y+18	; 0x12
    184e:	39 88       	ldd	r3, Y+17	; 0x11
    1850:	48 88       	ldd	r4, Y+16	; 0x10
    1852:	5f 84       	ldd	r5, Y+15	; 0x0f
    1854:	6e 84       	ldd	r6, Y+14	; 0x0e
    1856:	7d 84       	ldd	r7, Y+13	; 0x0d
    1858:	8c 84       	ldd	r8, Y+12	; 0x0c
    185a:	9b 84       	ldd	r9, Y+11	; 0x0b
    185c:	aa 84       	ldd	r10, Y+10	; 0x0a
    185e:	b9 84       	ldd	r11, Y+9	; 0x09
    1860:	c8 84       	ldd	r12, Y+8	; 0x08
    1862:	df 80       	ldd	r13, Y+7	; 0x07
    1864:	ee 80       	ldd	r14, Y+6	; 0x06
    1866:	fd 80       	ldd	r15, Y+5	; 0x05
    1868:	0c 81       	ldd	r16, Y+4	; 0x04
    186a:	1b 81       	ldd	r17, Y+3	; 0x03
    186c:	aa 81       	ldd	r26, Y+2	; 0x02
    186e:	b9 81       	ldd	r27, Y+1	; 0x01
    1870:	ce 0f       	add	r28, r30
    1872:	d1 1d       	adc	r29, r1
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	ed 01       	movw	r28, r26
    187a:	08 95       	ret

0000187c <_exit>:
    187c:	f8 94       	cli

0000187e <__stop_program>:
    187e:	ff cf       	rjmp	.-2      	; 0x187e <__stop_program>
